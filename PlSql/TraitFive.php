<?php

namespace PlSql;

use Antlr\Antlr4\Runtime\Atn\ATN;
use Antlr\Antlr4\Runtime\Error\Exceptions\FailedPredicateException;
use Antlr\Antlr4\Runtime\Error\Exceptions\NoViableAltException;
use Antlr\Antlr4\Runtime\Error\Exceptions\RecognitionException;
use Antlr\Antlr4\Runtime\Token;

trait TraitFive
{
    /**
     * @throws RecognitionException
     */
    public function deferred_segment_creation(): Context\Deferred_segment_creationContext
    {
        $localContext = new Context\Deferred_segment_creationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 612, self::RULE_deferred_segment_creation);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6340);
            $this->match(self::SEGMENT);
            $this->setState(6341);
            $this->match(self::CREATION);
            $this->setState(6342);

            $_la = $this->input->LA(1);

            if (!($_la === self::DEFERRED || $_la === self::IMMEDIATE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function segment_attributes_clause(): Context\Segment_attributes_clauseContext
    {
        $localContext = new Context\Segment_attributes_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 614, self::RULE_segment_attributes_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6348);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(6348);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::INITRANS:
                            case self::PCTFREE:
                            case self::PCTUSED:
                            case self::STORAGE:
                                $this->setState(6344);
                                $this->physical_attributes_clause();
                                break;

                            case self::TABLESPACE:
                                $this->setState(6345);
                                $this->match(self::TABLESPACE);
                                $this->setState(6346);
                                $localContext->tablespace_name = $this->id_expression();
                                break;

                            case self::FILESYSTEM_LIKE_LOGGING:
                            case self::LOGGING:
                            case self::NOLOGGING:
                                $this->setState(6347);
                                $this->logging_clause();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(6350);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 749, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function physical_properties(): Context\Physical_propertiesContext
    {
        $localContext = new Context\Physical_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 616, self::RULE_physical_properties);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6353);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::SEGMENT) {
                $this->setState(6352);
                $this->deferred_segment_creation();
            }
            $this->setState(6355);
            $this->segment_attributes_clause();
            $this->setState(6357);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMPRESS || $_la === self::NOCOMPRESS) {
                $this->setState(6356);
                $this->table_compression();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function row_movement_clause(): Context\Row_movement_clauseContext
    {
        $localContext = new Context\Row_movement_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 618, self::RULE_row_movement_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6360);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DISABLE || $_la === self::ENABLE) {
                $this->setState(6359);

                $_la = $this->input->LA(1);

                if (!($_la === self::DISABLE || $_la === self::ENABLE)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(6362);
            $this->match(self::ROW);
            $this->setState(6363);
            $this->match(self::MOVEMENT);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function flashback_archive_clause(): Context\Flashback_archive_clauseContext
    {
        $localContext = new Context\Flashback_archive_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 620, self::RULE_flashback_archive_clause);

        try {
            $this->setState(6371);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::FLASHBACK:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6365);
                    $this->match(self::FLASHBACK);
                    $this->setState(6366);
                    $this->match(self::ARCHIVE);
                    $this->setState(6367);
                    $localContext->flashback_archive = $this->match(self::REGULAR_ID);
                    break;

                case self::NO:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6368);
                    $this->match(self::NO);
                    $this->setState(6369);
                    $this->match(self::FLASHBACK);
                    $this->setState(6370);
                    $this->match(self::ARCHIVE);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function log_grp(): Context\Log_grpContext
    {
        $localContext = new Context\Log_grpContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 622, self::RULE_log_grp);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6373);
            $this->match(self::UNSIGNED_INTEGER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function supplemental_table_logging(): Context\Supplemental_table_loggingContext
    {
        $localContext = new Context\Supplemental_table_loggingContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 624, self::RULE_supplemental_table_logging);

        try {
            $this->setState(6415);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ADD:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6375);
                    $this->match(self::ADD);
                    $this->setState(6376);
                    $this->match(self::SUPPLEMENTAL);
                    $this->setState(6377);
                    $this->match(self::LOG);
                    $this->setState(6380);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::GROUP:
                            $this->setState(6378);
                            $this->supplemental_log_grp_clause();
                            break;

                        case self::DATA:
                            $this->setState(6379);
                            $this->supplemental_id_key_clause();
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(6391);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6382);
                        $this->match(self::COMMA);
                        $this->setState(6383);
                        $this->match(self::SUPPLEMENTAL);
                        $this->setState(6384);
                        $this->match(self::LOG);
                        $this->setState(6387);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::GROUP:
                                $this->setState(6385);
                                $this->supplemental_log_grp_clause();
                                break;

                            case self::DATA:
                                $this->setState(6386);
                                $this->supplemental_id_key_clause();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(6393);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case self::DROP:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6394);
                    $this->match(self::DROP);
                    $this->setState(6395);
                    $this->match(self::SUPPLEMENTAL);
                    $this->setState(6396);
                    $this->match(self::LOG);
                    $this->setState(6400);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::DATA:
                            $this->setState(6397);
                            $this->supplemental_id_key_clause();
                            break;

                        case self::GROUP:
                            $this->setState(6398);
                            $this->match(self::GROUP);
                            $this->setState(6399);
                            $this->log_grp();
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(6412);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6402);
                        $this->match(self::COMMA);
                        $this->setState(6403);
                        $this->match(self::SUPPLEMENTAL);
                        $this->setState(6404);
                        $this->match(self::LOG);
                        $this->setState(6408);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::DATA:
                                $this->setState(6405);
                                $this->supplemental_id_key_clause();
                                break;

                            case self::GROUP:
                                $this->setState(6406);
                                $this->match(self::GROUP);
                                $this->setState(6407);
                                $this->log_grp();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(6414);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function supplemental_log_grp_clause(): Context\Supplemental_log_grp_clauseContext
    {
        $localContext = new Context\Supplemental_log_grp_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 626, self::RULE_supplemental_log_grp_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6417);
            $this->match(self::GROUP);
            $this->setState(6418);
            $this->log_grp();
            $this->setState(6419);
            $this->match(self::LEFT_PAREN);
            $this->setState(6420);
            $this->regular_id();
            $this->setState(6423);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NO) {
                $this->setState(6421);
                $this->match(self::NO);
                $this->setState(6422);
                $this->match(self::LOG);
            }
            $this->setState(6433);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6425);
                $this->match(self::COMMA);
                $this->setState(6426);
                $this->regular_id();
                $this->setState(6429);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NO) {
                    $this->setState(6427);
                    $this->match(self::NO);
                    $this->setState(6428);
                    $this->match(self::LOG);
                }
                $this->setState(6435);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(6436);
            $this->match(self::RIGHT_PAREN);
            $this->setState(6438);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ALWAYS) {
                $this->setState(6437);
                $this->match(self::ALWAYS);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function supplemental_id_key_clause(): Context\Supplemental_id_key_clauseContext
    {
        $localContext = new Context\Supplemental_id_key_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 628, self::RULE_supplemental_id_key_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6440);
            $this->match(self::DATA);
            $this->setState(6441);
            $this->match(self::LEFT_PAREN);
            $this->setState(6453);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(6443);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::COMMA) {
                    $this->setState(6442);
                    $this->match(self::COMMA);
                }
                $this->setState(6451);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::ALL:
                        $this->setState(6445);
                        $this->match(self::ALL);
                        break;

                    case self::PRIMARY:
                        $this->setState(6446);
                        $this->match(self::PRIMARY);
                        $this->setState(6447);
                        $this->match(self::KEY);
                        break;

                    case self::UNIQUE:
                        $this->setState(6448);
                        $this->match(self::UNIQUE);
                        break;

                    case self::FOREIGN:
                        $this->setState(6449);
                        $this->match(self::FOREIGN);
                        $this->setState(6450);
                        $this->match(self::KEY);
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(6455);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::ALL || $_la === self::FOREIGN || $_la === self::PRIMARY || $_la === self::UNIQUE || $_la === self::COMMA);
            $this->setState(6457);
            $this->match(self::RIGHT_PAREN);
            $this->setState(6458);
            $this->match(self::COLUMNS);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function allocate_extent_clause(): Context\Allocate_extent_clauseContext
    {
        $localContext = new Context\Allocate_extent_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 630, self::RULE_allocate_extent_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6460);
            $this->match(self::ALLOCATE);
            $this->setState(6461);
            $this->match(self::EXTENT);
            $this->setState(6474);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LEFT_PAREN) {
                $this->setState(6462);
                $this->match(self::LEFT_PAREN);
                $this->setState(6469);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(6469);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::SIZE:
                            $this->setState(6463);
                            $this->match(self::SIZE);
                            $this->setState(6464);
                            $this->size_clause();
                            break;

                        case self::DATAFILE:
                            $this->setState(6465);
                            $this->match(self::DATAFILE);
                            $this->setState(6466);
                            $localContext->datafile = $this->match(self::CHAR_STRING);
                            break;

                        case self::INSTANCE:
                            $this->setState(6467);
                            $this->match(self::INSTANCE);
                            $this->setState(6468);
                            $localContext->inst_num = $this->match(self::UNSIGNED_INTEGER);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(6471);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::DATAFILE || $_la === self::INSTANCE || $_la === self::SIZE);
                $this->setState(6473);
                $this->match(self::RIGHT_PAREN);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function deallocate_unused_clause(): Context\Deallocate_unused_clauseContext
    {
        $localContext = new Context\Deallocate_unused_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 632, self::RULE_deallocate_unused_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6476);
            $this->match(self::DEALLOCATE);
            $this->setState(6477);
            $this->match(self::UNUSED);
            $this->setState(6480);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::KEEP) {
                $this->setState(6478);
                $this->match(self::KEEP);
                $this->setState(6479);
                $this->size_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function shrink_clause(): Context\Shrink_clauseContext
    {
        $localContext = new Context\Shrink_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 634, self::RULE_shrink_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6482);
            $this->match(self::SHRINK);
            $this->setState(6483);
            $this->match(self::SPACE_KEYWORD);
            $this->setState(6485);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMPACT) {
                $this->setState(6484);
                $this->match(self::COMPACT);
            }
            $this->setState(6488);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CASCADE) {
                $this->setState(6487);
                $this->match(self::CASCADE);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function records_per_block_clause(): Context\Records_per_block_clauseContext
    {
        $localContext = new Context\Records_per_block_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 636, self::RULE_records_per_block_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6491);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::MINIMIZE || $_la === self::NOMINIMIZE) {
                $this->setState(6490);

                $_la = $this->input->LA(1);

                if (!($_la === self::MINIMIZE || $_la === self::NOMINIMIZE)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(6493);
            $this->match(self::RECORDS_PER_BLOCK);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function upgrade_table_clause(): Context\Upgrade_table_clauseContext
    {
        $localContext = new Context\Upgrade_table_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 638, self::RULE_upgrade_table_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6495);
            $this->match(self::UPGRADE);

            $this->setState(6497);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(6496);
                $this->match(self::NOT);
            }
            $this->setState(6499);
            $this->match(self::INCLUDING);
            $this->setState(6500);
            $this->match(self::DATA);
            $this->setState(6502);
            $this->column_properties();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function truncate_table(): Context\Truncate_tableContext
    {
        $localContext = new Context\Truncate_tableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 640, self::RULE_truncate_table);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6504);
            $this->match(self::TRUNCATE);
            $this->setState(6505);
            $this->match(self::TABLE);
            $this->setState(6506);
            $this->tableview_name();
            $this->setState(6508);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PURGE) {
                $this->setState(6507);
                $this->match(self::PURGE);
            }
            $this->setState(6510);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_table(): Context\Drop_tableContext
    {
        $localContext = new Context\Drop_tableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 642, self::RULE_drop_table);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6512);
            $this->match(self::DROP);
            $this->setState(6513);
            $this->match(self::TABLE);
            $this->setState(6514);
            $this->tableview_name();
            $this->setState(6516);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PURGE) {
                $this->setState(6515);
                $this->match(self::PURGE);
            }
            $this->setState(6518);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_view(): Context\Drop_viewContext
    {
        $localContext = new Context\Drop_viewContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 644, self::RULE_drop_view);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6520);
            $this->match(self::DROP);
            $this->setState(6521);
            $this->match(self::VIEW);
            $this->setState(6522);
            $this->tableview_name();
            $this->setState(6525);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CASCADE) {
                $this->setState(6523);
                $this->match(self::CASCADE);
                $this->setState(6524);
                $this->match(self::CONSTRAINT);
            }
            $this->setState(6527);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function comment_on_column(): Context\Comment_on_columnContext
    {
        $localContext = new Context\Comment_on_columnContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 646, self::RULE_comment_on_column);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6529);
            $this->match(self::COMMENT);
            $this->setState(6530);
            $this->match(self::ON);
            $this->setState(6531);
            $this->match(self::COLUMN);
            $this->setState(6532);
            $this->column_name();
            $this->setState(6533);
            $this->match(self::IS);
            $this->setState(6534);
            $this->quoted_string();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function enable_or_disable(): Context\Enable_or_disableContext
    {
        $localContext = new Context\Enable_or_disableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 648, self::RULE_enable_or_disable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6536);

            $_la = $this->input->LA(1);

            if (!($_la === self::DISABLE || $_la === self::ENABLE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function allow_or_disallow(): Context\Allow_or_disallowContext
    {
        $localContext = new Context\Allow_or_disallowContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 650, self::RULE_allow_or_disallow);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6538);

            $_la = $this->input->LA(1);

            if (!($_la === self::ALLOW || $_la === self::DISALLOW)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function create_synonym(): Context\Create_synonymContext
    {
        $localContext = new Context\Create_synonymContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 652, self::RULE_create_synonym);

        try {
            $this->setState(6582);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 786, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6540);
                    $this->match(self::CREATE);
                    $this->setState(6543);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self:: OR) {
                        $this->setState(6541);
                        $this->match(self:: OR);
                        $this->setState(6542);
                        $this->match(self::REPLACE);
                    }
                    $this->setState(6545);
                    $this->match(self::PUBLIC);
                    $this->setState(6546);
                    $this->match(self::SYNONYM);
                    $this->setState(6547);
                    $this->synonym_name();
                    $this->setState(6548);
                    $this->match(self::FOR);
                    $this->setState(6552);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 780, $this->ctx)) {
                        case 1:
                            $this->setState(6549);
                            $this->schema_name();
                            $this->setState(6550);
                            $this->match(self::PERIOD);
                            break;
                    }
                    $this->setState(6554);
                    $this->schema_object_name();
                    $this->setState(6557);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 781, $this->ctx)) {
                        case 1:
                            $this->setState(6555);
                            $this->match(self::AT_SIGN);
                            $this->setState(6556);
                            $this->link_name();
                            break;
                    }
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6559);
                    $this->match(self::CREATE);
                    $this->setState(6562);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self:: OR) {
                        $this->setState(6560);
                        $this->match(self:: OR);
                        $this->setState(6561);
                        $this->match(self::REPLACE);
                    }
                    $this->setState(6564);
                    $this->match(self::SYNONYM);
                    $this->setState(6568);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 783, $this->ctx)) {
                        case 1:
                            $this->setState(6565);
                            $this->schema_name();
                            $this->setState(6566);
                            $this->match(self::PERIOD);
                            break;
                    }
                    $this->setState(6570);
                    $this->synonym_name();
                    $this->setState(6571);
                    $this->match(self::FOR);
                    $this->setState(6575);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 784, $this->ctx)) {
                        case 1:
                            $this->setState(6572);
                            $this->schema_name();
                            $this->setState(6573);
                            $this->match(self::PERIOD);
                            break;
                    }
                    $this->setState(6577);
                    $this->schema_object_name();
                    $this->setState(6580);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 785, $this->ctx)) {
                        case 1:
                            $this->setState(6578);
                            $this->match(self::AT_SIGN);
                            $this->setState(6579);
                            $this->link_name();
                            break;
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function comment_on_table(): Context\Comment_on_tableContext
    {
        $localContext = new Context\Comment_on_tableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 654, self::RULE_comment_on_table);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6584);
            $this->match(self::COMMENT);
            $this->setState(6585);
            $this->match(self::ON);
            $this->setState(6586);
            $this->match(self::TABLE);
            $this->setState(6587);
            $this->tableview_name();
            $this->setState(6588);
            $this->match(self::IS);
            $this->setState(6589);
            $this->quoted_string();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_cluster(): Context\Alter_clusterContext
    {
        $localContext = new Context\Alter_clusterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 656, self::RULE_alter_cluster);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6591);
            $this->match(self::ALTER);
            $this->setState(6592);
            $this->match(self::CLUSTER);
            $this->setState(6593);
            $this->cluster_name();
            $this->setState(6600);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(6600);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::INITRANS:
                    case self::PCTFREE:
                    case self::PCTUSED:
                    case self::STORAGE:
                        $this->setState(6594);
                        $this->physical_attributes_clause();
                        break;

                    case self::SIZE:
                        $this->setState(6595);
                        $this->match(self::SIZE);
                        $this->setState(6596);
                        $this->size_clause();
                        break;

                    case self::ALLOCATE:
                        $this->setState(6597);
                        $this->allocate_extent_clause();
                        break;

                    case self::DEALLOCATE:
                        $this->setState(6598);
                        $this->deallocate_unused_clause();
                        break;

                    case self::CACHE:
                    case self::NOCACHE:
                        $this->setState(6599);
                        $this->cache_or_nocache();
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(6602);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::ALLOCATE || $_la === self::CACHE || $_la === self::DEALLOCATE || $_la === self::INITRANS || $_la === self::NOCACHE || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::SIZE || $_la === self::STORAGE);
            $this->setState(6605);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOPARALLEL || $_la === self::PARALLEL) {
                $this->setState(6604);
                $this->parallel_clause();
            }
            $this->setState(6607);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function cache_or_nocache(): Context\Cache_or_nocacheContext
    {
        $localContext = new Context\Cache_or_nocacheContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 658, self::RULE_cache_or_nocache);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6609);

            $_la = $this->input->LA(1);

            if (!($_la === self::CACHE || $_la === self::NOCACHE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function database_name(): Context\Database_nameContext
    {
        $localContext = new Context\Database_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 660, self::RULE_database_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6611);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_database(): Context\Alter_databaseContext
    {
        $localContext = new Context\Alter_databaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 662, self::RULE_alter_database);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6613);
            $this->match(self::ALTER);
            $this->setState(6614);
            $this->match(self::DATABASE);
            $this->setState(6616);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 790, $this->ctx)) {
                case 1:
                    $this->setState(6615);
                    $this->database_name();
                    break;
            }
            $this->setState(6627);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 791, $this->ctx)) {
                case 1:
                    $this->setState(6618);
                    $this->startup_clauses();
                    break;

                case 2:
                    $this->setState(6619);
                    $this->recovery_clauses();
                    break;

                case 3:
                    $this->setState(6620);
                    $this->database_file_clauses();
                    break;

                case 4:
                    $this->setState(6621);
                    $this->logfile_clauses();
                    break;

                case 5:
                    $this->setState(6622);
                    $this->controlfile_clauses();
                    break;

                case 6:
                    $this->setState(6623);
                    $this->standby_database_clauses();
                    break;

                case 7:
                    $this->setState(6624);
                    $this->default_settings_clause();
                    break;

                case 8:
                    $this->setState(6625);
                    $this->instance_clauses();
                    break;

                case 9:
                    $this->setState(6626);
                    $this->security_clause();
                    break;
            }
            $this->setState(6629);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function startup_clauses(): Context\Startup_clausesContext
    {
        $localContext = new Context\Startup_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 664, self::RULE_startup_clauses);

        try {
            $this->setState(6650);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 796, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6631);
                    $this->match(self::MOUNT);
                    $this->setState(6634);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CLONE || $_la === self::STANDBY) {
                        $this->setState(6632);

                        $_la = $this->input->LA(1);

                        if (!($_la === self::CLONE || $_la === self::STANDBY)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(6633);
                        $this->match(self::DATABASE);
                    }
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6636);
                    $this->match(self::OPEN);
                    $this->setState(6639);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::READ) {
                        $this->setState(6637);
                        $this->match(self::READ);
                        $this->setState(6638);
                        $this->match(self::WRITE);
                    }
                    $this->setState(6642);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NORESETLOGS || $_la === self::RESETLOGS) {
                        $this->setState(6641);
                        $this->resetlogs_or_noresetlogs();
                    }
                    $this->setState(6645);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DOWNGRADE || $_la === self::UPGRADE) {
                        $this->setState(6644);
                        $this->upgrade_or_downgrade();
                    }
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6647);
                    $this->match(self::OPEN);
                    $this->setState(6648);
                    $this->match(self::READ);
                    $this->setState(6649);
                    $this->match(self::ONLY);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function resetlogs_or_noresetlogs(): Context\Resetlogs_or_noresetlogsContext
    {
        $localContext = new Context\Resetlogs_or_noresetlogsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 666, self::RULE_resetlogs_or_noresetlogs);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6652);

            $_la = $this->input->LA(1);

            if (!($_la === self::NORESETLOGS || $_la === self::RESETLOGS)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function upgrade_or_downgrade(): Context\Upgrade_or_downgradeContext
    {
        $localContext = new Context\Upgrade_or_downgradeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 668, self::RULE_upgrade_or_downgrade);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6654);

            $_la = $this->input->LA(1);

            if (!($_la === self::DOWNGRADE || $_la === self::UPGRADE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function recovery_clauses(): Context\Recovery_clausesContext
    {
        $localContext = new Context\Recovery_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 670, self::RULE_recovery_clauses);

        try {
            $this->setState(6661);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 797, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6656);
                    $this->general_recovery();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6657);
                    $this->managed_standby_recovery();
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6658);
                    $this->begin_or_end();
                    $this->setState(6659);
                    $this->match(self::BACKUP);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function begin_or_end(): Context\Begin_or_endContext
    {
        $localContext = new Context\Begin_or_endContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 672, self::RULE_begin_or_end);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6663);

            $_la = $this->input->LA(1);

            if (!($_la === self::BEGIN || $_la === self::END)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function general_recovery(): Context\General_recoveryContext
    {
        $localContext = new Context\General_recoveryContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 674, self::RULE_general_recovery);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6665);
            $this->match(self::RECOVER);
            $this->setState(6667);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 798, $this->ctx)) {
                case 1:
                    $this->setState(6666);
                    $this->match(self::AUTOMATIC);
                    break;
            }
            $this->setState(6671);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 799, $this->ctx)) {
                case 1:
                    $this->setState(6669);
                    $this->match(self::FROM);
                    $this->setState(6670);
                    $this->match(self::CHAR_STRING);
                    break;
            }
            $this->setState(6695);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 805, $this->ctx)) {
                case 1:
                    $this->setState(6677);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 800, $this->ctx)) {
                        case 1:
                            $this->setState(6673);
                            $this->full_database_recovery();
                            break;

                        case 2:
                            $this->setState(6674);
                            $this->partial_database_recovery();
                            break;

                        case 3:
                            $this->setState(6675);
                            $this->match(self::LOGFILE);
                            $this->setState(6676);
                            $this->match(self::CHAR_STRING);
                            break;
                    }
                    $this->setState(6688);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ALLOW || $_la === self::NOPARALLEL || $_la === self::PARALLEL || $_la === self::TEST) {
                        $this->setState(6684);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        do {
                            $this->setState(6684);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::TEST:
                                    $this->setState(6679);
                                    $this->match(self::TEST);
                                    break;

                                case self::ALLOW:
                                    $this->setState(6680);
                                    $this->match(self::ALLOW);
                                    $this->setState(6681);
                                    $this->match(self::UNSIGNED_INTEGER);
                                    $this->setState(6682);
                                    $this->match(self::CORRUPTION);
                                    break;

                                case self::NOPARALLEL:
                                case self::PARALLEL:
                                    $this->setState(6683);
                                    $this->parallel_clause();
                                    break;

                                default:
                                    throw new NoViableAltException($this);
                            }
                            $this->setState(6686);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        } while ($_la === self::ALLOW || $_la === self::NOPARALLEL || $_la === self::PARALLEL || $_la === self::TEST);
                    }
                    break;

                case 2:
                    $this->setState(6690);
                    $this->match(self::CONTINUE);
                    $this->setState(6692);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(6691);
                        $this->match(self::DEFAULT);
                    }
                    break;

                case 3:
                    $this->setState(6694);
                    $this->match(self::CANCEL);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function full_database_recovery(): Context\Full_database_recoveryContext
    {
        $localContext = new Context\Full_database_recoveryContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 676, self::RULE_full_database_recovery);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6698);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::STANDBY) {
                $this->setState(6697);
                $this->match(self::STANDBY);
            }
            $this->setState(6700);
            $this->match(self::DATABASE);
            $this->setState(6717);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::UNTIL || $_la === self::USING) {
                $this->setState(6713);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(6713);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::UNTIL:
                            $this->setState(6701);
                            $this->match(self::UNTIL);
                            $this->setState(6708);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::CANCEL:
                                    $this->setState(6702);
                                    $this->match(self::CANCEL);
                                    break;

                                case self::TIME:
                                    $this->setState(6703);
                                    $this->match(self::TIME);
                                    $this->setState(6704);
                                    $this->match(self::CHAR_STRING);
                                    break;

                                case self::CHANGE:
                                    $this->setState(6705);
                                    $this->match(self::CHANGE);
                                    $this->setState(6706);
                                    $this->match(self::UNSIGNED_INTEGER);
                                    break;

                                case self::CONSISTENT:
                                    $this->setState(6707);
                                    $this->match(self::CONSISTENT);
                                    break;

                                default:
                                    throw new NoViableAltException($this);
                            }
                            break;

                        case self::USING:
                            $this->setState(6710);
                            $this->match(self::USING);
                            $this->setState(6711);
                            $this->match(self::BACKUP);
                            $this->setState(6712);
                            $this->match(self::CONTROLFILE);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(6715);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::UNTIL || $_la === self::USING);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partial_database_recovery(): Context\Partial_database_recoveryContext
    {
        $localContext = new Context\Partial_database_recoveryContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 678, self::RULE_partial_database_recovery);

        try {
            $this->setState(6740);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 814, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6719);
                    $this->match(self::TABLESPACE);
                    $this->setState(6720);
                    $this->tablespace();
                    $this->setState(6725);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6721);
                        $this->match(self::COMMA);
                        $this->setState(6722);
                        $this->tablespace();
                        $this->setState(6727);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6728);
                    $this->match(self::DATAFILE);
                    $this->setState(6729);
                    $this->match(self::CHAR_STRING);
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6730);
                    $this->filenumber();
                    $this->setState(6736);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::UNSIGNED_INTEGER || $_la === self::COMMA) {
                        $this->setState(6734);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::COMMA:
                                $this->setState(6731);
                                $this->match(self::COMMA);
                                $this->setState(6732);
                                $this->match(self::CHAR_STRING);
                                break;

                            case self::UNSIGNED_INTEGER:
                                $this->setState(6733);
                                $this->filenumber();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(6738);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6739);
                    $this->partial_database_recovery_10g();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partial_database_recovery_10g(): Context\Partial_database_recovery_10gContext
    {
        $localContext = new Context\Partial_database_recovery_10gContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 680, self::RULE_partial_database_recovery_10g);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6742);

            if (!(isVersion10())) {
                throw new FailedPredicateException($this, "isVersion10()");
            }
            $this->setState(6743);
            $this->match(self::STANDBY);
            $this->setState(6764);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::TABLESPACE:
                    $this->setState(6744);
                    $this->match(self::TABLESPACE);
                    $this->setState(6745);
                    $this->tablespace();
                    $this->setState(6750);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6746);
                        $this->match(self::COMMA);
                        $this->setState(6747);
                        $this->tablespace();
                        $this->setState(6752);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case self::DATAFILE:
                    $this->setState(6753);
                    $this->match(self::DATAFILE);
                    $this->setState(6754);
                    $this->match(self::CHAR_STRING);
                    break;

                case self::UNSIGNED_INTEGER:
                    $this->setState(6755);
                    $this->filenumber();
                    $this->setState(6761);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::UNSIGNED_INTEGER || $_la === self::COMMA) {
                        $this->setState(6759);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::COMMA:
                                $this->setState(6756);
                                $this->match(self::COMMA);
                                $this->setState(6757);
                                $this->match(self::CHAR_STRING);
                                break;

                            case self::UNSIGNED_INTEGER:
                                $this->setState(6758);
                                $this->filenumber();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(6763);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(6766);
            $this->match(self::UNTIL);
            $this->setState(6769);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CONSISTENT) {
                $this->setState(6767);
                $this->match(self::CONSISTENT);
                $this->setState(6768);
                $this->match(self::WITH);
            }
            $this->setState(6771);
            $this->match(self::CONTROLFILE);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function managed_standby_recovery(): Context\Managed_standby_recoveryContext
    {
        $localContext = new Context\Managed_standby_recoveryContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 682, self::RULE_managed_standby_recovery);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6773);
            $this->match(self::RECOVER);
            $this->setState(6808);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::MANAGED:
                    $this->setState(6774);
                    $this->match(self::MANAGED);
                    $this->setState(6775);
                    $this->match(self::STANDBY);
                    $this->setState(6776);
                    $this->match(self::DATABASE);
                    $this->setState(6798);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::DISCONNECT:
                        case self::NODELAY:
                        case self::NOPARALLEL:
                        case self::PARALLEL:
                        case self::UNTIL:
                        case self::USING:
                            $this->setState(6792);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            do {
                                $this->setState(6792);
                                $this->errorHandler->sync($this);

                                switch ($this->getInterpreter()->adaptivePredict($this->input, 821, $this->ctx)) {
                                    case 1:
                                        $this->setState(6777);
                                        $this->match(self::USING);
                                        $this->setState(6778);
                                        $this->match(self::CURRENT);
                                        $this->setState(6779);
                                        $this->match(self::LOGFILE);
                                        break;

                                    case 2:
                                        $this->setState(6780);
                                        $this->match(self::DISCONNECT);
                                        $this->setState(6783);
                                        $this->errorHandler->sync($this);
                                        $_la = $this->input->LA(1);

                                        if ($_la === self::FROM) {
                                            $this->setState(6781);
                                            $this->match(self::FROM);
                                            $this->setState(6782);
                                            $this->match(self::SESSION);
                                        }
                                        break;

                                    case 3:
                                        $this->setState(6785);
                                        $this->match(self::NODELAY);
                                        break;

                                    case 4:
                                        $this->setState(6786);
                                        $this->match(self::UNTIL);
                                        $this->setState(6787);
                                        $this->match(self::CHANGE);
                                        $this->setState(6788);
                                        $this->match(self::UNSIGNED_INTEGER);
                                        break;

                                    case 5:
                                        $this->setState(6789);
                                        $this->match(self::UNTIL);
                                        $this->setState(6790);
                                        $this->match(self::CONSISTENT);
                                        break;

                                    case 6:
                                        $this->setState(6791);
                                        $this->parallel_clause();
                                        break;
                                }
                                $this->setState(6794);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            } while ($_la === self::DISCONNECT || $_la === self::NODELAY || $_la === self::NOPARALLEL || $_la === self::PARALLEL || $_la === self::UNTIL || $_la === self::USING);
                            break;

                        case self::FINISH:
                            $this->setState(6796);
                            $this->match(self::FINISH);
                            break;

                        case self::CANCEL:
                            $this->setState(6797);
                            $this->match(self::CANCEL);
                            break;

                        case self::SEMICOLON:
                            break;

                        default:
                            break;
                    }
                    break;

                case self::TO:
                    $this->setState(6800);
                    $this->match(self::TO);
                    $this->setState(6801);
                    $this->match(self::LOGICAL);
                    $this->setState(6802);
                    $this->match(self::STANDBY);
                    $this->setState(6806);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 824, $this->ctx)) {
                        case 1:
                            $this->setState(6803);
                            $this->db_name();
                            break;

                        case 2:
                            $this->setState(6804);
                            $this->match(self::KEEP);
                            $this->setState(6805);
                            $this->match(self::IDENTITY);
                            break;
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function db_name(): Context\Db_nameContext
    {
        $localContext = new Context\Db_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 684, self::RULE_db_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6810);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function database_file_clauses(): Context\Database_file_clausesContext
    {
        $localContext = new Context\Database_file_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 686, self::RULE_database_file_clauses);

        try {
            $this->setState(6828);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::RENAME:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6812);
                    $this->match(self::RENAME);
                    $this->setState(6813);
                    $this->match(self::FILE);
                    $this->setState(6814);
                    $this->filename();
                    $this->setState(6819);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6815);
                        $this->match(self::COMMA);
                        $this->setState(6816);
                        $this->filename();
                        $this->setState(6821);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(6822);
                    $this->match(self::TO);
                    $this->setState(6823);
                    $this->filename();
                    break;

                case self::CREATE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6825);
                    $this->create_datafile_clause();
                    break;

                case self::DATAFILE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6826);
                    $this->alter_datafile_clause();
                    break;

                case self::TEMPFILE:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6827);
                    $this->alter_tempfile_clause();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function create_datafile_clause(): Context\Create_datafile_clauseContext
    {
        $localContext = new Context\Create_datafile_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 688, self::RULE_create_datafile_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6830);
            $this->match(self::CREATE);
            $this->setState(6831);
            $this->match(self::DATAFILE);
            $this->setState(6834);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CHAR_STRING:
                    $this->setState(6832);
                    $this->filename();
                    break;

                case self::UNSIGNED_INTEGER:
                    $this->setState(6833);
                    $this->filenumber();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(6843);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6836);
                $this->match(self::COMMA);
                $this->setState(6839);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::CHAR_STRING:
                        $this->setState(6837);
                        $this->filename();
                        break;

                    case self::UNSIGNED_INTEGER:
                        $this->setState(6838);
                        $this->filenumber();
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(6845);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(6848);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AS) {
                $this->setState(6846);
                $this->match(self::AS);

                $this->setState(6847);
                $this->match(self::NEW);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_datafile_clause(): Context\Alter_datafile_clauseContext
    {
        $localContext = new Context\Alter_datafile_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 690, self::RULE_alter_datafile_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6850);
            $this->match(self::DATAFILE);
            $this->setState(6853);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CHAR_STRING:
                    $this->setState(6851);
                    $this->filename();
                    break;

                case self::UNSIGNED_INTEGER:
                    $this->setState(6852);
                    $this->filenumber();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(6862);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6855);
                $this->match(self::COMMA);
                $this->setState(6858);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::CHAR_STRING:
                        $this->setState(6856);
                        $this->filename();
                        break;

                    case self::UNSIGNED_INTEGER:
                        $this->setState(6857);
                        $this->filenumber();
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(6864);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(6876);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ONLINE:
                    $this->setState(6865);
                    $this->match(self::ONLINE);
                    break;

                case self::OFFLINE:
                    $this->setState(6866);
                    $this->match(self::OFFLINE);
                    $this->setState(6869);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR) {
                        $this->setState(6867);
                        $this->match(self::FOR);
                        $this->setState(6868);
                        $this->match(self::DROP);
                    }
                    break;

                case self::RESIZE:
                    $this->setState(6871);
                    $this->match(self::RESIZE);
                    $this->setState(6872);
                    $this->size_clause();
                    break;

                case self::AUTOEXTEND:
                    $this->setState(6873);
                    $this->autoextend_clause();
                    break;

                case self::END:
                    $this->setState(6874);
                    $this->match(self::END);
                    $this->setState(6875);
                    $this->match(self::BACKUP);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_tempfile_clause(): Context\Alter_tempfile_clauseContext
    {
        $localContext = new Context\Alter_tempfile_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 692, self::RULE_alter_tempfile_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6878);
            $this->match(self::TEMPFILE);
            $this->setState(6881);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CHAR_STRING:
                    $this->setState(6879);
                    $this->filename();
                    break;

                case self::UNSIGNED_INTEGER:
                    $this->setState(6880);
                    $this->filenumber();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(6890);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6883);
                $this->match(self::COMMA);
                $this->setState(6886);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::CHAR_STRING:
                        $this->setState(6884);
                        $this->filename();
                        break;

                    case self::UNSIGNED_INTEGER:
                        $this->setState(6885);
                        $this->filenumber();
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(6892);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(6901);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::RESIZE:
                    $this->setState(6893);
                    $this->match(self::RESIZE);
                    $this->setState(6894);
                    $this->size_clause();
                    break;

                case self::AUTOEXTEND:
                    $this->setState(6895);
                    $this->autoextend_clause();
                    break;

                case self::DROP:
                    $this->setState(6896);
                    $this->match(self::DROP);

                    $this->setState(6897);
                    $this->match(self::INCLUDING);
                    $this->setState(6898);
                    $this->match(self::DATAFILES);
                    break;

                case self::ONLINE:
                    $this->setState(6899);
                    $this->match(self::ONLINE);
                    break;

                case self::OFFLINE:
                    $this->setState(6900);
                    $this->match(self::OFFLINE);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function logfile_clauses(): Context\Logfile_clausesContext
    {
        $localContext = new Context\Logfile_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 694, self::RULE_logfile_clauses);

        try {
            $this->setState(6949);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 848, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6908);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ARCHIVELOG:
                            $this->setState(6903);
                            $this->match(self::ARCHIVELOG);
                            $this->setState(6905);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::MANUAL) {
                                $this->setState(6904);
                                $this->match(self::MANUAL);
                            }
                            break;

                        case self::NOARCHIVELOG:
                            $this->setState(6907);
                            $this->match(self::NOARCHIVELOG);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6911);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NO) {
                        $this->setState(6910);
                        $this->match(self::NO);
                    }
                    $this->setState(6913);
                    $this->match(self::FORCE);
                    $this->setState(6914);
                    $this->match(self::LOGGING);
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6915);
                    $this->match(self::RENAME);
                    $this->setState(6916);
                    $this->match(self::FILE);
                    $this->setState(6917);
                    $this->filename();
                    $this->setState(6922);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6918);
                        $this->match(self::COMMA);
                        $this->setState(6919);
                        $this->filename();
                        $this->setState(6924);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(6925);
                    $this->match(self::TO);
                    $this->setState(6926);
                    $this->filename();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6928);
                    $this->match(self::CLEAR);
                    $this->setState(6930);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::UNARCHIVED) {
                        $this->setState(6929);
                        $this->match(self::UNARCHIVED);
                    }
                    $this->setState(6932);
                    $this->match(self::LOGFILE);
                    $this->setState(6933);
                    $this->logfile_descriptor();
                    $this->setState(6938);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6934);
                        $this->match(self::COMMA);
                        $this->setState(6935);
                        $this->logfile_descriptor();
                        $this->setState(6940);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(6943);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::UNRECOVERABLE) {
                        $this->setState(6941);
                        $this->match(self::UNRECOVERABLE);
                        $this->setState(6942);
                        $this->match(self::DATAFILE);
                    }
                    break;

                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6945);
                    $this->add_logfile_clauses();
                    break;

                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(6946);
                    $this->drop_logfile_clauses();
                    break;

                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(6947);
                    $this->switch_logfile_clause();
                    break;

                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(6948);
                    $this->supplemental_db_logging();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_logfile_clauses(): Context\Add_logfile_clausesContext
    {
        $localContext = new Context\Add_logfile_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 696, self::RULE_add_logfile_clauses);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6951);
            $this->match(self::ADD);
            $this->setState(6953);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::STANDBY) {
                $this->setState(6952);
                $this->match(self::STANDBY);
            }
            $this->setState(6955);
            $this->match(self::LOGFILE);
            $this->setState(6987);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::GROUP:
                case self::THREAD:
                case self::COMMA:
                    $this->setState(6959);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(6956);
                        $this->log_file_group();
                        $this->setState(6957);
                        $this->redo_log_file_spec();
                        $this->setState(6961);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::GROUP || $_la === self::THREAD || $_la === self::COMMA);
                    break;

                case self::MEMBER:
                    $this->setState(6963);
                    $this->match(self::MEMBER);
                    $this->setState(6964);
                    $this->filename();
                    $this->setState(6966);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::REUSE) {
                        $this->setState(6965);
                        $this->match(self::REUSE);
                    }
                    $this->setState(6975);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6968);
                        $this->match(self::COMMA);
                        $this->setState(6969);
                        $this->filename();
                        $this->setState(6971);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::REUSE) {
                            $this->setState(6970);
                            $this->match(self::REUSE);
                        }
                        $this->setState(6977);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(6978);
                    $this->match(self::TO);
                    $this->setState(6979);
                    $this->logfile_descriptor();
                    $this->setState(6984);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6980);
                        $this->match(self::COMMA);
                        $this->setState(6981);
                        $this->logfile_descriptor();
                        $this->setState(6986);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function log_file_group(): Context\Log_file_groupContext
    {
        $localContext = new Context\Log_file_groupContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 698, self::RULE_log_file_group);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6990);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMA) {
                $this->setState(6989);
                $this->match(self::COMMA);
            }
            $this->setState(6994);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::THREAD) {
                $this->setState(6992);
                $this->match(self::THREAD);
                $this->setState(6993);
                $this->match(self::UNSIGNED_INTEGER);
            }
            $this->setState(6996);
            $this->match(self::GROUP);
            $this->setState(6997);
            $this->match(self::UNSIGNED_INTEGER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_logfile_clauses(): Context\Drop_logfile_clausesContext
    {
        $localContext = new Context\Drop_logfile_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 700, self::RULE_drop_logfile_clauses);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6999);
            $this->match(self::DROP);
            $this->setState(7001);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::STANDBY) {
                $this->setState(7000);
                $this->match(self::STANDBY);
            }
            $this->setState(7003);
            $this->match(self::LOGFILE);
            $this->setState(7021);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::GROUP:
                case self::CHAR_STRING:
                case self::LEFT_PAREN:
                    $this->setState(7004);
                    $this->logfile_descriptor();
                    $this->setState(7009);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7005);
                        $this->match(self::COMMA);
                        $this->setState(7006);
                        $this->logfile_descriptor();
                        $this->setState(7011);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case self::MEMBER:
                    $this->setState(7012);
                    $this->match(self::MEMBER);
                    $this->setState(7013);
                    $this->filename();
                    $this->setState(7018);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7014);
                        $this->match(self::COMMA);
                        $this->setState(7015);
                        $this->filename();
                        $this->setState(7020);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function switch_logfile_clause(): Context\Switch_logfile_clauseContext
    {
        $localContext = new Context\Switch_logfile_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 702, self::RULE_switch_logfile_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7023);
            $this->match(self::SWITCH);
            $this->setState(7024);
            $this->match(self::ALL);
            $this->setState(7025);
            $this->match(self::LOGFILES);
            $this->setState(7026);
            $this->match(self::TO);
            $this->setState(7027);
            $this->match(self::BLOCKSIZE);
            $this->setState(7028);
            $this->match(self::UNSIGNED_INTEGER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function supplemental_db_logging(): Context\Supplemental_db_loggingContext
    {
        $localContext = new Context\Supplemental_db_loggingContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 704, self::RULE_supplemental_db_logging);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7030);
            $this->add_or_drop();
            $this->setState(7031);
            $this->match(self::SUPPLEMENTAL);
            $this->setState(7032);
            $this->match(self::LOG);
            $this->setState(7036);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 862, $this->ctx)) {
                case 1:
                    $this->setState(7033);
                    $this->match(self::DATA);
                    break;

                case 2:
                    $this->setState(7034);
                    $this->supplemental_id_key_clause();
                    break;

                case 3:
                    $this->setState(7035);
                    $this->supplemental_plsql_clause();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_or_drop(): Context\Add_or_dropContext
    {
        $localContext = new Context\Add_or_dropContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 706, self::RULE_add_or_drop);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7038);

            $_la = $this->input->LA(1);

            if (!($_la === self::ADD || $_la === self::DROP)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function supplemental_plsql_clause(): Context\Supplemental_plsql_clauseContext
    {
        $localContext = new Context\Supplemental_plsql_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 708, self::RULE_supplemental_plsql_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7040);
            $this->match(self::DATA);
            $this->setState(7041);
            $this->match(self::FOR);
            $this->setState(7042);
            $this->match(self::PROCEDURAL);
            $this->setState(7043);
            $this->match(self::REPLICATION);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function logfile_descriptor(): Context\Logfile_descriptorContext
    {
        $localContext = new Context\Logfile_descriptorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 710, self::RULE_logfile_descriptor);

        try {
            $this->setState(7059);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::GROUP:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7045);
                    $this->match(self::GROUP);
                    $this->setState(7046);
                    $this->match(self::UNSIGNED_INTEGER);
                    break;

                case self::LEFT_PAREN:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7047);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7048);
                    $this->filename();
                    $this->setState(7053);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7049);
                        $this->match(self::COMMA);
                        $this->setState(7050);
                        $this->filename();
                        $this->setState(7055);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(7056);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case self::CHAR_STRING:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7058);
                    $this->filename();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function controlfile_clauses(): Context\Controlfile_clausesContext
    {
        $localContext = new Context\Controlfile_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 712, self::RULE_controlfile_clauses);

        try {
            $this->setState(7082);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CREATE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7061);
                    $this->match(self::CREATE);
                    $this->setState(7063);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LOGICAL || $_la === self::PHYSICAL) {
                        $this->setState(7062);

                        $_la = $this->input->LA(1);

                        if (!($_la === self::LOGICAL || $_la === self::PHYSICAL)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(7065);
                    $this->match(self::STANDBY);
                    $this->setState(7066);
                    $this->match(self::CONTROLFILE);
                    $this->setState(7067);
                    $this->match(self::AS);
                    $this->setState(7068);
                    $this->filename();
                    $this->setState(7070);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::REUSE) {
                        $this->setState(7069);
                        $this->match(self::REUSE);
                    }
                    break;

                case self::BACKUP:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7072);
                    $this->match(self::BACKUP);
                    $this->setState(7073);
                    $this->match(self::CONTROLFILE);
                    $this->setState(7074);
                    $this->match(self::TO);
                    $this->setState(7080);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CHAR_STRING:
                            $this->setState(7075);
                            $this->filename();
                            $this->setState(7077);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::REUSE) {
                                $this->setState(7076);
                                $this->match(self::REUSE);
                            }
                            break;

                        case self::TRACE:
                            $this->setState(7079);
                            $this->trace_file_clause();
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function trace_file_clause(): Context\Trace_file_clauseContext
    {
        $localContext = new Context\Trace_file_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 714, self::RULE_trace_file_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7084);
            $this->match(self::TRACE);
            $this->setState(7090);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AS) {
                $this->setState(7085);
                $this->match(self::AS);
                $this->setState(7086);
                $this->filename();
                $this->setState(7088);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::REUSE) {
                    $this->setState(7087);
                    $this->match(self::REUSE);
                }
            }
            $this->setState(7093);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NORESETLOGS || $_la === self::RESETLOGS) {
                $this->setState(7092);

                $_la = $this->input->LA(1);

                if (!($_la === self::NORESETLOGS || $_la === self::RESETLOGS)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function standby_database_clauses(): Context\Standby_database_clausesContext
    {
        $localContext = new Context\Standby_database_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 716, self::RULE_standby_database_clauses);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7102);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ACTIVATE:
                    $this->setState(7095);
                    $this->activate_standby_db_clause();
                    break;

                case self::SET:
                    $this->setState(7096);
                    $this->maximize_standby_db_clause();
                    break;

                case self::REGISTER:
                    $this->setState(7097);
                    $this->register_logfile_clause();
                    break;

                case self::COMMIT:
                case self::PREPARE:
                    $this->setState(7098);
                    $this->commit_switchover_clause();
                    break;

                case self::START:
                    $this->setState(7099);
                    $this->start_standby_clause();
                    break;

                case self::ABORT:
                case self::STOP:
                    $this->setState(7100);
                    $this->stop_standby_clause();
                    break;

                case self::CONVERT:
                    $this->setState(7101);
                    $this->convert_database_clause();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(7105);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOPARALLEL || $_la === self::PARALLEL) {
                $this->setState(7104);
                $this->parallel_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function activate_standby_db_clause(): Context\Activate_standby_db_clauseContext
    {
        $localContext = new Context\Activate_standby_db_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 718, self::RULE_activate_standby_db_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7107);
            $this->match(self::ACTIVATE);
            $this->setState(7109);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOGICAL || $_la === self::PHYSICAL) {
                $this->setState(7108);

                $_la = $this->input->LA(1);

                if (!($_la === self::LOGICAL || $_la === self::PHYSICAL)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(7111);
            $this->match(self::STANDBY);
            $this->setState(7112);
            $this->match(self::DATABASE);
            $this->setState(7115);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FINISH) {
                $this->setState(7113);
                $this->match(self::FINISH);
                $this->setState(7114);
                $this->match(self::APPLY);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function maximize_standby_db_clause(): Context\Maximize_standby_db_clauseContext
    {
        $localContext = new Context\Maximize_standby_db_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 720, self::RULE_maximize_standby_db_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7117);
            $this->match(self::SET);
            $this->setState(7118);
            $this->match(self::STANDBY);
            $this->setState(7119);
            $this->match(self::DATABASE);
            $this->setState(7120);
            $this->match(self::TO);
            $this->setState(7121);
            $this->match(self::MAXIMIZE);
            $this->setState(7122);

            $_la = $this->input->LA(1);

            if (!($_la === self::AVAILABILITY || $_la === self::PERFORMANCE || $_la === self::PROTECTION)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function register_logfile_clause(): Context\Register_logfile_clauseContext
    {
        $localContext = new Context\Register_logfile_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 722, self::RULE_register_logfile_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7124);
            $this->match(self::REGISTER);
            $this->setState(7127);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self:: OR) {
                $this->setState(7125);
                $this->match(self:: OR);
                $this->setState(7126);
                $this->match(self::REPLACE);
            }
            $this->setState(7129);

            $_la = $this->input->LA(1);

            if (!($_la === self::LOGICAL || $_la === self::PHYSICAL)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(7130);
            $this->match(self::LOGFILE);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function commit_switchover_clause(): Context\Commit_switchover_clauseContext
    {
        $localContext = new Context\Commit_switchover_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 724, self::RULE_commit_switchover_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7132);

            $_la = $this->input->LA(1);

            if (!($_la === self::COMMIT || $_la === self::PREPARE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(7133);
            $this->match(self::TO);
            $this->setState(7134);
            $this->match(self::SWITCHOVER);
            $this->setState(7163);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LOGICAL:
                case self::TO:
                    $this->setState(7160);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::TO:
                            $this->setState(7135);
                            $this->match(self::TO);
                            $this->setState(7156);
                            $this->errorHandler->sync($this);

                            switch ($this->getInterpreter()->adaptivePredict($this->input, 883, $this->ctx)) {
                                case 1:
                                    $this->setState(7144);
                                    $this->errorHandler->sync($this);

                                    switch ($this->getInterpreter()->adaptivePredict($this->input, 880, $this->ctx)) {
                                        case 1:
                                            $this->setState(7137);
                                            $this->errorHandler->sync($this);
                                            $_la = $this->input->LA(1);

                                            if ($_la === self::LOGICAL || $_la === self::PHYSICAL) {
                                                $this->setState(7136);

                                                $_la = $this->input->LA(1);

                                                if (!($_la === self::LOGICAL || $_la === self::PHYSICAL)) {
                                                    $this->errorHandler->recoverInline($this);
                                                } else {
                                                    if ($this->input->LA(1) === Token::EOF) {
                                                        $this->matchedEOF = true;
                                                    }

                                                    $this->errorHandler->reportMatch($this);
                                                    $this->consume();
                                                }
                                            }
                                            $this->setState(7139);
                                            $this->match(self::PRIMARY);
                                            break;

                                        case 2:
                                            $this->setState(7141);
                                            $this->errorHandler->sync($this);
                                            $_la = $this->input->LA(1);

                                            if ($_la === self::PHYSICAL) {
                                                $this->setState(7140);
                                                $this->match(self::PHYSICAL);
                                            }
                                            $this->setState(7143);
                                            $this->match(self::STANDBY);
                                            break;
                                    }
                                    $this->setState(7152);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);

                                    if ($_la === self::SESSION || $_la === self::WITHOUT || $_la === self::WITH) {
                                        $this->setState(7147);
                                        $this->errorHandler->sync($this);
                                        $_la = $this->input->LA(1);

                                        if ($_la === self::WITHOUT || $_la === self::WITH) {
                                            $this->setState(7146);

                                            $_la = $this->input->LA(1);

                                            if (!($_la === self::WITHOUT || $_la === self::WITH)) {
                                                $this->errorHandler->recoverInline($this);
                                            } else {
                                                if ($this->input->LA(1) === Token::EOF) {
                                                    $this->matchedEOF = true;
                                                }

                                                $this->errorHandler->reportMatch($this);
                                                $this->consume();
                                            }
                                        }
                                        $this->setState(7149);
                                        $this->match(self::SESSION);
                                        $this->setState(7150);
                                        $this->match(self::SHUTDOWN);
                                        $this->setState(7151);

                                        $_la = $this->input->LA(1);

                                        if (!($_la === self::NOWAIT || $_la === self::WAIT)) {
                                            $this->errorHandler->recoverInline($this);
                                        } else {
                                            if ($this->input->LA(1) === Token::EOF) {
                                                $this->matchedEOF = true;
                                            }

                                            $this->errorHandler->reportMatch($this);
                                            $this->consume();
                                        }
                                    }
                                    break;

                                case 2:
                                    $this->setState(7154);
                                    $this->match(self::LOGICAL);
                                    $this->setState(7155);
                                    $this->match(self::STANDBY);
                                    break;
                            }
                            break;

                        case self::LOGICAL:
                            $this->setState(7158);
                            $this->match(self::LOGICAL);
                            $this->setState(7159);
                            $this->match(self::STANDBY);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    break;

                case self::CANCEL:
                    $this->setState(7162);
                    $this->match(self::CANCEL);
                    break;

                case self::NOPARALLEL:
                case self::PARALLEL:
                case self::SEMICOLON:
                    break;

                default:
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function start_standby_clause(): Context\Start_standby_clauseContext
    {
        $localContext = new Context\Start_standby_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 726, self::RULE_start_standby_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7165);
            $this->match(self::START);
            $this->setState(7166);
            $this->match(self::LOGICAL);
            $this->setState(7167);
            $this->match(self::STANDBY);
            $this->setState(7168);
            $this->match(self::APPLY);
            $this->setState(7170);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IMMEDIATE) {
                $this->setState(7169);
                $this->match(self::IMMEDIATE);
            }
            $this->setState(7173);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NODELAY) {
                $this->setState(7172);
                $this->match(self::NODELAY);
            }
            $this->setState(7186);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::NEW:
                    $this->setState(7175);
                    $this->match(self::NEW);
                    $this->setState(7176);
                    $this->match(self::PRIMARY);
                    $this->setState(7177);
                    $this->regular_id();
                    break;

                case self::INITIAL:
                    $this->setState(7178);
                    $this->match(self::INITIAL);
                    $this->setState(7180);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::UNSIGNED_INTEGER) {
                        $this->setState(7179);
                        $localContext->scn_value = $this->match(self::UNSIGNED_INTEGER);
                    }
                    break;

                case self::SKIP_:
                    $this->setState(7182);
                    $this->match(self::SKIP_);
                    $this->setState(7183);
                    $this->match(self::FAILED);
                    $this->setState(7184);
                    $this->match(self::TRANSACTION);
                    break;

                case self::FINISH:
                    $this->setState(7185);
                    $this->match(self::FINISH);
                    break;

                case self::NOPARALLEL:
                case self::PARALLEL:
                case self::SEMICOLON:
                    break;

                default:
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function stop_standby_clause(): Context\Stop_standby_clauseContext
    {
        $localContext = new Context\Stop_standby_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 728, self::RULE_stop_standby_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7188);

            $_la = $this->input->LA(1);

            if (!($_la === self::ABORT || $_la === self::STOP)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(7189);
            $this->match(self::LOGICAL);
            $this->setState(7190);
            $this->match(self::STANDBY);
            $this->setState(7191);
            $this->match(self::APPLY);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function convert_database_clause(): Context\Convert_database_clauseContext
    {
        $localContext = new Context\Convert_database_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 730, self::RULE_convert_database_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7193);
            $this->match(self::CONVERT);
            $this->setState(7194);
            $this->match(self::TO);
            $this->setState(7195);

            $_la = $this->input->LA(1);

            if (!($_la === self::PHYSICAL || $_la === self::SNAPSHOT)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(7196);
            $this->match(self::STANDBY);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function default_settings_clause(): Context\Default_settings_clauseContext
    {
        $localContext = new Context\Default_settings_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 732, self::RULE_default_settings_clause);

        try {
            $this->setState(7244);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 894, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7198);
                    $this->match(self::DEFAULT);
                    $this->setState(7199);
                    $this->match(self::EDITION);
                    $this->setState(7200);
                    $this->match(self::EQUALS_OP);
                    $this->setState(7201);
                    $this->edition_name();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7202);
                    $this->match(self::SET);
                    $this->setState(7203);
                    $this->match(self::DEFAULT);
                    $this->setState(7204);

                    $_la = $this->input->LA(1);

                    if (!($_la === self::BIGFILE || $_la === self::SMALLFILE)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(7205);
                    $this->match(self::TABLESPACE);
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7206);
                    $this->match(self::DEFAULT);
                    $this->setState(7207);
                    $this->match(self::TABLESPACE);
                    $this->setState(7208);
                    $this->tablespace();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(7209);
                    $this->match(self::DEFAULT);
                    $this->setState(7210);
                    $this->match(self::TEMPORARY);
                    $this->setState(7211);
                    $this->match(self::TABLESPACE);
                    $this->setState(7214);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 890, $this->ctx)) {
                        case 1:
                            $this->setState(7212);
                            $this->tablespace();
                            break;

                        case 2:
                            $this->setState(7213);
                            $this->tablespace_group_name();
                            break;
                    }
                    break;

                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(7216);
                    $this->match(self::RENAME);
                    $this->setState(7217);
                    $this->match(self::GLOBAL_NAME);
                    $this->setState(7218);
                    $this->match(self::TO);
                    $this->setState(7219);
                    $this->database();
                    $this->setState(7222);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(7220);
                        $this->match(self::PERIOD);
                        $this->setState(7221);
                        $this->domain();
                        $this->setState(7224);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::PERIOD);
                    break;

                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(7226);
                    $this->match(self::ENABLE);
                    $this->setState(7227);
                    $this->match(self::BLOCK);
                    $this->setState(7228);
                    $this->match(self::CHANGE);
                    $this->setState(7229);
                    $this->match(self::TRACKING);
                    $this->setState(7236);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(7230);
                        $this->match(self::USING);
                        $this->setState(7231);
                        $this->match(self::FILE);
                        $this->setState(7232);
                        $this->filename();
                        $this->setState(7234);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::REUSE) {
                            $this->setState(7233);
                            $this->match(self::REUSE);
                        }
                    }
                    break;

                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(7238);
                    $this->match(self::DISABLE);
                    $this->setState(7239);
                    $this->match(self::BLOCK);
                    $this->setState(7240);
                    $this->match(self::CHANGE);
                    $this->setState(7241);
                    $this->match(self::TRACKING);
                    break;

                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(7242);
                    $this->flashback_mode_clause();
                    break;

                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(7243);
                    $this->set_time_zone_clause();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function set_time_zone_clause(): Context\Set_time_zone_clauseContext
    {
        $localContext = new Context\Set_time_zone_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 734, self::RULE_set_time_zone_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7246);
            $this->match(self::SET);
            $this->setState(7247);
            $this->match(self::TIMEZONE);
            $this->setState(7248);
            $this->match(self::EQUALS_OP);
            $this->setState(7249);
            $this->match(self::CHAR_STRING);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function instance_clauses(): Context\Instance_clausesContext
    {
        $localContext = new Context\Instance_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 736, self::RULE_instance_clauses);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7251);
            $this->enable_or_disable();
            $this->setState(7252);
            $this->match(self::INSTANCE);
            $this->setState(7253);
            $this->match(self::CHAR_STRING);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function security_clause(): Context\Security_clauseContext
    {
        $localContext = new Context\Security_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 738, self::RULE_security_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7255);
            $this->match(self::GUARD);
            $this->setState(7256);

            $_la = $this->input->LA(1);

            if (!($_la === self::ALL || $_la === self::NONE || $_la === self::STANDBY)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function domain(): Context\DomainContext
    {
        $localContext = new Context\DomainContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 740, self::RULE_domain);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7258);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function database(): Context\DatabaseContext
    {
        $localContext = new Context\DatabaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 742, self::RULE_database);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7260);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function edition_name(): Context\Edition_nameContext
    {
        $localContext = new Context\Edition_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 744, self::RULE_edition_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7262);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function filenumber(): Context\FilenumberContext
    {
        $localContext = new Context\FilenumberContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 746, self::RULE_filenumber);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7264);
            $this->match(self::UNSIGNED_INTEGER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function filename(): Context\FilenameContext
    {
        $localContext = new Context\FilenameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 748, self::RULE_filename);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7266);
            $this->match(self::CHAR_STRING);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_table(): Context\Alter_tableContext
    {
        $localContext = new Context\Alter_tableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 750, self::RULE_alter_table);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7268);
            $this->match(self::ALTER);
            $this->setState(7269);
            $this->match(self::TABLE);
            $this->setState(7270);
            $this->tableview_name();
            $this->setState(7276);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 895, $this->ctx)) {
                case 1:
                    break;

                case 2:
                    $this->setState(7272);
                    $this->alter_table_properties();
                    break;

                case 3:
                    $this->setState(7273);
                    $this->constraint_clauses();
                    break;

                case 4:
                    $this->setState(7274);
                    $this->column_clauses();
                    break;

                case 5:
                    $this->setState(7275);
                    $this->move_table_clause();
                    break;
            }
            $this->setState(7290);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DISABLE || $_la === self::ENABLE) {
                $this->setState(7286);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(7286);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 897, $this->ctx)) {
                        case 1:
                            $this->setState(7278);
                            $this->enable_disable_clause();
                            break;

                        case 2:
                            $this->setState(7279);
                            $this->enable_or_disable();
                            $this->setState(7284);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::TABLE:
                                    $this->setState(7280);
                                    $this->match(self::TABLE);
                                    $this->setState(7281);
                                    $this->match(self::LOCK);
                                    break;

                                case self::ALL:
                                    $this->setState(7282);
                                    $this->match(self::ALL);
                                    $this->setState(7283);
                                    $this->match(self::TRIGGERS);
                                    break;

                                default:
                                    throw new NoViableAltException($this);
                            }
                            break;
                    }
                    $this->setState(7288);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::DISABLE || $_la === self::ENABLE);
            }
            $this->setState(7292);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_table_properties(): Context\Alter_table_propertiesContext
    {
        $localContext = new Context\Alter_table_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 752, self::RULE_alter_table_properties);

        try {
            $this->setState(7305);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 900, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7294);
                    $this->alter_table_properties_1();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7295);
                    $this->match(self::RENAME);
                    $this->setState(7296);
                    $this->match(self::TO);
                    $this->setState(7297);
                    $this->tableview_name();
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7298);
                    $this->shrink_clause();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(7299);
                    $this->match(self::READ);
                    $this->setState(7300);
                    $this->match(self::ONLY);
                    break;

                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(7301);
                    $this->match(self::READ);
                    $this->setState(7302);
                    $this->match(self::WRITE);
                    break;

                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(7303);
                    $this->match(self::REKEY);
                    $this->setState(7304);
                    $this->match(self::CHAR_STRING);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_table_properties_1(): Context\Alter_table_properties_1Context
    {
        $localContext = new Context\Alter_table_properties_1Context($this->ctx, $this->getState());

        $this->enterRule($localContext, 754, self::RULE_alter_table_properties_1);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7324);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(7324);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::INITRANS:
                            case self::PCTFREE:
                            case self::PCTUSED:
                            case self::STORAGE:
                                $this->setState(7307);
                                $this->physical_attributes_clause();
                                break;

                            case self::FILESYSTEM_LIKE_LOGGING:
                            case self::LOGGING:
                            case self::NOLOGGING:
                                $this->setState(7308);
                                $this->logging_clause();
                                break;

                            case self::COMPRESS:
                            case self::NOCOMPRESS:
                                $this->setState(7309);
                                $this->table_compression();
                                break;

                            case self::ADD:
                            case self::DROP:
                                $this->setState(7310);
                                $this->supplemental_table_logging();
                                break;

                            case self::ALLOCATE:
                                $this->setState(7311);
                                $this->allocate_extent_clause();
                                break;

                            case self::DEALLOCATE:
                                $this->setState(7312);
                                $this->deallocate_unused_clause();
                                break;

                            case self::CACHE:
                            case self::NOCACHE:
                                $this->setState(7313);

                                $_la = $this->input->LA(1);

                                if (!($_la === self::CACHE || $_la === self::NOCACHE)) {
                                    $this->errorHandler->recoverInline($this);
                                } else {
                                    if ($this->input->LA(1) === Token::EOF) {
                                        $this->matchedEOF = true;
                                    }

                                    $this->errorHandler->reportMatch($this);
                                    $this->consume();
                                }
                                break;

                            case self::RESULT_CACHE:
                                $this->setState(7314);
                                $this->match(self::RESULT_CACHE);
                                $this->setState(7315);
                                $this->match(self::LEFT_PAREN);
                                $this->setState(7316);
                                $this->match(self::MODE);
                                $this->setState(7317);

                                $_la = $this->input->LA(1);

                                if (!($_la === self::DEFAULT || $_la === self::FORCE)) {
                                    $this->errorHandler->recoverInline($this);
                                } else {
                                    if ($this->input->LA(1) === Token::EOF) {
                                        $this->matchedEOF = true;
                                    }

                                    $this->errorHandler->reportMatch($this);
                                    $this->consume();
                                }
                                $this->setState(7318);
                                $this->match(self::RIGHT_PAREN);
                                break;

                            case self::UPGRADE:
                                $this->setState(7319);
                                $this->upgrade_table_clause();
                                break;

                            case self::MINIMIZE:
                            case self::NOMINIMIZE:
                            case self::RECORDS_PER_BLOCK:
                                $this->setState(7320);
                                $this->records_per_block_clause();
                                break;

                            case self::NOPARALLEL:
                            case self::PARALLEL:
                                $this->setState(7321);
                                $this->parallel_clause();
                                break;

                            case self::DISABLE:
                            case self::ENABLE:
                            case self::ROW:
                                $this->setState(7322);
                                $this->row_movement_clause();
                                break;

                            case self::FLASHBACK:
                            case self::NO:
                                $this->setState(7323);
                                $this->flashback_archive_clause();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(7326);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 902, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            $this->setState(7329);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ADD || $_la === self::COALESCE || $_la === self::COMPRESS || $_la === self::MAPPING || $_la === self::NOCOMPRESS || $_la === self::NOMAPPING || $_la === self::OVERFLOW || $_la === self::PCTTHRESHOLD) {
                $this->setState(7328);
                $this->alter_iot_clauses();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_iot_clauses(): Context\Alter_iot_clausesContext
    {
        $localContext = new Context\Alter_iot_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 756, self::RULE_alter_iot_clauses);

        try {
            $this->setState(7335);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 904, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7331);
                    $this->index_org_table_clause();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7332);
                    $this->alter_overflow_clause();
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7333);
                    $this->alter_mapping_table_clause();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(7334);
                    $this->match(self::COALESCE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_mapping_table_clause(): Context\Alter_mapping_table_clauseContext
    {
        $localContext = new Context\Alter_mapping_table_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 758, self::RULE_alter_mapping_table_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7337);
            $this->match(self::MAPPING);
            $this->setState(7338);
            $this->match(self::TABLE);
            $this->setState(7341);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALLOCATE:
                    $this->setState(7339);
                    $this->allocate_extent_clause();
                    break;

                case self::DEALLOCATE:
                    $this->setState(7340);
                    $this->deallocate_unused_clause();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_overflow_clause(): Context\Alter_overflow_clauseContext
    {
        $localContext = new Context\Alter_overflow_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 760, self::RULE_alter_overflow_clause);

        try {
            $this->setState(7353);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ADD:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7343);
                    $this->add_overflow_clause();
                    break;

                case self::OVERFLOW:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7344);
                    $this->match(self::OVERFLOW);
                    $this->setState(7349);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(7349);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::FILESYSTEM_LIKE_LOGGING:
                            case self::INITRANS:
                            case self::LOGGING:
                            case self::NOLOGGING:
                            case self::PCTFREE:
                            case self::PCTUSED:
                            case self::STORAGE:
                            case self::TABLESPACE:
                                $this->setState(7345);
                                $this->segment_attributes_clause();
                                break;

                            case self::ALLOCATE:
                                $this->setState(7346);
                                $this->allocate_extent_clause();
                                break;

                            case self::SHRINK:
                                $this->setState(7347);
                                $this->shrink_clause();
                                break;

                            case self::DEALLOCATE:
                                $this->setState(7348);
                                $this->deallocate_unused_clause();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(7351);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::ALLOCATE || $_la === self::DEALLOCATE || $_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOGGING || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::SHRINK || $_la === self::STORAGE || $_la === self::TABLESPACE);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_overflow_clause(): Context\Add_overflow_clauseContext
    {
        $localContext = new Context\Add_overflow_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 762, self::RULE_add_overflow_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7355);
            $this->match(self::ADD);
            $this->setState(7356);
            $this->match(self::OVERFLOW);
            $this->setState(7358);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOGGING || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                $this->setState(7357);
                $this->segment_attributes_clause();
            }
            $this->setState(7376);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LEFT_PAREN) {
                $this->setState(7360);
                $this->match(self::LEFT_PAREN);
                $this->setState(7361);
                $this->match(self::PARTITION);
                $this->setState(7363);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOGGING || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                    $this->setState(7362);
                    $this->segment_attributes_clause();
                }
                $this->setState(7372);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::COMMA) {
                    $this->setState(7365);
                    $this->match(self::COMMA);
                    $this->setState(7366);
                    $this->match(self::PARTITION);
                    $this->setState(7368);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOGGING || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                        $this->setState(7367);
                        $this->segment_attributes_clause();
                    }
                    $this->setState(7374);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
                $this->setState(7375);
                $this->match(self::RIGHT_PAREN);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function enable_disable_clause(): Context\Enable_disable_clauseContext
    {
        $localContext = new Context\Enable_disable_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 764, self::RULE_enable_disable_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7378);

            $_la = $this->input->LA(1);

            if (!($_la === self::DISABLE || $_la === self::ENABLE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(7380);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOVALIDATE || $_la === self::VALIDATE) {
                $this->setState(7379);

                $_la = $this->input->LA(1);

                if (!($_la === self::NOVALIDATE || $_la === self::VALIDATE)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(7398);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::UNIQUE:
                    $this->setState(7382);
                    $this->match(self::UNIQUE);
                    $this->setState(7383);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7384);
                    $this->column_name();
                    $this->setState(7389);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7385);
                        $this->match(self::COMMA);
                        $this->setState(7386);
                        $this->column_name();
                        $this->setState(7391);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(7392);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case self::PRIMARY:
                    $this->setState(7394);
                    $this->match(self::PRIMARY);
                    $this->setState(7395);
                    $this->match(self::KEY);
                    break;

                case self::CONSTRAINT:
                    $this->setState(7396);
                    $this->match(self::CONSTRAINT);
                    $this->setState(7397);
                    $this->constraint_name();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(7401);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USING) {
                $this->setState(7400);
                $this->using_index_clause();
            }
            $this->setState(7404);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EXCEPTIONS) {
                $this->setState(7403);
                $this->exceptions_clause();
            }
            $this->setState(7407);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CASCADE) {
                $this->setState(7406);
                $this->match(self::CASCADE);
            }
            $this->setState(7411);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DROP || $_la === self::KEEP) {
                $this->setState(7409);

                $_la = $this->input->LA(1);

                if (!($_la === self::DROP || $_la === self::KEEP)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
                $this->setState(7410);
                $this->match(self::INDEX);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function using_index_clause(): Context\Using_index_clauseContext
    {
        $localContext = new Context\Using_index_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 766, self::RULE_using_index_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7413);
            $this->match(self::USING);
            $this->setState(7414);
            $this->match(self::INDEX);
            $this->setState(7421);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 921, $this->ctx)) {
                case 1:
                    $this->setState(7415);
                    $this->index_name();
                    break;

                case 2:
                    $this->setState(7416);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7417);
                    $this->create_index();
                    $this->setState(7418);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case 3:
                    $this->setState(7420);
                    $this->index_attributes();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function index_attributes(): Context\Index_attributesContext
    {
        $localContext = new Context\Index_attributesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 768, self::RULE_index_attributes);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7435);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(7435);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::INITRANS:
                            case self::PCTFREE:
                            case self::PCTUSED:
                            case self::STORAGE:
                                $this->setState(7423);
                                $this->physical_attributes_clause();
                                break;

                            case self::FILESYSTEM_LIKE_LOGGING:
                            case self::LOGGING:
                            case self::NOLOGGING:
                                $this->setState(7424);
                                $this->logging_clause();
                                break;

                            case self::TABLESPACE:
                                $this->setState(7425);
                                $this->match(self::TABLESPACE);
                                $this->setState(7428);
                                $this->errorHandler->sync($this);

                                switch ($this->input->LA(1)) {
                                    case self::ABORT:
                                    case self::ABS:
                                    case self::ACCESS:
                                    case self::ACCESSED:
                                    case self::ACCOUNT:
                                    case self::ACL:
                                    case self::ACOS:
                                    case self::ACTION:
                                    case self::ACTIONS:
                                    case self::ACTIVATE:
                                    case self::ACTIVE:
                                    case self::ACTIVE_COMPONENT:
                                    case self::ACTIVE_DATA:
                                    case self::ACTIVE_FUNCTION:
                                    case self::ACTIVE_TAG:
                                    case self::ACTIVITY:
                                    case self::ADAPTIVE_PLAN:
                                    case self::ADD:
                                    case self::ADD_COLUMN:
                                    case self::ADD_GROUP:
                                    case self::ADD_MONTHS:
                                    case self::ADJ_DATE:
                                    case self::ADMIN:
                                    case self::ADMINISTER:
                                    case self::ADMINISTRATOR:
                                    case self::ADVANCED:
                                    case self::ADVISE:
                                    case self::ADVISOR:
                                    case self::AFD_DISKSTRING:
                                    case self::AFTER:
                                    case self::AGENT:
                                    case self::AGGREGATE:
                                    case self::A_LETTER:
                                    case self::ALIAS:
                                    case self::ALLOCATE:
                                    case self::ALLOW:
                                    case self::ALL_ROWS:
                                    case self::ALWAYS:
                                    case self::ANALYZE:
                                    case self::ANCILLARY:
                                    case self::AND_EQUAL:
                                    case self::ANOMALY:
                                    case self::ANSI_REARCH:
                                    case self::ANTIJOIN:
                                    case self::ANYSCHEMA:
                                    case self::APPEND:
                                    case self::APPENDCHILDXML:
                                    case self::APPEND_VALUES:
                                    case self::APPLICATION:
                                    case self::APPLY:
                                    case self::APPROX_COUNT_DISTINCT:
                                    case self::ARCHIVAL:
                                    case self::ARCHIVE:
                                    case self::ARCHIVED:
                                    case self::ARCHIVELOG:
                                    case self::ARRAY:
                                    case self::ASCII:
                                    case self::ASCIISTR:
                                    case self::ASIN:
                                    case self::ASIS:
                                    case self::ASSEMBLY:
                                    case self::ASSIGN:
                                    case self::ASSOCIATE:
                                    case self::ASYNC:
                                    case self::ASYNCHRONOUS:
                                    case self::ATAN2:
                                    case self::ATAN:
                                    case self::AT:
                                    case self::ATTRIBUTE:
                                    case self::ATTRIBUTES:
                                    case self::AUTHENTICATED:
                                    case self::AUTHENTICATION:
                                    case self::AUTHID:
                                    case self::AUTHORIZATION:
                                    case self::AUTOALLOCATE:
                                    case self::AUTO:
                                    case self::AUTOEXTEND:
                                    case self::AUTO_LOGIN:
                                    case self::AUTOMATIC:
                                    case self::AUTONOMOUS_TRANSACTION:
                                    case self::AUTO_REOPTIMIZE:
                                    case self::AVAILABILITY:
                                    case self::AVRO:
                                    case self::BACKGROUND:
                                    case self::BACKUP:
                                    case self::BASIC:
                                    case self::BASICFILE:
                                    case self::BATCH:
                                    case self::BATCHSIZE:
                                    case self::BATCH_TABLE_ACCESS_BY_ROWID:
                                    case self::BECOME:
                                    case self::BEFORE:
                                    case self::BEGIN:
                                    case self::BEGINNING:
                                    case self::BEGIN_OUTLINE_DATA:
                                    case self::BEHALF:
                                    case self::BEQUEATH:
                                    case self::BFILE:
                                    case self::BFILENAME:
                                    case self::BIGFILE:
                                    case self::BINARY:
                                    case self::BINARY_DOUBLE:
                                    case self::BINARY_DOUBLE_INFINITY:
                                    case self::BINARY_DOUBLE_NAN:
                                    case self::BINARY_FLOAT:
                                    case self::BINARY_FLOAT_INFINITY:
                                    case self::BINARY_FLOAT_NAN:
                                    case self::BINARY_INTEGER:
                                    case self::BIND_AWARE:
                                    case self::BINDING:
                                    case self::BIN_TO_NUM:
                                    case self::BITAND:
                                    case self::BITMAP_AND:
                                    case self::BITMAP:
                                    case self::BITMAPS:
                                    case self::BITMAP_TREE:
                                    case self::BITS:
                                    case self::BLOB:
                                    case self::BLOCK:
                                    case self::BLOCK_RANGE:
                                    case self::BLOCKS:
                                    case self::BLOCKSIZE:
                                    case self::BODY:
                                    case self::BOOLEAN:
                                    case self::BOTH:
                                    case self::BOUND:
                                    case self::BRANCH:
                                    case self::BREADTH:
                                    case self::BROADCAST:
                                    case self::BSON:
                                    case self::BUFFER:
                                    case self::BUFFER_CACHE:
                                    case self::BUFFER_POOL:
                                    case self::BUILD:
                                    case self::BULK:
                                    case self::BYPASS_RECURSIVE_CHECK:
                                    case self::BYPASS_UJVC:
                                    case self::BYTE:
                                    case self::CACHE:
                                    case self::CACHE_CB:
                                    case self::CACHE_INSTANCES:
                                    case self::CACHE_TEMP_TABLE:
                                    case self::CACHING:
                                    case self::CALCULATED:
                                    case self::CALLBACK:
                                    case self::CALL:
                                    case self::CANCEL:
                                    case self::CAPACITY:
                                    case self::CARDINALITY:
                                    case self::CASCADE:
                                    case self::CASE:
                                    case self::CAST:
                                    case self::CATEGORY:
                                    case self::CDBDEFAULT:
                                    case self::CEIL:
                                    case self::CELL_FLASH_CACHE:
                                    case self::CERTIFICATE:
                                    case self::CFILE:
                                    case self::CHAINED:
                                    case self::CHANGE:
                                    case self::CHANGE_DUPKEY_ERROR_INDEX:
                                    case self::CHARACTER:
                                    case self::CHAR:
                                    case self::CHAR_CS:
                                    case self::CHARTOROWID:
                                    case self::CHECK_ACL_REWRITE:
                                    case self::CHECKPOINT:
                                    case self::CHILD:
                                    case self::CHOOSE:
                                    case self::CHR:
                                    case self::CHUNK:
                                    case self::CLASS:
                                    case self::CLASSIFIER:
                                    case self::CLEANUP:
                                    case self::CLEAR:
                                    case self::C_LETTER:
                                    case self::CLIENT:
                                    case self::CLOB:
                                    case self::CLONE:
                                    case self::CLOSE_CACHED_OPEN_CURSORS:
                                    case self::CLOSE:
                                    case self::CLUSTER_BY_ROWID:
                                    case self::CLUSTER:
                                    case self::CLUSTER_DETAILS:
                                    case self::CLUSTER_DISTANCE:
                                    case self::CLUSTER_ID:
                                    case self::CLUSTERING:
                                    case self::CLUSTERING_FACTOR:
                                    case self::CLUSTER_PROBABILITY:
                                    case self::CLUSTER_SET:
                                    case self::COALESCE:
                                    case self::COALESCE_SQ:
                                    case self::COARSE:
                                    case self::CO_AUTH_IND:
                                    case self::COLD:
                                    case self::COLLECT:
                                    case self::COLUMNAR:
                                    case self::COLUMN_AUTH_INDICATOR:
                                    case self::COLUMN:
                                    case self::COLUMNS:
                                    case self::COLUMN_STATS:
                                    case self::COLUMN_VALUE:
                                    case self::COMMENT:
                                    case self::COMMIT:
                                    case self::COMMITTED:
                                    case self::COMMON_DATA:
                                    case self::COMPACT:
                                    case self::COMPATIBILITY:
                                    case self::COMPILE:
                                    case self::COMPLETE:
                                    case self::COMPLIANCE:
                                    case self::COMPONENT:
                                    case self::COMPONENTS:
                                    case self::COMPOSE:
                                    case self::COMPOSITE:
                                    case self::COMPOSITE_LIMIT:
                                    case self::COMPOUND:
                                    case self::COMPUTE:
                                    case self::CONCAT:
                                    case self::CON_DBID_TO_ID:
                                    case self::CONDITIONAL:
                                    case self::CONDITION:
                                    case self::CONFIRM:
                                    case self::CONFORMING:
                                    case self::CON_GUID_TO_ID:
                                    case self::CON_ID:
                                    case self::CON_NAME_TO_ID:
                                    case self::CONNECT_BY_CB_WHR_ONLY:
                                    case self::CONNECT_BY_COMBINE_SW:
                                    case self::CONNECT_BY_COST_BASED:
                                    case self::CONNECT_BY_ELIM_DUPS:
                                    case self::CONNECT_BY_FILTERING:
                                    case self::CONNECT_BY_ISCYCLE:
                                    case self::CONNECT_BY_ISLEAF:
                                    case self::CONNECT_BY_ROOT:
                                    case self::CONNECT_TIME:
                                    case self::CONSIDER:
                                    case self::CONSISTENT:
                                    case self::CONSTANT:
                                    case self::CONST:
                                    case self::CONSTRAINT:
                                    case self::CONSTRAINTS:
                                    case self::CONSTRUCTOR:
                                    case self::CONTAINER:
                                    case self::CONTAINER_DATA:
                                    case self::CONTAINERS:
                                    case self::CONTENT:
                                    case self::CONTENTS:
                                    case self::CONTEXT:
                                    case self::CONTINUE:
                                    case self::CONTROLFILE:
                                    case self::CON_UID_TO_ID:
                                    case self::CONVERT:
                                    case self::COOKIE:
                                    case self::COPY:
                                    case self::CORR_K:
                                    case self::CORR_S:
                                    case self::CORRUPTION:
                                    case self::CORRUPT_XID_ALL:
                                    case self::CORRUPT_XID:
                                    case self::COS:
                                    case self::COSH:
                                    case self::COST:
                                    case self::COST_XML_QUERY_REWRITE:
                                    case self::COUNT:
                                    case self::COVAR_POP:
                                    case self::COVAR_SAMP:
                                    case self::CPU_COSTING:
                                    case self::CPU_PER_CALL:
                                    case self::CPU_PER_SESSION:
                                    case self::CRASH:
                                    case self::CREATE_FILE_DEST:
                                    case self::CREATE_STORED_OUTLINES:
                                    case self::CREATION:
                                    case self::CREDENTIAL:
                                    case self::CRITICAL:
                                    case self::CROSS:
                                    case self::CROSSEDITION:
                                    case self::CSCONVERT:
                                    case self::CUBE_AJ:
                                    case self::CUBE:
                                    case self::CUBE_GB:
                                    case self::CUBE_SJ:
                                    case self::CUME_DISTM:
                                    case self::CURRENT:
                                    case self::CURRENT_DATE:
                                    case self::CURRENT_SCHEMA:
                                    case self::CURRENT_TIME:
                                    case self::CURRENT_TIMESTAMP:
                                    case self::CURRENT_USER:
                                    case self::CURRENTV:
                                    case self::CURSOR:
                                    case self::CURSOR_SHARING_EXACT:
                                    case self::CURSOR_SPECIFIC_SEGMENT:
                                    case self::CUSTOMDATUM:
                                    case self::CV:
                                    case self::CYCLE:
                                    case self::DANGLING:
                                    case self::DATABASE:
                                    case self::DATA:
                                    case self::DATAFILE:
                                    case self::DATAFILES:
                                    case self::DATAMOVEMENT:
                                    case self::DATAOBJNO:
                                    case self::DATAOBJ_TO_MAT_PARTITION:
                                    case self::DATAOBJ_TO_PARTITION:
                                    case self::DATAPUMP:
                                    case self::DATA_SECURITY_REWRITE_LIMIT:
                                    case self::DATE_MODE:
                                    case self::DAY:
                                    case self::DAYS:
                                    case self::DBA:
                                    case self::DBA_RECYCLEBIN:
                                    case self::DBMS_STATS:
                                    case self::DB_ROLE_CHANGE:
                                    case self::DBTIMEZONE:
                                    case self::DB_UNIQUE_NAME:
                                    case self::DB_VERSION:
                                    case self::DDL:
                                    case self::DEALLOCATE:
                                    case self::DEBUG:
                                    case self::DEBUGGER:
                                    case self::DEC:
                                    case self::DECIMAL:
                                    case self::DECLARE:
                                    case self::DECOMPOSE:
                                    case self::DECORRELATE:
                                    case self::DECR:
                                    case self::DECREMENT:
                                    case self::DECRYPT:
                                    case self::DEDUPLICATE:
                                    case self::DEFAULTS:
                                    case self::DEFERRABLE:
                                    case self::DEFERRED:
                                    case self::DEFINED:
                                    case self::DEFINE:
                                    case self::DEFINER:
                                    case self::DEGREE:
                                    case self::DELAY:
                                    case self::DELEGATE:
                                    case self::DELETE_ALL:
                                    case self::DELETE:
                                    case self::DELETEXML:
                                    case self::DEMAND:
                                    case self::DENSE_RANKM:
                                    case self::DEPENDENT:
                                    case self::DEPTH:
                                    case self::DEQUEUE:
                                    case self::DEREF:
                                    case self::DEREF_NO_REWRITE:
                                    case self::DESTROY:
                                    case self::DETACHED:
                                    case self::DETERMINES:
                                    case self::DETERMINISTIC:
                                    case self::DICTIONARY:
                                    case self::DIMENSION:
                                    case self::DIMENSIONS:
                                    case self::DIRECT_LOAD:
                                    case self::DIRECTORY:
                                    case self::DIRECT_PATH:
                                    case self::DISABLE_ALL:
                                    case self::DISABLE:
                                    case self::DISABLE_PARALLEL_DML:
                                    case self::DISABLE_PRESET:
                                    case self::DISABLE_RPKE:
                                    case self::DISALLOW:
                                    case self::DISASSOCIATE:
                                    case self::DISCARD:
                                    case self::DISCONNECT:
                                    case self::DISK:
                                    case self::DISKGROUP:
                                    case self::DISKS:
                                    case self::DISMOUNT:
                                    case self::DISTINGUISHED:
                                    case self::DISTRIBUTED:
                                    case self::DISTRIBUTE:
                                    case self::DML:
                                    case self::DML_UPDATE:
                                    case self::DOCFIDELITY:
                                    case self::DOCUMENT:
                                    case self::DOMAIN_INDEX_FILTER:
                                    case self::DOMAIN_INDEX_NO_SORT:
                                    case self::DOMAIN_INDEX_SORT:
                                    case self::DOUBLE:
                                    case self::DOWNGRADE:
                                    case self::DRIVING_SITE:
                                    case self::DROP_COLUMN:
                                    case self::DROP_GROUP:
                                    case self::DSINTERVAL_UNCONSTRAINED:
                                    case self::DST_UPGRADE_INSERT_CONV:
                                    case self::DUMP:
                                    case self::DUPLICATE:
                                    case self::DV:
                                    case self::DYNAMIC:
                                    case self::DYNAMIC_SAMPLING:
                                    case self::DYNAMIC_SAMPLING_EST_CDN:
                                    case self::EACH:
                                    case self::EDITIONABLE:
                                    case self::EDITION:
                                    case self::EDITIONING:
                                    case self::EDITIONS:
                                    case self::ELEMENT:
                                    case self::ELIM_GROUPBY:
                                    case self::ELIMINATE_JOIN:
                                    case self::ELIMINATE_OBY:
                                    case self::ELIMINATE_OUTER_JOIN:
                                    case self::EM:
                                    case self::EMPTY_BLOB:
                                    case self::EMPTY_CLOB:
                                    case self::EMPTY:
                                    case self::ENABLE_ALL:
                                    case self::ENABLE:
                                    case self::ENABLE_PARALLEL_DML:
                                    case self::ENABLE_PRESET:
                                    case self::ENCODING:
                                    case self::ENCRYPT:
                                    case self::ENCRYPTION:
                                    case self::END_OUTLINE_DATA:
                                    case self::ENFORCED:
                                    case self::ENFORCE:
                                    case self::ENQUEUE:
                                    case self::ENTERPRISE:
                                    case self::ENTITYESCAPING:
                                    case self::ENTRY:
                                    case self::EQUIPART:
                                    case self::ERR:
                                    case self::ERROR_ARGUMENT:
                                    case self::ERROR:
                                    case self::ERROR_ON_OVERLAP_TIME:
                                    case self::ERRORS:
                                    case self::ESCAPE:
                                    case self::ESTIMATE:
                                    case self::EVAL:
                                    case self::EVALNAME:
                                    case self::EVALUATE:
                                    case self::EVALUATION:
                                    case self::EVENTS:
                                    case self::EVERY:
                                    case self::EXCEPT:
                                    case self::EXCEPTION:
                                    case self::EXCEPTION_INIT:
                                    case self::EXCEPTIONS:
                                    case self::EXCHANGE:
                                    case self::EXCLUDE:
                                    case self::EXCLUDING:
                                    case self::EXECUTE:
                                    case self::EXEMPT:
                                    case self::EXISTING:
                                    case self::EXISTS:
                                    case self::EXISTSNODE:
                                    case self::EXIT:
                                    case self::EXPAND_GSET_TO_UNION:
                                    case self::EXPAND_TABLE:
                                    case self::EXP:
                                    case self::EXPIRE:
                                    case self::EXPLAIN:
                                    case self::EXPLOSION:
                                    case self::EXPORT:
                                    case self::EXPR_CORR_CHECK:
                                    case self::EXPRESS:
                                    case self::EXTENDS:
                                    case self::EXTENT:
                                    case self::EXTENTS:
                                    case self::EXTERNAL:
                                    case self::EXTERNALLY:
                                    case self::EXTRACTCLOBXML:
                                    case self::EXTRACT:
                                    case self::EXTRACTVALUE:
                                    case self::EXTRA:
                                    case self::FACILITY:
                                    case self::FACT:
                                    case self::FACTOR:
                                    case self::FACTORIZE_JOIN:
                                    case self::FAILED:
                                    case self::FAILED_LOGIN_ATTEMPTS:
                                    case self::FAILGROUP:
                                    case self::FAILOVER:
                                    case self::FAILURE:
                                    case self::FALSE:
                                    case self::FAMILY:
                                    case self::FAR:
                                    case self::FAST:
                                    case self::FASTSTART:
                                    case self::FBTSCAN:
                                    case self::FEATURE_DETAILS:
                                    case self::FEATURE_ID:
                                    case self::FEATURE_SET:
                                    case self::FEATURE_VALUE:
                                    case self::FETCH:
                                    case self::FILE:
                                    case self::FILE_NAME_CONVERT:
                                    case self::FILESYSTEM_LIKE_LOGGING:
                                    case self::FILTER:
                                    case self::FINAL:
                                    case self::FINE:
                                    case self::FINISH:
                                    case self::FIRST:
                                    case self::FIRSTM:
                                    case self::FIRST_ROWS:
                                    case self::FIRST_VALUE:
                                    case self::FIXED_VIEW_DATA:
                                    case self::FLAGGER:
                                    case self::FLASHBACK:
                                    case self::FLASH_CACHE:
                                    case self::FLOAT:
                                    case self::FLOB:
                                    case self::FLOOR:
                                    case self::FLUSH:
                                    case self::FOLDER:
                                    case self::FOLLOWING:
                                    case self::FOLLOWS:
                                    case self::FORALL:
                                    case self::FORCE:
                                    case self::FORCE_XML_QUERY_REWRITE:
                                    case self::FOREIGN:
                                    case self::FOREVER:
                                    case self::FORMAT:
                                    case self::FORWARD:
                                    case self::FRAGMENT_NUMBER:
                                    case self::FREELIST:
                                    case self::FREELISTS:
                                    case self::FREEPOOLS:
                                    case self::FRESH:
                                    case self::FROM_TZ:
                                    case self::FULL:
                                    case self::FULL_OUTER_JOIN_TO_OUTER:
                                    case self::FUNCTION:
                                    case self::FUNCTIONS:
                                    case self::GATHER_OPTIMIZER_STATISTICS:
                                    case self::GATHER_PLAN_STATISTICS:
                                    case self::GBY_CONC_ROLLUP:
                                    case self::GBY_PUSHDOWN:
                                    case self::GENERATED:
                                    case self::GET:
                                    case self::GLOBAL:
                                    case self::GLOBALLY:
                                    case self::GLOBAL_NAME:
                                    case self::GLOBAL_TOPIC_ENABLED:
                                    case self::GROUP_BY:
                                    case self::GROUP_ID:
                                    case self::GROUPING:
                                    case self::GROUPING_ID:
                                    case self::GROUPS:
                                    case self::GUARANTEED:
                                    case self::GUARANTEE:
                                    case self::GUARD:
                                    case self::HASH_AJ:
                                    case self::HASH:
                                    case self::HASHKEYS:
                                    case self::HASH_SJ:
                                    case self::HEADER:
                                    case self::HEAP:
                                    case self::HELP:
                                    case self::HEXTORAW:
                                    case self::HEXTOREF:
                                    case self::HIDDEN_KEYWORD:
                                    case self::HIDE:
                                    case self::HIERARCHY:
                                    case self::HIGH:
                                    case self::HINTSET_BEGIN:
                                    case self::HINTSET_END:
                                    case self::HOT:
                                    case self::HOUR:
                                    case self::HWM_BROKERED:
                                    case self::HYBRID:
                                    case self::IDENTIFIER:
                                    case self::IDENTITY:
                                    case self::IDGENERATORS:
                                    case self::ID:
                                    case self::IDLE_TIME:
                                    case self::IF:
                                    case self::IGNORE:
                                    case self::IGNORE_OPTIM_EMBEDDED_HINTS:
                                    case self::IGNORE_ROW_ON_DUPKEY_INDEX:
                                    case self::IGNORE_WHERE_CLAUSE:
                                    case self::ILM:
                                    case self::IMMEDIATE:
                                    case self::IMPACT:
                                    case self::IMPORT:
                                    case self::INACTIVE:
                                    case self::INCLUDE:
                                    case self::INCLUDE_VERSION:
                                    case self::INCLUDING:
                                    case self::INCREMENTAL:
                                    case self::INCREMENT:
                                    case self::INCR:
                                    case self::INDENT:
                                    case self::INDEX_ASC:
                                    case self::INDEX_COMBINE:
                                    case self::INDEX_DESC:
                                    case self::INDEXED:
                                    case self::INDEXES:
                                    case self::INDEX_FFS:
                                    case self::INDEX_FILTER:
                                    case self::INDEXING:
                                    case self::INDEX_JOIN:
                                    case self::INDEX_ROWS:
                                    case self::INDEX_RRS:
                                    case self::INDEX_RS_ASC:
                                    case self::INDEX_RS_DESC:
                                    case self::INDEX_RS:
                                    case self::INDEX_SCAN:
                                    case self::INDEX_SKIP_SCAN:
                                    case self::INDEX_SS_ASC:
                                    case self::INDEX_SS_DESC:
                                    case self::INDEX_SS:
                                    case self::INDEX_STATS:
                                    case self::INDEXTYPE:
                                    case self::INDEXTYPES:
                                    case self::INDICATOR:
                                    case self::INDICES:
                                    case self::INFINITE:
                                    case self::INFORMATIONAL:
                                    case self::INHERIT:
                                    case self::INITCAP:
                                    case self::INITIAL:
                                    case self::INITIALIZED:
                                    case self::INITIALLY:
                                    case self::INITRANS:
                                    case self::INLINE:
                                    case self::INLINE_XMLTYPE_NT:
                                    case self::INMEMORY:
                                    case self::IN_MEMORY_METADATA:
                                    case self::INMEMORY_PRUNING:
                                    case self::INNER:
                                    case self::INOUT:
                                    case self::INPLACE:
                                    case self::INSERTCHILDXMLAFTER:
                                    case self::INSERTCHILDXMLBEFORE:
                                    case self::INSERTCHILDXML:
                                    case self::INSERTXMLAFTER:
                                    case self::INSERTXMLBEFORE:
                                    case self::INSTANCE:
                                    case self::INSTANCES:
                                    case self::INSTANTIABLE:
                                    case self::INSTANTLY:
                                    case self::INSTEAD:
                                    case self::INSTR2:
                                    case self::INSTR4:
                                    case self::INSTRB:
                                    case self::INSTRC:
                                    case self::INSTR:
                                    case self::INTEGER:
                                    case self::INTERLEAVED:
                                    case self::INTERMEDIATE:
                                    case self::INTERNAL_CONVERT:
                                    case self::INTERNAL_USE:
                                    case self::INTERPRETED:
                                    case self::INTERVAL:
                                    case self::INT:
                                    case self::INVALIDATE:
                                    case self::INVISIBLE:
                                    case self::IN_XQUERY:
                                    case self::ISOLATION:
                                    case self::ISOLATION_LEVEL:
                                    case self::ITERATE:
                                    case self::ITERATION_NUMBER:
                                    case self::JAVA:
                                    case self::JOB:
                                    case self::JOIN:
                                    case self::JSON_ARRAYAGG:
                                    case self::JSON_ARRAY:
                                    case self::JSON_EQUAL:
                                    case self::JSON_EXISTS2:
                                    case self::JSON_EXISTS:
                                    case self::JSONGET:
                                    case self::JSON:
                                    case self::JSON_OBJECTAGG:
                                    case self::JSON_OBJECT:
                                    case self::JSONPARSE:
                                    case self::JSON_QUERY:
                                    case self::JSON_SERIALIZE:
                                    case self::JSON_TABLE:
                                    case self::JSON_TEXTCONTAINS2:
                                    case self::JSON_TEXTCONTAINS:
                                    case self::JSON_VALUE:
                                    case self::KEEP_DUPLICATES:
                                    case self::KEEP:
                                    case self::KERBEROS:
                                    case self::KEY:
                                    case self::KEY_LENGTH:
                                    case self::KEYSIZE:
                                    case self::KEYS:
                                    case self::KEYSTORE:
                                    case self::KILL:
                                    case self::LABEL:
                                    case self::LANGUAGE:
                                    case self::LAST_DAY:
                                    case self::LAST:
                                    case self::LAST_VALUE:
                                    case self::LATERAL:
                                    case self::LAX:
                                    case self::LAYER:
                                    case self::LDAP_REGISTRATION_ENABLED:
                                    case self::LDAP_REGISTRATION:
                                    case self::LDAP_REG_SYNC_INTERVAL:
                                    case self::LEADING:
                                    case self::LEFT:
                                    case self::LENGTH2:
                                    case self::LENGTH4:
                                    case self::LENGTHB:
                                    case self::LENGTHC:
                                    case self::LENGTH:
                                    case self::LESS:
                                    case self::LEVEL:
                                    case self::LEVELS:
                                    case self::LIBRARY:
                                    case self::LIFECYCLE:
                                    case self::LIFE:
                                    case self::LIFETIME:
                                    case self::LIKE2:
                                    case self::LIKE4:
                                    case self::LIKEC:
                                    case self::LIKE_EXPAND:
                                    case self::LIMIT:
                                    case self::LINEAR:
                                    case self::LINK:
                                    case self::LIST:
                                    case self::LN:
                                    case self::LNNVL:
                                    case self::LOAD:
                                    case self::LOB:
                                    case self::LOBNVL:
                                    case self::LOBS:
                                    case self::LOCAL_INDEXES:
                                    case self::LOCAL:
                                    case self::LOCALTIME:
                                    case self::LOCALTIMESTAMP:
                                    case self::LOCATION:
                                    case self::LOCATOR:
                                    case self::LOCKED:
                                    case self::LOCKING:
                                    case self::LOGFILE:
                                    case self::LOGFILES:
                                    case self::LOGGING:
                                    case self::LOGICAL:
                                    case self::LOGICAL_READS_PER_CALL:
                                    case self::LOGICAL_READS_PER_SESSION:
                                    case self::LOG:
                                    case self::LOGMINING:
                                    case self::LOGOFF:
                                    case self::LOGON:
                                    case self::LOG_READ_ONLY_VIOLATIONS:
                                    case self::LONG:
                                    case self::LOOP:
                                    case self::LOWER:
                                    case self::LOW:
                                    case self::LPAD:
                                    case self::LTRIM:
                                    case self::MAIN:
                                    case self::MAKE_REF:
                                    case self::MANAGED:
                                    case self::MANAGE:
                                    case self::MANAGEMENT:
                                    case self::MANAGER:
                                    case self::MANUAL:
                                    case self::MAP:
                                    case self::MAPPING:
                                    case self::MASTER:
                                    case self::MATCHED:
                                    case self::MATCHES:
                                    case self::MATCH:
                                    case self::MATCH_NUMBER:
                                    case self::MATCH_RECOGNIZE:
                                    case self::MATERIALIZED:
                                    case self::MATERIALIZE:
                                    case self::MAXARCHLOGS:
                                    case self::MAXDATAFILES:
                                    case self::MAXEXTENTS:
                                    case self::MAXIMIZE:
                                    case self::MAXINSTANCES:
                                    case self::MAXLOGFILES:
                                    case self::MAXLOGHISTORY:
                                    case self::MAXLOGMEMBERS:
                                    case self::MAX_SHARED_TEMP_SIZE:
                                    case self::MAXSIZE:
                                    case self::MAXTRANS:
                                    case self::MAXVALUE:
                                    case self::MEASURE:
                                    case self::MEASURES:
                                    case self::MEDIUM:
                                    case self::MEMBER:
                                    case self::MEMCOMPRESS:
                                    case self::MEMORY:
                                    case self::MERGEACTIONS:
                                    case self::MERGE_AJ:
                                    case self::MERGE_CONST_ON:
                                    case self::MERGE:
                                    case self::MERGE_SJ:
                                    case self::METADATA:
                                    case self::METHOD:
                                    case self::MIGRATE:
                                    case self::MIGRATION:
                                    case self::MINEXTENTS:
                                    case self::MINIMIZE:
                                    case self::MINIMUM:
                                    case self::MINING:
                                    case self::MINUS_NULL:
                                    case self::MINUTE:
                                    case self::MINVALUE:
                                    case self::MIRRORCOLD:
                                    case self::MIRRORHOT:
                                    case self::MIRROR:
                                    case self::MLSLABEL:
                                    case self::MODEL_COMPILE_SUBQUERY:
                                    case self::MODEL_DONTVERIFY_UNIQUENESS:
                                    case self::MODEL_DYNAMIC_SUBQUERY:
                                    case self::MODEL_MIN_ANALYSIS:
                                    case self::MODEL:
                                    case self::MODEL_NB:
                                    case self::MODEL_NO_ANALYSIS:
                                    case self::MODEL_PBY:
                                    case self::MODEL_PUSH_REF:
                                    case self::MODEL_SV:
                                    case self::MODIFICATION:
                                    case self::MODIFY_COLUMN_TYPE:
                                    case self::MODIFY:
                                    case self::MOD:
                                    case self::MODULE:
                                    case self::MONITORING:
                                    case self::MONITOR:
                                    case self::MONTH:
                                    case self::MONTHS_BETWEEN:
                                    case self::MONTHS:
                                    case self::MOUNT:
                                    case self::MOUNTPATH:
                                    case self::MOVEMENT:
                                    case self::MOVE:
                                    case self::MULTIDIMENSIONAL:
                                    case self::MULTISET:
                                    case self::MV_MERGE:
                                    case self::NAMED:
                                    case self::NAME:
                                    case self::NAMESPACE:
                                    case self::NAN:
                                    case self::NANVL:
                                    case self::NATIONAL:
                                    case self::NATIVE_FULL_OUTER_JOIN:
                                    case self::NATIVE:
                                    case self::NATURAL:
                                    case self::NAV:
                                    case self::NCHAR_CS:
                                    case self::NCHAR:
                                    case self::NCHR:
                                    case self::NCLOB:
                                    case self::NEEDED:
                                    case self::NEG:
                                    case self::NESTED:
                                    case self::NESTED_TABLE_FAST_INSERT:
                                    case self::NESTED_TABLE_GET_REFS:
                                    case self::NESTED_TABLE_ID:
                                    case self::NESTED_TABLE_SET_REFS:
                                    case self::NESTED_TABLE_SET_SETID:
                                    case self::NETWORK:
                                    case self::NEVER:
                                    case self::NEW:
                                    case self::NEW_TIME:
                                    case self::NEXT_DAY:
                                    case self::NEXT:
                                    case self::NL_AJ:
                                    case self::NLJ_BATCHING:
                                    case self::NLJ_INDEX_FILTER:
                                    case self::NLJ_INDEX_SCAN:
                                    case self::NLJ_PREFETCH:
                                    case self::NLS_CALENDAR:
                                    case self::NLS_CHARACTERSET:
                                    case self::NLS_CHARSET_DECL_LEN:
                                    case self::NLS_CHARSET_ID:
                                    case self::NLS_CHARSET_NAME:
                                    case self::NLS_COMP:
                                    case self::NLS_CURRENCY:
                                    case self::NLS_DATE_FORMAT:
                                    case self::NLS_DATE_LANGUAGE:
                                    case self::NLS_INITCAP:
                                    case self::NLS_ISO_CURRENCY:
                                    case self::NL_SJ:
                                    case self::NLS_LANG:
                                    case self::NLS_LANGUAGE:
                                    case self::NLS_LENGTH_SEMANTICS:
                                    case self::NLS_LOWER:
                                    case self::NLS_NCHAR_CONV_EXCP:
                                    case self::NLS_NUMERIC_CHARACTERS:
                                    case self::NLS_SORT:
                                    case self::NLSSORT:
                                    case self::NLS_SPECIAL_CHARS:
                                    case self::NLS_TERRITORY:
                                    case self::NLS_UPPER:
                                    case self::NO_ACCESS:
                                    case self::NO_ADAPTIVE_PLAN:
                                    case self::NO_ANSI_REARCH:
                                    case self::NOAPPEND:
                                    case self::NOARCHIVELOG:
                                    case self::NOAUDIT:
                                    case self::NO_AUTO_REOPTIMIZE:
                                    case self::NO_BASETABLE_MULTIMV_REWRITE:
                                    case self::NO_BATCH_TABLE_ACCESS_BY_ROWID:
                                    case self::NO_BIND_AWARE:
                                    case self::NO_BUFFER:
                                    case self::NOCACHE:
                                    case self::NO_CARTESIAN:
                                    case self::NO_CHECK_ACL_REWRITE:
                                    case self::NO_CLUSTER_BY_ROWID:
                                    case self::NO_CLUSTERING:
                                    case self::NO_COALESCE_SQ:
                                    case self::NO_COMMON_DATA:
                                    case self::NO_CONNECT_BY_CB_WHR_ONLY:
                                    case self::NO_CONNECT_BY_COMBINE_SW:
                                    case self::NO_CONNECT_BY_COST_BASED:
                                    case self::NO_CONNECT_BY_ELIM_DUPS:
                                    case self::NO_CONNECT_BY_FILTERING:
                                    case self::NOCOPY:
                                    case self::NO_COST_XML_QUERY_REWRITE:
                                    case self::NO_CPU_COSTING:
                                    case self::NOCPU_COSTING:
                                    case self::NOCYCLE:
                                    case self::NO_DATA_SECURITY_REWRITE:
                                    case self::NO_DECORRELATE:
                                    case self::NODELAY:
                                    case self::NO_DOMAIN_INDEX_FILTER:
                                    case self::NO_DST_UPGRADE_INSERT_CONV:
                                    case self::NO_ELIM_GROUPBY:
                                    case self::NO_ELIMINATE_JOIN:
                                    case self::NO_ELIMINATE_OBY:
                                    case self::NO_ELIMINATE_OUTER_JOIN:
                                    case self::NOENTITYESCAPING:
                                    case self::NO_EXPAND_GSET_TO_UNION:
                                    case self::NO_EXPAND:
                                    case self::NO_EXPAND_TABLE:
                                    case self::NO_FACT:
                                    case self::NO_FACTORIZE_JOIN:
                                    case self::NO_FILTERING:
                                    case self::NOFORCE:
                                    case self::NO_FULL_OUTER_JOIN_TO_OUTER:
                                    case self::NO_GATHER_OPTIMIZER_STATISTICS:
                                    case self::NO_GBY_PUSHDOWN:
                                    case self::NOGUARANTEE:
                                    case self::NO_INDEX_FFS:
                                    case self::NO_INDEX:
                                    case self::NO_INDEX_SS:
                                    case self::NO_INMEMORY:
                                    case self::NO_INMEMORY_PRUNING:
                                    case self::NOKEEP:
                                    case self::NO_LOAD:
                                    case self::NOLOCAL:
                                    case self::NOLOGGING:
                                    case self::NOMAPPING:
                                    case self::NOMAXVALUE:
                                    case self::NO_MERGE:
                                    case self::NOMINIMIZE:
                                    case self::NOMINVALUE:
                                    case self::NO_MODEL_PUSH_REF:
                                    case self::NO_MONITORING:
                                    case self::NOMONITORING:
                                    case self::NO_MONITOR:
                                    case self::NO_MULTIMV_REWRITE:
                                    case self::NO_NATIVE_FULL_OUTER_JOIN:
                                    case self::NONBLOCKING:
                                    case self::NONEDITIONABLE:
                                    case self::NONE:
                                    case self::NO_NLJ_BATCHING:
                                    case self::NO_NLJ_PREFETCH:
                                    case self::NO:
                                    case self::NONSCHEMA:
                                    case self::NO_OBJECT_LINK:
                                    case self::NOORDER:
                                    case self::NO_ORDER_ROLLUPS:
                                    case self::NO_OUTER_JOIN_TO_ANTI:
                                    case self::NO_OUTER_JOIN_TO_INNER:
                                    case self::NOOVERRIDE:
                                    case self::NO_PARALLEL_INDEX:
                                    case self::NOPARALLEL_INDEX:
                                    case self::NO_PARALLEL:
                                    case self::NOPARALLEL:
                                    case self::NO_PARTIAL_COMMIT:
                                    case self::NO_PARTIAL_JOIN:
                                    case self::NO_PARTIAL_ROLLUP_PUSHDOWN:
                                    case self::NOPARTITION:
                                    case self::NO_PLACE_DISTINCT:
                                    case self::NO_PLACE_GROUP_BY:
                                    case self::NO_PQ_CONCURRENT_UNION:
                                    case self::NO_PQ_MAP:
                                    case self::NO_PQ_REPLICATE:
                                    case self::NO_PQ_SKEW:
                                    case self::NO_PRUNE_GSETS:
                                    case self::NO_PULL_PRED:
                                    case self::NO_PUSH_PRED:
                                    case self::NO_PUSH_SUBQ:
                                    case self::NO_PX_FAULT_TOLERANCE:
                                    case self::NO_PX_JOIN_FILTER:
                                    case self::NO_QKN_BUFF:
                                    case self::NO_QUERY_TRANSFORMATION:
                                    case self::NO_REF_CASCADE:
                                    case self::NORELOCATE:
                                    case self::NORELY:
                                    case self::NOREPAIR:
                                    case self::NOREPLAY:
                                    case self::NORESETLOGS:
                                    case self::NO_RESULT_CACHE:
                                    case self::NOREVERSE:
                                    case self::NO_REWRITE:
                                    case self::NOREWRITE:
                                    case self::NORMAL:
                                    case self::NO_ROOT_SW_FOR_LOCAL:
                                    case self::NOROWDEPENDENCIES:
                                    case self::NOSCHEMACHECK:
                                    case self::NOSEGMENT:
                                    case self::NO_SEMIJOIN:
                                    case self::NO_SEMI_TO_INNER:
                                    case self::NO_SET_TO_JOIN:
                                    case self::NOSORT:
                                    case self::NO_SQL_TRANSLATION:
                                    case self::NO_SQL_TUNE:
                                    case self::NO_STAR_TRANSFORMATION:
                                    case self::NO_STATEMENT_QUEUING:
                                    case self::NO_STATS_GSETS:
                                    case self::NOSTRICT:
                                    case self::NO_SUBQUERY_PRUNING:
                                    case self::NO_SUBSTRB_PAD:
                                    case self::NO_SWAP_JOIN_INPUTS:
                                    case self::NOSWITCH:
                                    case self::NO_TABLE_LOOKUP_BY_NL:
                                    case self::NO_TEMP_TABLE:
                                    case self::NOTHING:
                                    case self::NOTIFICATION:
                                    case self::NO_TRANSFORM_DISTINCT_AGG:
                                    case self::NO_UNNEST:
                                    case self::NO_USE_CUBE:
                                    case self::NO_USE_HASH_AGGREGATION:
                                    case self::NO_USE_HASH_GBY_FOR_PUSHDOWN:
                                    case self::NO_USE_HASH:
                                    case self::NO_USE_INVISIBLE_INDEXES:
                                    case self::NO_USE_MERGE:
                                    case self::NO_USE_NL:
                                    case self::NO_USE_VECTOR_AGGREGATION:
                                    case self::NOVALIDATE:
                                    case self::NO_VECTOR_TRANSFORM_DIMS:
                                    case self::NO_VECTOR_TRANSFORM_FACT:
                                    case self::NO_VECTOR_TRANSFORM:
                                    case self::NO_XDB_FASTPATH_INSERT:
                                    case self::NO_XML_DML_REWRITE:
                                    case self::NO_XMLINDEX_REWRITE_IN_SELECT:
                                    case self::NO_XMLINDEX_REWRITE:
                                    case self::NO_XML_QUERY_REWRITE:
                                    case self::NO_ZONEMAP:
                                    case self::NTH_VALUE:
                                    case self::NULLIF:
                                    case self::NULLS:
                                    case self::NUMBER:
                                    case self::NUMERIC:
                                    case self::NUM_INDEX_KEYS:
                                    case self::NUMTODSINTERVAL:
                                    case self::NUMTOYMINTERVAL:
                                    case self::NVARCHAR2:
                                    case self::NVL2:
                                    case self::OBJECT2XML:
                                    case self::OBJECT:
                                    case self::OBJ_ID:
                                    case self::OBJNO:
                                    case self::OBJNO_REUSE:
                                    case self::OCCURENCES:
                                    case self::OFFLINE:
                                    case self::OFF:
                                    case self::OFFSET:
                                    case self::OIDINDEX:
                                    case self::OID:
                                    case self::OLAP:
                                    case self::OLD:
                                    case self::OLD_PUSH_PRED:
                                    case self::OLS:
                                    case self::OLTP:
                                    case self::OMIT:
                                    case self::ONE:
                                    case self::ONLINE:
                                    case self::ONLY:
                                    case self::OPAQUE:
                                    case self::OPAQUE_TRANSFORM:
                                    case self::OPAQUE_XCANONICAL:
                                    case self::OPCODE:
                                    case self::OPEN:
                                    case self::OPERATIONS:
                                    case self::OPERATOR:
                                    case self::OPT_ESTIMATE:
                                    case self::OPTIMAL:
                                    case self::OPTIMIZE:
                                    case self::OPTIMIZER_FEATURES_ENABLE:
                                    case self::OPTIMIZER_GOAL:
                                    case self::OPT_PARAM:
                                    case self::ORA_BRANCH:
                                    case self::ORA_CHECK_ACL:
                                    case self::ORA_CHECK_PRIVILEGE:
                                    case self::ORA_CLUSTERING:
                                    case self::ORADATA:
                                    case self::ORADEBUG:
                                    case self::ORA_DST_AFFECTED:
                                    case self::ORA_DST_CONVERT:
                                    case self::ORA_DST_ERROR:
                                    case self::ORA_GET_ACLIDS:
                                    case self::ORA_GET_PRIVILEGES:
                                    case self::ORA_HASH:
                                    case self::ORA_INVOKING_USERID:
                                    case self::ORA_INVOKING_USER:
                                    case self::ORA_INVOKING_XS_USER_GUID:
                                    case self::ORA_INVOKING_XS_USER:
                                    case self::ORA_RAWCOMPARE:
                                    case self::ORA_RAWCONCAT:
                                    case self::ORA_ROWSCN:
                                    case self::ORA_ROWSCN_RAW:
                                    case self::ORA_ROWVERSION:
                                    case self::ORA_TABVERSION:
                                    case self::ORA_WRITE_TIME:
                                    case self::ORDERED:
                                    case self::ORDERED_PREDICATES:
                                    case self::ORDINALITY:
                                    case self::OR_EXPAND:
                                    case self::ORGANIZATION:
                                    case self::OR_PREDICATES:
                                    case self::OSERROR:
                                    case self::OTHER:
                                    case self::OUTER_JOIN_TO_ANTI:
                                    case self::OUTER_JOIN_TO_INNER:
                                    case self::OUTER:
                                    case self::OUTLINE_LEAF:
                                    case self::OUTLINE:
                                    case self::OUT_OF_LINE:
                                    case self::OUT:
                                    case self::OVERFLOW_NOMOVE:
                                    case self::OVERFLOW:
                                    case self::OVERLAPS:
                                    case self::OVER:
                                    case self::OVERRIDING:
                                    case self::OWNER:
                                    case self::OWNERSHIP:
                                    case self::OWN:
                                    case self::PACKAGE:
                                    case self::PACKAGES:
                                    case self::PARALLEL_ENABLE:
                                    case self::PARALLEL_INDEX:
                                    case self::PARALLEL:
                                    case self::PARAMETERS:
                                    case self::PARAM:
                                    case self::PARENT:
                                    case self::PARITY:
                                    case self::PARTIAL_JOIN:
                                    case self::PARTIALLY:
                                    case self::PARTIAL:
                                    case self::PARTIAL_ROLLUP_PUSHDOWN:
                                    case self::PARTITION_HASH:
                                    case self::PARTITION_LIST:
                                    case self::PARTITION:
                                    case self::PARTITION_RANGE:
                                    case self::PARTITIONS:
                                    case self::PARTNUMINST:
                                    case self::PASSING:
                                    case self::PASSWORD_GRACE_TIME:
                                    case self::PASSWORD_LIFE_TIME:
                                    case self::PASSWORD_LOCK_TIME:
                                    case self::PASSWORD:
                                    case self::PASSWORD_REUSE_MAX:
                                    case self::PASSWORD_REUSE_TIME:
                                    case self::PASSWORD_VERIFY_FUNCTION:
                                    case self::PAST:
                                    case self::PATCH:
                                    case self::PATH:
                                    case self::PATH_PREFIX:
                                    case self::PATHS:
                                    case self::PATTERN:
                                    case self::PBL_HS_BEGIN:
                                    case self::PBL_HS_END:
                                    case self::PCTINCREASE:
                                    case self::PCTTHRESHOLD:
                                    case self::PCTUSED:
                                    case self::PCTVERSION:
                                    case self::PENDING:
                                    case self::PERCENT_KEYWORD:
                                    case self::PERCENT_RANKM:
                                    case self::PERFORMANCE:
                                    case self::PERIOD_KEYWORD:
                                    case self::PERMANENT:
                                    case self::PERMISSION:
                                    case self::PERMUTE:
                                    case self::PER:
                                    case self::PFILE:
                                    case self::PHYSICAL:
                                    case self::PIKEY:
                                    case self::PIPELINED:
                                    case self::PIV_GB:
                                    case self::PIVOT:
                                    case self::PIV_SSF:
                                    case self::PLACE_DISTINCT:
                                    case self::PLACE_GROUP_BY:
                                    case self::PLAN:
                                    case self::PLSCOPE_SETTINGS:
                                    case self::PLS_INTEGER:
                                    case self::PLSQL_CCFLAGS:
                                    case self::PLSQL_CODE_TYPE:
                                    case self::PLSQL_DEBUG:
                                    case self::PLSQL_OPTIMIZE_LEVEL:
                                    case self::PLSQL_WARNINGS:
                                    case self::PLUGGABLE:
                                    case self::POINT:
                                    case self::POLICY:
                                    case self::POOL_16K:
                                    case self::POOL_2K:
                                    case self::POOL_32K:
                                    case self::POOL_4K:
                                    case self::POOL_8K:
                                    case self::POSITIVEN:
                                    case self::POSITIVE:
                                    case self::POST_TRANSACTION:
                                    case self::POWERMULTISET_BY_CARDINALITY:
                                    case self::POWERMULTISET:
                                    case self::POWER:
                                    case self::PQ_CONCURRENT_UNION:
                                    case self::PQ_DISTRIBUTE:
                                    case self::PQ_DISTRIBUTE_WINDOW:
                                    case self::PQ_FILTER:
                                    case self::PQ_MAP:
                                    case self::PQ_NOMAP:
                                    case self::PQ_REPLICATE:
                                    case self::PQ_SKEW:
                                    case self::PRAGMA:
                                    case self::PREBUILT:
                                    case self::PRECEDES:
                                    case self::PRECEDING:
                                    case self::PRECISION:
                                    case self::PRECOMPUTE_SUBQUERY:
                                    case self::PREDICATE_REORDERS:
                                    case self::PRELOAD:
                                    case self::PREPARE:
                                    case self::PRESENTNNV:
                                    case self::PRESENT:
                                    case self::PRESENTV:
                                    case self::PRESERVE_OID:
                                    case self::PRESERVE:
                                    case self::PRETTY:
                                    case self::PREVIOUS:
                                    case self::PREV:
                                    case self::PRIMARY:
                                    case self::PRINTBLOBTOCLOB:
                                    case self::PRIORITY:
                                    case self::PRIVATE:
                                    case self::PRIVATE_SGA:
                                    case self::PRIVILEGED:
                                    case self::PRIVILEGE:
                                    case self::PRIVILEGES:
                                    case self::PROCEDURAL:
                                    case self::PROCEDURE:
                                    case self::PROCESS:
                                    case self::PROFILE:
                                    case self::PROGRAM:
                                    case self::PROJECT:
                                    case self::PROPAGATE:
                                    case self::PROTECTED:
                                    case self::PROTECTION:
                                    case self::PROXY:
                                    case self::PRUNING:
                                    case self::PULL_PRED:
                                    case self::PURGE:
                                    case self::PUSH_PRED:
                                    case self::PUSH_SUBQ:
                                    case self::PX_FAULT_TOLERANCE:
                                    case self::PX_GRANULE:
                                    case self::PX_JOIN_FILTER:
                                    case self::QB_NAME:
                                    case self::QUERY_BLOCK:
                                    case self::QUERY:
                                    case self::QUEUE_CURR:
                                    case self::QUEUE:
                                    case self::QUEUE_ROWP:
                                    case self::QUIESCE:
                                    case self::QUORUM:
                                    case self::QUOTA:
                                    case self::RAISE:
                                    case self::RANDOM_LOCAL:
                                    case self::RANDOM:
                                    case self::RANGE:
                                    case self::RANKM:
                                    case self::RAPIDLY:
                                    case self::RAW:
                                    case self::RAWTOHEX:
                                    case self::RAWTONHEX:
                                    case self::RBA:
                                    case self::RBO_OUTLINE:
                                    case self::RDBA:
                                    case self::READ:
                                    case self::READS:
                                    case self::REALM:
                                    case self::REAL:
                                    case self::REBALANCE:
                                    case self::REBUILD:
                                    case self::RECORD:
                                    case self::RECORDS_PER_BLOCK:
                                    case self::RECOVERABLE:
                                    case self::RECOVER:
                                    case self::RECOVERY:
                                    case self::RECYCLEBIN:
                                    case self::RECYCLE:
                                    case self::REDACTION:
                                    case self::REDEFINE:
                                    case self::REDO:
                                    case self::REDUCED:
                                    case self::REDUNDANCY:
                                    case self::REF_CASCADE_CURSOR:
                                    case self::REFERENCED:
                                    case self::REFERENCE:
                                    case self::REFERENCES:
                                    case self::REFERENCING:
                                    case self::REF:
                                    case self::REFRESH:
                                    case self::REFTOHEX:
                                    case self::REGEXP_COUNT:
                                    case self::REGEXP_INSTR:
                                    case self::REGEXP_LIKE:
                                    case self::REGEXP_REPLACE:
                                    case self::REGEXP_SUBSTR:
                                    case self::REGISTER:
                                    case self::REGR_AVGX:
                                    case self::REGR_AVGY:
                                    case self::REGR_COUNT:
                                    case self::REGR_INTERCEPT:
                                    case self::REGR_R2:
                                    case self::REGR_SLOPE:
                                    case self::REGR_SXX:
                                    case self::REGR_SXY:
                                    case self::REGR_SYY:
                                    case self::REGULAR:
                                    case self::REJECT:
                                    case self::REKEY:
                                    case self::RELATIONAL:
                                    case self::RELOCATE:
                                    case self::RELY:
                                    case self::REMAINDER:
                                    case self::REMOTE_MAPPED:
                                    case self::REMOVE:
                                    case self::RENAME:
                                    case self::REPAIR:
                                    case self::REPEAT:
                                    case self::REPLACE:
                                    case self::REPLICATION:
                                    case self::REQUIRED:
                                    case self::RESETLOGS:
                                    case self::RESET:
                                    case self::RESIZE:
                                    case self::RESOLVE:
                                    case self::RESOLVER:
                                    case self::RESPECT:
                                    case self::RESTART:
                                    case self::RESTORE_AS_INTERVALS:
                                    case self::RESTORE:
                                    case self::RESTRICT_ALL_REF_CONS:
                                    case self::RESTRICTED:
                                    case self::RESTRICT_REFERENCES:
                                    case self::RESTRICT:
                                    case self::RESULT_CACHE:
                                    case self::RESULT:
                                    case self::RESUMABLE:
                                    case self::RESUME:
                                    case self::RETENTION:
                                    case self::RETRY_ON_ROW_CHANGE:
                                    case self::RETURNING:
                                    case self::RETURN:
                                    case self::REUSE:
                                    case self::REVERSE:
                                    case self::REWRITE_OR_ERROR:
                                    case self::REWRITE:
                                    case self::RIGHT:
                                    case self::ROLE:
                                    case self::ROLESET:
                                    case self::ROLES:
                                    case self::ROLLBACK:
                                    case self::ROLLING:
                                    case self::ROLLUP:
                                    case self::ROWDEPENDENCIES:
                                    case self::ROWID_MAPPING_TABLE:
                                    case self::ROWID:
                                    case self::ROWIDTOCHAR:
                                    case self::ROWIDTONCHAR:
                                    case self::ROW_LENGTH:
                                    case self::ROWNUM:
                                    case self::ROW:
                                    case self::ROWS:
                                    case self::RPAD:
                                    case self::RTRIM:
                                    case self::RULE:
                                    case self::RULES:
                                    case self::RUNNING:
                                    case self::SALT:
                                    case self::SAMPLE:
                                    case self::SAVE_AS_INTERVALS:
                                    case self::SAVEPOINT:
                                    case self::SAVE:
                                    case self::SB4:
                                    case self::SCALE_ROWS:
                                    case self::SCALE:
                                    case self::SCAN_INSTANCES:
                                    case self::SCAN:
                                    case self::SCHEDULER:
                                    case self::SCHEMACHECK:
                                    case self::SCHEMA:
                                    case self::SCN_ASCENDING:
                                    case self::SCN:
                                    case self::SCOPE:
                                    case self::SCRUB:
                                    case self::SD_ALL:
                                    case self::SD_INHIBIT:
                                    case self::SDO_GEOM_MBR:
                                    case self::SD_SHOW:
                                    case self::SEARCH:
                                    case self::SECOND:
                                    case self::SECRET:
                                    case self::SECUREFILE_DBA:
                                    case self::SECUREFILE:
                                    case self::SECURITY:
                                    case self::SEED:
                                    case self::SEG_BLOCK:
                                    case self::SEG_FILE:
                                    case self::SEGMENT:
                                    case self::SELECTIVITY:
                                    case self::SELF:
                                    case self::SEMIJOIN_DRIVER:
                                    case self::SEMIJOIN:
                                    case self::SEMI_TO_INNER:
                                    case self::SEQUENCED:
                                    case self::SEQUENCE:
                                    case self::SEQUENTIAL:
                                    case self::SERIALIZABLE:
                                    case self::SERIALLY_REUSABLE:
                                    case self::SERIAL:
                                    case self::SERVERERROR:
                                    case self::SERVICE_NAME_CONVERT:
                                    case self::SERVICES:
                                    case self::SESSION_CACHED_CURSORS:
                                    case self::SESSION:
                                    case self::SESSIONS_PER_USER:
                                    case self::SESSIONTIMEZONE:
                                    case self::SESSIONTZNAME:
                                    case self::SET:
                                    case self::SETS:
                                    case self::SETTINGS:
                                    case self::SET_TO_JOIN:
                                    case self::SEVERE:
                                    case self::SHARED_POOL:
                                    case self::SHARED:
                                    case self::SHARING:
                                    case self::SHELFLIFE:
                                    case self::SHOW:
                                    case self::SHRINK:
                                    case self::SHUTDOWN:
                                    case self::SIBLINGS:
                                    case self::SID:
                                    case self::SIGNAL_COMPONENT:
                                    case self::SIGNAL_FUNCTION:
                                    case self::SIGN:
                                    case self::SIGNTYPE:
                                    case self::SIMPLE_INTEGER:
                                    case self::SIMPLE:
                                    case self::SINGLE:
                                    case self::SINGLETASK:
                                    case self::SINH:
                                    case self::SIN:
                                    case self::SKIP_EXT_OPTIMIZER:
                                    case self::SKIP_:
                                    case self::SKIP_UNQ_UNUSABLE_IDX:
                                    case self::SKIP_UNUSABLE_INDEXES:
                                    case self::SMALLFILE:
                                    case self::SMALLINT:
                                    case self::SNAPSHOT:
                                    case self::SOME:
                                    case self::SORT:
                                    case self::SOUNDEX:
                                    case self::SOURCE_FILE_DIRECTORY:
                                    case self::SOURCE_FILE_NAME_CONVERT:
                                    case self::SOURCE:
                                    case self::SPACE_KEYWORD:
                                    case self::SPECIFICATION:
                                    case self::SPFILE:
                                    case self::SPLIT:
                                    case self::SPREADSHEET:
                                    case self::SQLDATA:
                                    case self::SQLERROR:
                                    case self::SQLLDR:
                                    case self::SQL:
                                    case self::SQL_TRACE:
                                    case self::SQL_TRANSLATION_PROFILE:
                                    case self::SQRT:
                                    case self::STALE:
                                    case self::STANDALONE:
                                    case self::STANDARD_HASH:
                                    case self::STANDBY_MAX_DATA_DELAY:
                                    case self::STANDBYS:
                                    case self::STANDBY:
                                    case self::STAR:
                                    case self::STAR_TRANSFORMATION:
                                    case self::STARTUP:
                                    case self::STATEMENT_ID:
                                    case self::STATEMENT_QUEUING:
                                    case self::STATEMENTS:
                                    case self::STATEMENT:
                                    case self::STATE:
                                    case self::STATIC:
                                    case self::STATISTICS:
                                    case self::STATS_BINOMIAL_TEST:
                                    case self::STATS_CROSSTAB:
                                    case self::STATS_F_TEST:
                                    case self::STATS_KS_TEST:
                                    case self::STATS_MODE:
                                    case self::STATS_MW_TEST:
                                    case self::STATS_ONE_WAY_ANOVA:
                                    case self::STATS_T_TEST_INDEP:
                                    case self::STATS_T_TEST_INDEPU:
                                    case self::STATS_T_TEST_ONE:
                                    case self::STATS_T_TEST_PAIRED:
                                    case self::STATS_WSR_TEST:
                                    case self::STDDEV_POP:
                                    case self::STDDEV_SAMP:
                                    case self::STOP:
                                    case self::STORAGE:
                                    case self::STORE:
                                    case self::STREAMS:
                                    case self::STREAM:
                                    case self::STRICT:
                                    case self::STRING:
                                    case self::STRIPE_COLUMNS:
                                    case self::STRIPE_WIDTH:
                                    case self::STRIP:
                                    case self::STRUCTURE:
                                    case self::SUBMULTISET:
                                    case self::SUBPARTITION_REL:
                                    case self::SUBPARTITIONS:
                                    case self::SUBPARTITION:
                                    case self::SUBQUERIES:
                                    case self::SUBQUERY_PRUNING:
                                    case self::SUBSCRIBE:
                                    case self::SUBSET:
                                    case self::SUBSTITUTABLE:
                                    case self::SUBSTR2:
                                    case self::SUBSTR4:
                                    case self::SUBSTRB:
                                    case self::SUBSTRC:
                                    case self::SUBTYPE:
                                    case self::SUCCESSFUL:
                                    case self::SUCCESS:
                                    case self::SUMMARY:
                                    case self::SUPPLEMENTAL:
                                    case self::SUSPEND:
                                    case self::SWAP_JOIN_INPUTS:
                                    case self::SWITCHOVER:
                                    case self::SWITCH:
                                    case self::SYNCHRONOUS:
                                    case self::SYNC:
                                    case self::SYSASM:
                                    case self::SYS_AUDIT:
                                    case self::SYSAUX:
                                    case self::SYSBACKUP:
                                    case self::SYS_CHECKACL:
                                    case self::SYS_CHECK_PRIVILEGE:
                                    case self::SYS_CONNECT_BY_PATH:
                                    case self::SYS_CONTEXT:
                                    case self::SYSDATE:
                                    case self::SYSDBA:
                                    case self::SYS_DBURIGEN:
                                    case self::SYSDG:
                                    case self::SYS_DL_CURSOR:
                                    case self::SYS_DM_RXFORM_CHR:
                                    case self::SYS_DM_RXFORM_NUM:
                                    case self::SYS_DOM_COMPARE:
                                    case self::SYS_DST_PRIM2SEC:
                                    case self::SYS_DST_SEC2PRIM:
                                    case self::SYS_ET_BFILE_TO_RAW:
                                    case self::SYS_ET_BLOB_TO_IMAGE:
                                    case self::SYS_ET_IMAGE_TO_BLOB:
                                    case self::SYS_ET_RAW_TO_BFILE:
                                    case self::SYS_EXTPDTXT:
                                    case self::SYS_EXTRACT_UTC:
                                    case self::SYS_FBT_INSDEL:
                                    case self::SYS_FILTER_ACLS:
                                    case self::SYS_FNMATCHES:
                                    case self::SYS_FNREPLACE:
                                    case self::SYS_GET_ACLIDS:
                                    case self::SYS_GET_COL_ACLIDS:
                                    case self::SYS_GET_PRIVILEGES:
                                    case self::SYS_GETTOKENID:
                                    case self::SYS_GETXTIVAL:
                                    case self::SYS_GUID:
                                    case self::SYSGUID:
                                    case self::SYSKM:
                                    case self::SYS_MAKE_XMLNODEID:
                                    case self::SYS_MAKEXML:
                                    case self::SYS_MKXMLATTR:
                                    case self::SYS_MKXTI:
                                    case self::SYSOBJ:
                                    case self::SYS_OP_ADT2BIN:
                                    case self::SYS_OP_ADTCONS:
                                    case self::SYS_OP_ALSCRVAL:
                                    case self::SYS_OP_ATG:
                                    case self::SYS_OP_BIN2ADT:
                                    case self::SYS_OP_BITVEC:
                                    case self::SYS_OP_BL2R:
                                    case self::SYS_OP_BLOOM_FILTER_LIST:
                                    case self::SYS_OP_BLOOM_FILTER:
                                    case self::SYS_OP_C2C:
                                    case self::SYS_OP_CAST:
                                    case self::SYS_OP_CEG:
                                    case self::SYS_OP_CL2C:
                                    case self::SYS_OP_COMBINED_HASH:
                                    case self::SYS_OP_COMP:
                                    case self::SYS_OP_CONVERT:
                                    case self::SYS_OP_COUNTCHG:
                                    case self::SYS_OP_CSCONV:
                                    case self::SYS_OP_CSCONVTEST:
                                    case self::SYS_OP_CSR:
                                    case self::SYS_OP_CSX_PATCH:
                                    case self::SYS_OP_CYCLED_SEQ:
                                    case self::SYS_OP_DECOMP:
                                    case self::SYS_OP_DESCEND:
                                    case self::SYS_OP_DISTINCT:
                                    case self::SYS_OP_DRA:
                                    case self::SYS_OP_DUMP:
                                    case self::SYS_OP_DV_CHECK:
                                    case self::SYS_OP_ENFORCE_NOT_NULL:
                                    case self::SYSOPER:
                                    case self::SYS_OP_EXTRACT:
                                    case self::SYS_OP_GROUPING:
                                    case self::SYS_OP_GUID:
                                    case self::SYS_OP_HASH:
                                    case self::SYS_OP_IIX:
                                    case self::SYS_OP_ITR:
                                    case self::SYS_OP_KEY_VECTOR_CREATE:
                                    case self::SYS_OP_KEY_VECTOR_FILTER_LIST:
                                    case self::SYS_OP_KEY_VECTOR_FILTER:
                                    case self::SYS_OP_KEY_VECTOR_SUCCEEDED:
                                    case self::SYS_OP_KEY_VECTOR_USE:
                                    case self::SYS_OP_LBID:
                                    case self::SYS_OP_LOBLOC2BLOB:
                                    case self::SYS_OP_LOBLOC2CLOB:
                                    case self::SYS_OP_LOBLOC2ID:
                                    case self::SYS_OP_LOBLOC2NCLOB:
                                    case self::SYS_OP_LOBLOC2TYP:
                                    case self::SYS_OP_LSVI:
                                    case self::SYS_OP_LVL:
                                    case self::SYS_OP_MAKEOID:
                                    case self::SYS_OP_MAP_NONNULL:
                                    case self::SYS_OP_MSR:
                                    case self::SYS_OP_NICOMBINE:
                                    case self::SYS_OP_NIEXTRACT:
                                    case self::SYS_OP_NII:
                                    case self::SYS_OP_NIX:
                                    case self::SYS_OP_NOEXPAND:
                                    case self::SYS_OP_NTCIMG:
                                    case self::SYS_OP_NUMTORAW:
                                    case self::SYS_OP_OIDVALUE:
                                    case self::SYS_OP_OPNSIZE:
                                    case self::SYS_OP_PAR_1:
                                    case self::SYS_OP_PARGID_1:
                                    case self::SYS_OP_PARGID:
                                    case self::SYS_OP_PAR:
                                    case self::SYS_OP_PART_ID:
                                    case self::SYS_OP_PIVOT:
                                    case self::SYS_OP_R2O:
                                    case self::SYS_OP_RAWTONUM:
                                    case self::SYS_OP_RDTM:
                                    case self::SYS_OP_REF:
                                    case self::SYS_OP_RMTD:
                                    case self::SYS_OP_ROWIDTOOBJ:
                                    case self::SYS_OP_RPB:
                                    case self::SYS_OPTLOBPRBSC:
                                    case self::SYS_OP_TOSETID:
                                    case self::SYS_OP_TPR:
                                    case self::SYS_OP_TRTB:
                                    case self::SYS_OPTXICMP:
                                    case self::SYS_OPTXQCASTASNQ:
                                    case self::SYS_OP_UNDESCEND:
                                    case self::SYS_OP_VECAND:
                                    case self::SYS_OP_VECBIT:
                                    case self::SYS_OP_VECOR:
                                    case self::SYS_OP_VECXOR:
                                    case self::SYS_OP_VERSION:
                                    case self::SYS_OP_VREF:
                                    case self::SYS_OP_VVD:
                                    case self::SYS_OP_XMLCONS_FOR_CSX:
                                    case self::SYS_OP_XPTHATG:
                                    case self::SYS_OP_XPTHIDX:
                                    case self::SYS_OP_XPTHOP:
                                    case self::SYS_OP_XTXT2SQLT:
                                    case self::SYS_OP_ZONE_ID:
                                    case self::SYS_ORDERKEY_DEPTH:
                                    case self::SYS_ORDERKEY_MAXCHILD:
                                    case self::SYS_ORDERKEY_PARENT:
                                    case self::SYS_PARALLEL_TXN:
                                    case self::SYS_PATHID_IS_ATTR:
                                    case self::SYS_PATHID_IS_NMSPC:
                                    case self::SYS_PATHID_LASTNAME:
                                    case self::SYS_PATHID_LASTNMSPC:
                                    case self::SYS_PATH_REVERSE:
                                    case self::SYS_PXQEXTRACT:
                                    case self::SYS_RAW_TO_XSID:
                                    case self::SYS_RID_ORDER:
                                    case self::SYS_ROW_DELTA:
                                    case self::SYS_SC_2_XMLT:
                                    case self::SYS_SYNRCIREDO:
                                    case self::SYSTEM_DEFINED:
                                    case self::SYSTEM:
                                    case self::SYSTIMESTAMP:
                                    case self::SYS_TYPEID:
                                    case self::SYS_UMAKEXML:
                                    case self::SYS_XMLANALYZE:
                                    case self::SYS_XMLCONTAINS:
                                    case self::SYS_XMLCONV:
                                    case self::SYS_XMLEXNSURI:
                                    case self::SYS_XMLGEN:
                                    case self::SYS_XMLI_LOC_ISNODE:
                                    case self::SYS_XMLI_LOC_ISTEXT:
                                    case self::SYS_XMLINSTR:
                                    case self::SYS_XMLLOCATOR_GETSVAL:
                                    case self::SYS_XMLNODEID_GETCID:
                                    case self::SYS_XMLNODEID_GETLOCATOR:
                                    case self::SYS_XMLNODEID_GETOKEY:
                                    case self::SYS_XMLNODEID_GETPATHID:
                                    case self::SYS_XMLNODEID_GETPTRID:
                                    case self::SYS_XMLNODEID_GETRID:
                                    case self::SYS_XMLNODEID_GETSVAL:
                                    case self::SYS_XMLNODEID_GETTID:
                                    case self::SYS_XMLNODEID:
                                    case self::SYS_XMLT_2_SC:
                                    case self::SYS_XMLTRANSLATE:
                                    case self::SYS_XMLTYPE2SQL:
                                    case self::SYS_XQ_ASQLCNV:
                                    case self::SYS_XQ_ATOMCNVCHK:
                                    case self::SYS_XQBASEURI:
                                    case self::SYS_XQCASTABLEERRH:
                                    case self::SYS_XQCODEP2STR:
                                    case self::SYS_XQCODEPEQ:
                                    case self::SYS_XQCON2SEQ:
                                    case self::SYS_XQCONCAT:
                                    case self::SYS_XQDELETE:
                                    case self::SYS_XQDFLTCOLATION:
                                    case self::SYS_XQDOC:
                                    case self::SYS_XQDOCURI:
                                    case self::SYS_XQDURDIV:
                                    case self::SYS_XQED4URI:
                                    case self::SYS_XQENDSWITH:
                                    case self::SYS_XQERRH:
                                    case self::SYS_XQERR:
                                    case self::SYS_XQESHTMLURI:
                                    case self::SYS_XQEXLOBVAL:
                                    case self::SYS_XQEXSTWRP:
                                    case self::SYS_XQEXTRACT:
                                    case self::SYS_XQEXTRREF:
                                    case self::SYS_XQEXVAL:
                                    case self::SYS_XQFB2STR:
                                    case self::SYS_XQFNBOOL:
                                    case self::SYS_XQFNCMP:
                                    case self::SYS_XQFNDATIM:
                                    case self::SYS_XQFNLNAME:
                                    case self::SYS_XQFNNM:
                                    case self::SYS_XQFNNSURI:
                                    case self::SYS_XQFNPREDTRUTH:
                                    case self::SYS_XQFNQNM:
                                    case self::SYS_XQFNROOT:
                                    case self::SYS_XQFORMATNUM:
                                    case self::SYS_XQFTCONTAIN:
                                    case self::SYS_XQFUNCR:
                                    case self::SYS_XQGETCONTENT:
                                    case self::SYS_XQINDXOF:
                                    case self::SYS_XQINSERT:
                                    case self::SYS_XQINSPFX:
                                    case self::SYS_XQIRI2URI:
                                    case self::SYS_XQLANG:
                                    case self::SYS_XQLLNMFRMQNM:
                                    case self::SYS_XQMKNODEREF:
                                    case self::SYS_XQNILLED:
                                    case self::SYS_XQNODENAME:
                                    case self::SYS_XQNORMSPACE:
                                    case self::SYS_XQNORMUCODE:
                                    case self::SYS_XQ_NRNG:
                                    case self::SYS_XQNSP4PFX:
                                    case self::SYS_XQNSPFRMQNM:
                                    case self::SYS_XQPFXFRMQNM:
                                    case self::SYS_XQ_PKSQL2XML:
                                    case self::SYS_XQPOLYABS:
                                    case self::SYS_XQPOLYADD:
                                    case self::SYS_XQPOLYCEL:
                                    case self::SYS_XQPOLYCSTBL:
                                    case self::SYS_XQPOLYCST:
                                    case self::SYS_XQPOLYDIV:
                                    case self::SYS_XQPOLYFLR:
                                    case self::SYS_XQPOLYMOD:
                                    case self::SYS_XQPOLYMUL:
                                    case self::SYS_XQPOLYRND:
                                    case self::SYS_XQPOLYSQRT:
                                    case self::SYS_XQPOLYSUB:
                                    case self::SYS_XQPOLYUMUS:
                                    case self::SYS_XQPOLYUPLS:
                                    case self::SYS_XQPOLYVEQ:
                                    case self::SYS_XQPOLYVGE:
                                    case self::SYS_XQPOLYVGT:
                                    case self::SYS_XQPOLYVLE:
                                    case self::SYS_XQPOLYVLT:
                                    case self::SYS_XQPOLYVNE:
                                    case self::SYS_XQREF2VAL:
                                    case self::SYS_XQRENAME:
                                    case self::SYS_XQREPLACE:
                                    case self::SYS_XQRESVURI:
                                    case self::SYS_XQRNDHALF2EVN:
                                    case self::SYS_XQRSLVQNM:
                                    case self::SYS_XQRYENVPGET:
                                    case self::SYS_XQRYVARGET:
                                    case self::SYS_XQRYWRP:
                                    case self::SYS_XQSEQ2CON4XC:
                                    case self::SYS_XQSEQ2CON:
                                    case self::SYS_XQSEQDEEPEQ:
                                    case self::SYS_XQSEQINSB:
                                    case self::SYS_XQSEQRM:
                                    case self::SYS_XQSEQRVS:
                                    case self::SYS_XQSEQSUB:
                                    case self::SYS_XQSEQTYPMATCH:
                                    case self::SYS_XQSTARTSWITH:
                                    case self::SYS_XQSTATBURI:
                                    case self::SYS_XQSTR2CODEP:
                                    case self::SYS_XQSTRJOIN:
                                    case self::SYS_XQSUBSTRAFT:
                                    case self::SYS_XQSUBSTRBEF:
                                    case self::SYS_XQTOKENIZE:
                                    case self::SYS_XQTREATAS:
                                    case self::SYS_XQ_UPKXML2SQL:
                                    case self::SYS_XQXFORM:
                                    case self::SYS_XSID_TO_RAW:
                                    case self::SYS_ZMAP_FILTER:
                                    case self::SYS_ZMAP_REFRESH:
                                    case self::TABLE_LOOKUP_BY_NL:
                                    case self::TABLESPACE_NO:
                                    case self::TABLESPACE:
                                    case self::TABLES:
                                    case self::TABLE_STATS:
                                    case self::TABLE:
                                    case self::TABNO:
                                    case self::TAG:
                                    case self::TANH:
                                    case self::TAN:
                                    case self::TBLORIDXPARTNUM:
                                    case self::TEMPFILE:
                                    case self::TEMPLATE:
                                    case self::TEMPORARY:
                                    case self::TEMP_TABLE:
                                    case self::TEST:
                                    case self::TEXT:
                                    case self::THAN:
                                    case self::THEN:
                                    case self::THE:
                                    case self::THREAD:
                                    case self::THROUGH:
                                    case self::TIER:
                                    case self::TIES:
                                    case self::TIMEOUT:
                                    case self::TIMESTAMP_LTZ_UNCONSTRAINED:
                                    case self::TIMESTAMP:
                                    case self::TIMESTAMP_TZ_UNCONSTRAINED:
                                    case self::TIMESTAMP_UNCONSTRAINED:
                                    case self::TIMES:
                                    case self::TIME:
                                    case self::TIMEZONE_ABBR:
                                    case self::TIMEZONE_HOUR:
                                    case self::TIMEZONE_MINUTE:
                                    case self::TIMEZONE_OFFSET:
                                    case self::TIMEZONE_REGION:
                                    case self::TIME_ZONE:
                                    case self::TIV_GB:
                                    case self::TIV_SSF:
                                    case self::TO_ACLID:
                                    case self::TO_BINARY_DOUBLE:
                                    case self::TO_BINARY_FLOAT:
                                    case self::TO_BLOB:
                                    case self::TO_CLOB:
                                    case self::TO_DSINTERVAL:
                                    case self::TO_LOB:
                                    case self::TO_MULTI_BYTE:
                                    case self::TO_NCHAR:
                                    case self::TO_NCLOB:
                                    case self::TO_NUMBER:
                                    case self::TOPLEVEL:
                                    case self::TO_SINGLE_BYTE:
                                    case self::TO_TIMESTAMP:
                                    case self::TO_TIMESTAMP_TZ:
                                    case self::TO_TIME:
                                    case self::TO_TIME_TZ:
                                    case self::TO_YMINTERVAL:
                                    case self::TRACE:
                                    case self::TRACING:
                                    case self::TRACKING:
                                    case self::TRAILING:
                                    case self::TRANSACTION:
                                    case self::TRANSFORM_DISTINCT_AGG:
                                    case self::TRANSITIONAL:
                                    case self::TRANSITION:
                                    case self::TRANSLATE:
                                    case self::TRANSLATION:
                                    case self::TREAT:
                                    case self::TRIGGERS:
                                    case self::TRIGGER:
                                    case self::TRUE:
                                    case self::TRUNCATE:
                                    case self::TRUNC:
                                    case self::TRUSTED:
                                    case self::TRUST:
                                    case self::TUNING:
                                    case self::TX:
                                    case self::TYPES:
                                    case self::TYPE:
                                    case self::TZ_OFFSET:
                                    case self::UB2:
                                    case self::UBA:
                                    case self::UCS2:
                                    case self::UID:
                                    case self::UNARCHIVED:
                                    case self::UNBOUNDED:
                                    case self::UNBOUND:
                                    case self::UNCONDITIONAL:
                                    case self::UNDER:
                                    case self::UNDO:
                                    case self::UNDROP:
                                    case self::UNIFORM:
                                    case self::UNISTR:
                                    case self::UNLIMITED:
                                    case self::UNLOAD:
                                    case self::UNLOCK:
                                    case self::UNMATCHED:
                                    case self::UNNEST_INNERJ_DISTINCT_VIEW:
                                    case self::UNNEST_NOSEMIJ_NODISTINCTVIEW:
                                    case self::UNNEST_SEMIJ_VIEW:
                                    case self::UNNEST:
                                    case self::UNPACKED:
                                    case self::UNPIVOT:
                                    case self::UNPLUG:
                                    case self::UNPROTECTED:
                                    case self::UNQUIESCE:
                                    case self::UNRECOVERABLE:
                                    case self::UNRESTRICTED:
                                    case self::UNSUBSCRIBE:
                                    case self::UNTIL:
                                    case self::UNUSABLE:
                                    case self::UNUSED:
                                    case self::UPDATABLE:
                                    case self::UPDATED:
                                    case self::UPDATEXML:
                                    case self::UPD_INDEXES:
                                    case self::UPD_JOININDEX:
                                    case self::UPGRADE:
                                    case self::UPPER:
                                    case self::UPSERT:
                                    case self::UROWID:
                                    case self::USABLE:
                                    case self::USAGE:
                                    case self::USE_ANTI:
                                    case self::USE_CONCAT:
                                    case self::USE_CUBE:
                                    case self::USE_HASH_AGGREGATION:
                                    case self::USE_HASH_GBY_FOR_PUSHDOWN:
                                    case self::USE_HASH:
                                    case self::USE_HIDDEN_PARTITIONS:
                                    case self::USE_INVISIBLE_INDEXES:
                                    case self::USE_MERGE_CARTESIAN:
                                    case self::USE_MERGE:
                                    case self::USE_NL:
                                    case self::USE_NL_WITH_INDEX:
                                    case self::USE_PRIVATE_OUTLINES:
                                    case self::USER_DATA:
                                    case self::USER_DEFINED:
                                    case self::USERENV:
                                    case self::USERGROUP:
                                    case self::USER_RECYCLEBIN:
                                    case self::USERS:
                                    case self::USER_TABLESPACES:
                                    case self::USER:
                                    case self::USE_SEMI:
                                    case self::USE_STORED_OUTLINES:
                                    case self::USE_TTT_FOR_GSETS:
                                    case self::USE:
                                    case self::USE_VECTOR_AGGREGATION:
                                    case self::USE_WEAK_NAME_RESL:
                                    case self::USING_NO_EXPAND:
                                    case self::USING:
                                    case self::UTF16BE:
                                    case self::UTF16LE:
                                    case self::UTF32:
                                    case self::UTF8:
                                    case self::V1:
                                    case self::V2:
                                    case self::VALIDATE:
                                    case self::VALIDATION:
                                    case self::VALID_TIME_END:
                                    case self::VALUE:
                                    case self::VARCHAR2:
                                    case self::VARCHAR:
                                    case self::VARIABLE:
                                    case self::VAR_POP:
                                    case self::VARRAYS:
                                    case self::VARRAY:
                                    case self::VAR_SAMP:
                                    case self::VARYING:
                                    case self::VECTOR_READ_TRACE:
                                    case self::VECTOR_READ:
                                    case self::VECTOR_TRANSFORM_DIMS:
                                    case self::VECTOR_TRANSFORM_FACT:
                                    case self::VECTOR_TRANSFORM:
                                    case self::VERIFIER:
                                    case self::VERIFY:
                                    case self::VERSIONING:
                                    case self::VERSIONS_ENDSCN:
                                    case self::VERSIONS_ENDTIME:
                                    case self::VERSIONS_OPERATION:
                                    case self::VERSIONS_STARTSCN:
                                    case self::VERSIONS_STARTTIME:
                                    case self::VERSIONS:
                                    case self::VERSIONS_XID:
                                    case self::VERSION:
                                    case self::VIOLATION:
                                    case self::VIRTUAL:
                                    case self::VISIBILITY:
                                    case self::VISIBLE:
                                    case self::VOLUME:
                                    case self::VSIZE:
                                    case self::WAIT:
                                    case self::WALLET:
                                    case self::WARNING:
                                    case self::WEEKS:
                                    case self::WEEK:
                                    case self::WELLFORMED:
                                    case self::WHENEVER:
                                    case self::WHEN:
                                    case self::WHILE:
                                    case self::WHITESPACE:
                                    case self::WIDTH_BUCKET:
                                    case self::WITHIN:
                                    case self::WITHOUT:
                                    case self::WITH_PLSQL:
                                    case self::WORK:
                                    case self::WRAPPED:
                                    case self::WRAPPER:
                                    case self::WRITE:
                                    case self::XDB_FASTPATH_INSERT:
                                    case self::X_DYN_PRUNE:
                                    case self::XID:
                                    case self::XML2OBJECT:
                                    case self::XMLAGG:
                                    case self::XMLATTRIBUTES:
                                    case self::XMLCAST:
                                    case self::XMLCDATA:
                                    case self::XMLCOLATTVAL:
                                    case self::XMLCOMMENT:
                                    case self::XMLCONCAT:
                                    case self::XMLDIFF:
                                    case self::XML_DML_RWT_STMT:
                                    case self::XMLELEMENT:
                                    case self::XMLEXISTS2:
                                    case self::XMLEXISTS:
                                    case self::XMLFOREST:
                                    case self::XMLINDEX_REWRITE_IN_SELECT:
                                    case self::XMLINDEX_REWRITE:
                                    case self::XMLINDEX_SEL_IDX_TBL:
                                    case self::XMLISNODE:
                                    case self::XMLISVALID:
                                    case self::XMLNAMESPACES:
                                    case self::XMLPARSE:
                                    case self::XMLPATCH:
                                    case self::XMLPI:
                                    case self::XMLQUERYVAL:
                                    case self::XMLQUERY:
                                    case self::XMLROOT:
                                    case self::XMLSCHEMA:
                                    case self::XMLSERIALIZE:
                                    case self::XMLTABLE:
                                    case self::XMLTRANSFORMBLOB:
                                    case self::XMLTRANSFORM:
                                    case self::XMLTYPE:
                                    case self::XML:
                                    case self::XPATHTABLE:
                                    case self::XS_SYS_CONTEXT:
                                    case self::XS:
                                    case self::YEARS:
                                    case self::YEAR:
                                    case self::YES:
                                    case self::YMINTERVAL_UNCONSTRAINED:
                                    case self::ZONEMAP:
                                    case self::ZONE:
                                    case self::PREDICTION:
                                    case self::PREDICTION_BOUNDS:
                                    case self::PREDICTION_COST:
                                    case self::PREDICTION_DETAILS:
                                    case self::PREDICTION_PROBABILITY:
                                    case self::PREDICTION_SET:
                                    case self::CUME_DIST:
                                    case self::DENSE_RANK:
                                    case self::LISTAGG:
                                    case self::PERCENT_RANK:
                                    case self::PERCENTILE_CONT:
                                    case self::PERCENTILE_DISC:
                                    case self::RANK:
                                    case self::AVG:
                                    case self::CORR:
                                    case self::COVAR_:
                                    case self::LAG:
                                    case self::LEAD:
                                    case self::MAX:
                                    case self::MEDIAN:
                                    case self::MIN:
                                    case self::NTILE:
                                    case self::NVL:
                                    case self::RATIO_TO_REPORT:
                                    case self::REGR_:
                                    case self::ROUND:
                                    case self::ROW_NUMBER:
                                    case self::SUBSTR:
                                    case self::TO_CHAR:
                                    case self::TRIM:
                                    case self::SUM:
                                    case self::STDDEV:
                                    case self::VAR_:
                                    case self::VARIANCE:
                                    case self::LEAST:
                                    case self::GREATEST:
                                    case self::TO_DATE:
                                    case self::PERIOD:
                                    case self::REGULAR_ID:
                                        $this->setState(7426);
                                        $this->tablespace();
                                        break;

                                    case self::DEFAULT:
                                        $this->setState(7427);
                                        $this->match(self::DEFAULT);
                                        break;

                                    default:
                                        throw new NoViableAltException($this);
                                }
                                break;

                            case self::COMPRESS:
                            case self::NOCOMPRESS:
                                $this->setState(7430);
                                $this->key_compression();
                                break;

                            case self::NOSORT:
                            case self::SORT:
                                $this->setState(7431);
                                $this->sort_or_nosort();
                                break;

                            case self::REVERSE:
                                $this->setState(7432);
                                $this->match(self::REVERSE);
                                break;

                            case self::INVISIBLE:
                            case self::VISIBLE:
                                $this->setState(7433);
                                $this->visible_or_invisible();
                                break;

                            case self::NOPARALLEL:
                            case self::PARALLEL:
                                $this->setState(7434);
                                $this->parallel_clause();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(7437);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 924, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function sort_or_nosort(): Context\Sort_or_nosortContext
    {
        $localContext = new Context\Sort_or_nosortContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 770, self::RULE_sort_or_nosort);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7439);

            $_la = $this->input->LA(1);

            if (!($_la === self::NOSORT || $_la === self::SORT)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function exceptions_clause(): Context\Exceptions_clauseContext
    {
        $localContext = new Context\Exceptions_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 772, self::RULE_exceptions_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7441);
            $this->match(self::EXCEPTIONS);
            $this->setState(7442);
            $this->match(self::INTO);
            $this->setState(7443);
            $this->tableview_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function move_table_clause(): Context\Move_table_clauseContext
    {
        $localContext = new Context\Move_table_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 774, self::RULE_move_table_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7445);
            $this->match(self::MOVE);
            $this->setState(7447);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ONLINE) {
                $this->setState(7446);
                $this->match(self::ONLINE);
            }
            $this->setState(7450);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOGGING || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                $this->setState(7449);
                $this->segment_attributes_clause();
            }
            $this->setState(7453);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 927, $this->ctx)) {
                case 1:
                    $this->setState(7452);
                    $this->table_compression();
                    break;
            }
            $this->setState(7456);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMPRESS || $_la === self::MAPPING || $_la === self::NOCOMPRESS || $_la === self::NOMAPPING || $_la === self::PCTTHRESHOLD) {
                $this->setState(7455);
                $this->index_org_table_clause();
            }
            $this->setState(7464);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOB || $_la === self::VARRAY) {
                $this->setState(7460);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(7460);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::LOB:
                            $this->setState(7458);
                            $this->lob_storage_clause();
                            break;

                        case self::VARRAY:
                            $this->setState(7459);
                            $this->varray_col_properties();
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(7462);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::LOB || $_la === self::VARRAY);
            }
            $this->setState(7467);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOPARALLEL || $_la === self::PARALLEL) {
                $this->setState(7466);
                $this->parallel_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function index_org_table_clause(): Context\Index_org_table_clauseContext
    {
        $localContext = new Context\Index_org_table_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 776, self::RULE_index_org_table_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7473);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::MAPPING:
                case self::NOMAPPING:
                    $this->setState(7469);
                    $this->mapping_table_clause();
                    break;

                case self::PCTTHRESHOLD:
                    $this->setState(7470);
                    $this->match(self::PCTTHRESHOLD);
                    $this->setState(7471);
                    $this->match(self::UNSIGNED_INTEGER);
                    break;

                case self::COMPRESS:
                case self::NOCOMPRESS:
                    $this->setState(7472);
                    $this->key_compression();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(7476);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INCLUDING || $_la === self::OVERFLOW) {
                $this->setState(7475);
                $this->index_org_overflow_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function mapping_table_clause(): Context\Mapping_table_clauseContext
    {
        $localContext = new Context\Mapping_table_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 778, self::RULE_mapping_table_clause);

        try {
            $this->setState(7481);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::MAPPING:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7478);
                    $this->match(self::MAPPING);
                    $this->setState(7479);
                    $this->match(self::TABLE);
                    break;

                case self::NOMAPPING:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7480);
                    $this->match(self::NOMAPPING);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function key_compression(): Context\Key_compressionContext
    {
        $localContext = new Context\Key_compressionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 780, self::RULE_key_compression);

        try {
            $this->setState(7486);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::NOCOMPRESS:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7483);
                    $this->match(self::NOCOMPRESS);
                    break;

                case self::COMPRESS:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7484);
                    $this->match(self::COMPRESS);
                    $this->setState(7485);
                    $this->match(self::UNSIGNED_INTEGER);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function index_org_overflow_clause(): Context\Index_org_overflow_clauseContext
    {
        $localContext = new Context\Index_org_overflow_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 782, self::RULE_index_org_overflow_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7490);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INCLUDING) {
                $this->setState(7488);
                $this->match(self::INCLUDING);
                $this->setState(7489);
                $this->column_name();
            }
            $this->setState(7492);
            $this->match(self::OVERFLOW);
            $this->setState(7494);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOGGING || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                $this->setState(7493);
                $this->segment_attributes_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function column_clauses(): Context\Column_clausesContext
    {
        $localContext = new Context\Column_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 784, self::RULE_column_clauses);

        try {
            $this->setState(7500);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 939, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7496);
                    $this->add_modify_drop_column_clauses();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7497);
                    $this->rename_column_clause();
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7498);
                    $this->modify_collection_retrieval();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(7499);
                    $this->modify_lob_storage_clause();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function modify_collection_retrieval(): Context\Modify_collection_retrievalContext
    {
        $localContext = new Context\Modify_collection_retrievalContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 786, self::RULE_modify_collection_retrieval);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7502);
            $this->match(self::MODIFY);
            $this->setState(7503);
            $this->match(self::NESTED);
            $this->setState(7504);
            $this->match(self::TABLE);
            $this->setState(7505);
            $this->collection_item();
            $this->setState(7506);
            $this->match(self::RETURN);
            $this->setState(7507);
            $this->match(self::AS);
            $this->setState(7508);

            $_la = $this->input->LA(1);

            if (!($_la === self::LOCATOR || $_la === self::VALUE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function collection_item(): Context\Collection_itemContext
    {
        $localContext = new Context\Collection_itemContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 788, self::RULE_collection_item);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7510);
            $this->tableview_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function rename_column_clause(): Context\Rename_column_clauseContext
    {
        $localContext = new Context\Rename_column_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 790, self::RULE_rename_column_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7512);
            $this->match(self::RENAME);
            $this->setState(7513);
            $this->match(self::COLUMN);
            $this->setState(7514);
            $this->old_column_name();
            $this->setState(7515);
            $this->match(self::TO);
            $this->setState(7516);
            $this->new_column_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function old_column_name(): Context\Old_column_nameContext
    {
        $localContext = new Context\Old_column_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 792, self::RULE_old_column_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7518);
            $this->column_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function new_column_name(): Context\New_column_nameContext
    {
        $localContext = new Context\New_column_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 794, self::RULE_new_column_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7520);
            $this->column_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_modify_drop_column_clauses(): Context\Add_modify_drop_column_clausesContext
    {
        $localContext = new Context\Add_modify_drop_column_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 796, self::RULE_add_modify_drop_column_clauses);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7525);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(7525);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::ADD:
                        $this->setState(7522);
                        $this->add_column_clause();
                        break;

                    case self::MODIFY:
                        $this->setState(7523);
                        $this->modify_column_clauses();
                        break;

                    case self::DROP:
                    case self::SET:
                        $this->setState(7524);
                        $this->drop_column_clause();
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(7527);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::ADD || $_la === self::DROP || $_la === self::MODIFY || $_la === self::SET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_column_clause(): Context\Drop_column_clauseContext
    {
        $localContext = new Context\Drop_column_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 798, self::RULE_drop_column_clause);

        try {
            $this->setState(7591);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 952, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7529);
                    $this->match(self::SET);
                    $this->setState(7530);
                    $this->match(self::UNUSED);
                    $this->setState(7544);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::COLUMN:
                            $this->setState(7531);
                            $this->match(self::COLUMN);
                            $this->setState(7532);
                            $this->column_name();
                            break;

                        case self::LEFT_PAREN:
                            $this->setState(7533);
                            $this->match(self::LEFT_PAREN);
                            $this->setState(7534);
                            $this->column_name();
                            $this->setState(7539);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            while ($_la === self::COMMA) {
                                $this->setState(7535);
                                $this->match(self::COMMA);
                                $this->setState(7536);
                                $this->column_name();
                                $this->setState(7541);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            }
                            $this->setState(7542);
                            $this->match(self::RIGHT_PAREN);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(7551);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::CASCADE || $_la === self::INVALIDATE) {
                        $this->setState(7549);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::CASCADE:
                                $this->setState(7546);
                                $this->match(self::CASCADE);
                                $this->setState(7547);
                                $this->match(self::CONSTRAINTS);
                                break;

                            case self::INVALIDATE:
                                $this->setState(7548);
                                $this->match(self::INVALIDATE);
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(7553);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7554);
                    $this->match(self::DROP);
                    $this->setState(7568);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::COLUMN:
                            $this->setState(7555);
                            $this->match(self::COLUMN);
                            $this->setState(7556);
                            $this->column_name();
                            break;

                        case self::LEFT_PAREN:
                            $this->setState(7557);
                            $this->match(self::LEFT_PAREN);
                            $this->setState(7558);
                            $this->column_name();
                            $this->setState(7563);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            while ($_la === self::COMMA) {
                                $this->setState(7559);
                                $this->match(self::COMMA);
                                $this->setState(7560);
                                $this->column_name();
                                $this->setState(7565);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            }
                            $this->setState(7566);
                            $this->match(self::RIGHT_PAREN);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(7575);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::CASCADE || $_la === self::INVALIDATE) {
                        $this->setState(7573);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::CASCADE:
                                $this->setState(7570);
                                $this->match(self::CASCADE);
                                $this->setState(7571);
                                $this->match(self::CONSTRAINTS);
                                break;

                            case self::INVALIDATE:
                                $this->setState(7572);
                                $this->match(self::INVALIDATE);
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(7577);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(7580);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CHECKPOINT) {
                        $this->setState(7578);
                        $this->match(self::CHECKPOINT);
                        $this->setState(7579);
                        $this->match(self::UNSIGNED_INTEGER);
                    }
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7582);
                    $this->match(self::DROP);
                    $this->setState(7587);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::UNUSED:
                            $this->setState(7583);
                            $this->match(self::UNUSED);
                            $this->setState(7584);
                            $this->match(self::COLUMNS);
                            break;

                        case self::COLUMNS:
                            $this->setState(7585);
                            $this->match(self::COLUMNS);
                            $this->setState(7586);
                            $this->match(self::CONTINUE);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }

                    $this->setState(7589);
                    $this->match(self::CHECKPOINT);
                    $this->setState(7590);
                    $this->match(self::UNSIGNED_INTEGER);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function modify_column_clauses(): Context\Modify_column_clausesContext
    {
        $localContext = new Context\Modify_column_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 800, self::RULE_modify_column_clauses);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7593);
            $this->match(self::MODIFY);
            $this->setState(7607);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 954, $this->ctx)) {
                case 1:
                    $this->setState(7594);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7595);
                    $this->modify_col_properties();
                    $this->setState(7600);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7596);
                        $this->match(self::COMMA);
                        $this->setState(7597);
                        $this->modify_col_properties();
                        $this->setState(7602);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(7603);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case 2:
                    $this->setState(7605);
                    $this->modify_col_properties();
                    break;

                case 3:
                    $this->setState(7606);
                    $this->modify_col_substitutable();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function modify_col_properties(): Context\Modify_col_propertiesContext
    {
        $localContext = new Context\Modify_col_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 802, self::RULE_modify_col_properties);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7609);
            $this->column_name();
            $this->setState(7611);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ((((($_la - 108)) & ~0x3f) === 0 && ((1 << ($_la - 108)) & ((1 << (self::BFILE - 108)) | (1 << (self::BINARY_DOUBLE - 108)) | (1 << (self::BINARY_FLOAT - 108)) | (1 << (self::BINARY_INTEGER - 108)) | (1 << (self::BLOB - 108)) | (1 << (self::BOOLEAN - 108)))) !== 0) || (((($_la - 175)) & ~0x3f) === 0 && ((1 << ($_la - 175)) & ((1 << (self::CHARACTER - 175)) | (1 << (self::CHAR - 175)) | (1 << (self::CLOB - 175)))) !== 0) || (((($_la - 327)) & ~0x3f) === 0 && ((1 << ($_la - 327)) & ((1 << (self::DATE - 327)) | (1 << (self::DAY - 327)) | (1 << (self::DEC - 327)) | (1 << (self::DECIMAL - 327)))) !== 0) || $_la === self::DOUBLE || $_la === self::DSINTERVAL_UNCONSTRAINED || $_la === self::FLOAT || $_la === self::HOUR || (((($_la - 682)) & ~0x3f) === 0 && ((1 << ($_la - 682)) & ((1 << (self::INTEGER - 682)) | (1 << (self::INTERVAL - 682)) | (1 << (self::INT - 682)))) !== 0) || (((($_la - 788)) & ~0x3f) === 0 && ((1 << ($_la - 788)) & ((1 << (self::LONG - 788)) | (1 << (self::MINUTE - 788)) | (1 << (self::MLSLABEL - 788)))) !== 0) || (((($_la - 868)) & ~0x3f) === 0 && ((1 << ($_la - 868)) & ((1 << (self::MONTH - 868)) | (1 << (self::NATURAL - 868)) | (1 << (self::NATURALN - 868)) | (1 << (self::NCHAR - 868)) | (1 << (self::NCLOB - 868)))) !== 0) || (((($_la - 1099)) & ~0x3f) === 0 && ((1 << ($_la - 1099)) & ((1 << (self::NUMBER - 1099)) | (1 << (self::NUMERIC - 1099)) | (1 << (self::NVARCHAR2 - 1099)))) !== 0) || (((($_la - 1259)) & ~0x3f) === 0 && ((1 << ($_la - 1259)) & ((1 << (self::PLS_INTEGER - 1259)) | (1 << (self::POSITIVEN - 1259)) | (1 << (self::POSITIVE - 1259)))) !== 0) || $_la === self::RAW || $_la === self::REAL || $_la === self::ROWID || $_la === self::SECOND || (((($_la - 1528)) & ~0x3f) === 0 && ((1 << ($_la - 1528)) & ((1 << (self::SIGNTYPE - 1528)) | (1 << (self::SIMPLE_INTEGER - 1528)) | (1 << (self::SMALLINT - 1528)))) !== 0) || $_la === self::STRING || (((($_la - 1932)) & ~0x3f) === 0 && ((1 << ($_la - 1932)) & ((1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1932)) | (1 << (self::TIMESTAMP - 1932)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1932)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1932)) | (1 << (self::TIMEZONE_ABBR - 1932)) | (1 << (self::TIMEZONE_HOUR - 1932)) | (1 << (self::TIMEZONE_MINUTE - 1932)) | (1 << (self::TIMEZONE_REGION - 1932)))) !== 0) || (((($_la - 2032)) & ~0x3f) === 0 && ((1 << ($_la - 2032)) & ((1 << (self::UROWID - 2032)) | (1 << (self::VARCHAR2 - 2032)) | (1 << (self::VARCHAR - 2032)))) !== 0) || $_la === self::YEAR || $_la === self::YMINTERVAL_UNCONSTRAINED) {
                $this->setState(7610);
                $this->datatype();
            }
            $this->setState(7615);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT) {
                $this->setState(7613);
                $this->match(self::DEFAULT);
                $this->setState(7614);
                $this->expression();
            }
            $this->setState(7620);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ENCRYPT:
                    $this->setState(7617);
                    $this->match(self::ENCRYPT);
                    $this->setState(7618);
                    $this->encryption_spec();
                    break;

                case self::DECRYPT:
                    $this->setState(7619);
                    $this->match(self::DECRYPT);
                    break;

                case self::ADD:
                case self::CHECK:
                case self::CONSTRAINT:
                case self::DISABLE:
                case self::DROP:
                case self::ENABLE:
                case self::LOB:
                case self::MODIFY:
                case self::NOT:
                case self::NULL_:
                case self::PRIMARY:
                case self::REFERENCES:
                case self::SET:
                case self::UNIQUE:
                case self::RIGHT_PAREN:
                case self::COMMA:
                case self::SEMICOLON:
                    break;

                default:
                    break;
            }
            $this->setState(7625);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::CHECK || $_la === self::CONSTRAINT || $_la === self::NOT || $_la === self::NULL_ || $_la === self::PRIMARY || $_la === self::REFERENCES || $_la === self::UNIQUE) {
                $this->setState(7622);
                $this->inline_constraint();
                $this->setState(7627);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(7629);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOB) {
                $this->setState(7628);
                $this->lob_storage_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function modify_col_substitutable(): Context\Modify_col_substitutableContext
    {
        $localContext = new Context\Modify_col_substitutableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 804, self::RULE_modify_col_substitutable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7631);
            $this->match(self::COLUMN);
            $this->setState(7632);
            $this->column_name();
            $this->setState(7634);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(7633);
                $this->match(self::NOT);
            }
            $this->setState(7636);
            $this->match(self::SUBSTITUTABLE);
            $this->setState(7637);
            $this->match(self::AT);
            $this->setState(7638);
            $this->match(self::ALL);
            $this->setState(7639);
            $this->match(self::LEVELS);
            $this->setState(7641);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FORCE) {
                $this->setState(7640);
                $this->match(self::FORCE);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_column_clause(): Context\Add_column_clauseContext
    {
        $localContext = new Context\Add_column_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 806, self::RULE_add_column_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7643);
            $this->match(self::ADD);
            $this->setState(7665);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LEFT_PAREN:
                    $this->setState(7644);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7647);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 962, $this->ctx)) {
                        case 1:
                            $this->setState(7645);
                            $this->column_definition();
                            break;

                        case 2:
                            $this->setState(7646);
                            $this->virtual_column_definition();
                            break;
                    }
                    $this->setState(7656);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7649);
                        $this->match(self::COMMA);
                        $this->setState(7652);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 963, $this->ctx)) {
                            case 1:
                                $this->setState(7650);
                                $this->column_definition();
                                break;

                            case 2:
                                $this->setState(7651);
                                $this->virtual_column_definition();
                                break;
                        }
                        $this->setState(7658);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(7659);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case self::ABORT:
                case self::ABS:
                case self::ACCESS:
                case self::ACCESSED:
                case self::ACCOUNT:
                case self::ACL:
                case self::ACOS:
                case self::ACTION:
                case self::ACTIONS:
                case self::ACTIVATE:
                case self::ACTIVE:
                case self::ACTIVE_COMPONENT:
                case self::ACTIVE_DATA:
                case self::ACTIVE_FUNCTION:
                case self::ACTIVE_TAG:
                case self::ACTIVITY:
                case self::ADAPTIVE_PLAN:
                case self::ADD:
                case self::ADD_COLUMN:
                case self::ADD_GROUP:
                case self::ADD_MONTHS:
                case self::ADJ_DATE:
                case self::ADMIN:
                case self::ADMINISTER:
                case self::ADMINISTRATOR:
                case self::ADVANCED:
                case self::ADVISE:
                case self::ADVISOR:
                case self::AFD_DISKSTRING:
                case self::AFTER:
                case self::AGENT:
                case self::AGGREGATE:
                case self::A_LETTER:
                case self::ALIAS:
                case self::ALLOCATE:
                case self::ALLOW:
                case self::ALL_ROWS:
                case self::ALWAYS:
                case self::ANALYZE:
                case self::ANCILLARY:
                case self::AND_EQUAL:
                case self::ANOMALY:
                case self::ANSI_REARCH:
                case self::ANTIJOIN:
                case self::ANYSCHEMA:
                case self::APPEND:
                case self::APPENDCHILDXML:
                case self::APPEND_VALUES:
                case self::APPLICATION:
                case self::APPLY:
                case self::APPROX_COUNT_DISTINCT:
                case self::ARCHIVAL:
                case self::ARCHIVE:
                case self::ARCHIVED:
                case self::ARCHIVELOG:
                case self::ARRAY:
                case self::ASCII:
                case self::ASCIISTR:
                case self::ASIN:
                case self::ASIS:
                case self::ASSEMBLY:
                case self::ASSIGN:
                case self::ASSOCIATE:
                case self::ASYNC:
                case self::ASYNCHRONOUS:
                case self::ATAN2:
                case self::ATAN:
                case self::AT:
                case self::ATTRIBUTE:
                case self::ATTRIBUTES:
                case self::AUTHENTICATED:
                case self::AUTHENTICATION:
                case self::AUTHID:
                case self::AUTHORIZATION:
                case self::AUTOALLOCATE:
                case self::AUTO:
                case self::AUTOEXTEND:
                case self::AUTO_LOGIN:
                case self::AUTOMATIC:
                case self::AUTONOMOUS_TRANSACTION:
                case self::AUTO_REOPTIMIZE:
                case self::AVAILABILITY:
                case self::AVRO:
                case self::BACKGROUND:
                case self::BACKUP:
                case self::BASIC:
                case self::BASICFILE:
                case self::BATCH:
                case self::BATCHSIZE:
                case self::BATCH_TABLE_ACCESS_BY_ROWID:
                case self::BECOME:
                case self::BEFORE:
                case self::BEGIN:
                case self::BEGINNING:
                case self::BEGIN_OUTLINE_DATA:
                case self::BEHALF:
                case self::BEQUEATH:
                case self::BFILE:
                case self::BFILENAME:
                case self::BIGFILE:
                case self::BINARY:
                case self::BINARY_DOUBLE:
                case self::BINARY_DOUBLE_INFINITY:
                case self::BINARY_DOUBLE_NAN:
                case self::BINARY_FLOAT:
                case self::BINARY_FLOAT_INFINITY:
                case self::BINARY_FLOAT_NAN:
                case self::BINARY_INTEGER:
                case self::BIND_AWARE:
                case self::BINDING:
                case self::BIN_TO_NUM:
                case self::BITAND:
                case self::BITMAP_AND:
                case self::BITMAP:
                case self::BITMAPS:
                case self::BITMAP_TREE:
                case self::BITS:
                case self::BLOB:
                case self::BLOCK:
                case self::BLOCK_RANGE:
                case self::BLOCKS:
                case self::BLOCKSIZE:
                case self::BODY:
                case self::BOOLEAN:
                case self::BOTH:
                case self::BOUND:
                case self::BRANCH:
                case self::BREADTH:
                case self::BROADCAST:
                case self::BSON:
                case self::BUFFER:
                case self::BUFFER_CACHE:
                case self::BUFFER_POOL:
                case self::BUILD:
                case self::BULK:
                case self::BYPASS_RECURSIVE_CHECK:
                case self::BYPASS_UJVC:
                case self::BYTE:
                case self::CACHE:
                case self::CACHE_CB:
                case self::CACHE_INSTANCES:
                case self::CACHE_TEMP_TABLE:
                case self::CACHING:
                case self::CALCULATED:
                case self::CALLBACK:
                case self::CALL:
                case self::CANCEL:
                case self::CAPACITY:
                case self::CARDINALITY:
                case self::CASCADE:
                case self::CASE:
                case self::CAST:
                case self::CATEGORY:
                case self::CDBDEFAULT:
                case self::CEIL:
                case self::CELL_FLASH_CACHE:
                case self::CERTIFICATE:
                case self::CFILE:
                case self::CHAINED:
                case self::CHANGE:
                case self::CHANGE_DUPKEY_ERROR_INDEX:
                case self::CHARACTER:
                case self::CHAR:
                case self::CHAR_CS:
                case self::CHARTOROWID:
                case self::CHECK_ACL_REWRITE:
                case self::CHECKPOINT:
                case self::CHILD:
                case self::CHOOSE:
                case self::CHR:
                case self::CHUNK:
                case self::CLASS:
                case self::CLASSIFIER:
                case self::CLEANUP:
                case self::CLEAR:
                case self::C_LETTER:
                case self::CLIENT:
                case self::CLOB:
                case self::CLONE:
                case self::CLOSE_CACHED_OPEN_CURSORS:
                case self::CLOSE:
                case self::CLUSTER_BY_ROWID:
                case self::CLUSTER:
                case self::CLUSTER_DETAILS:
                case self::CLUSTER_DISTANCE:
                case self::CLUSTER_ID:
                case self::CLUSTERING:
                case self::CLUSTERING_FACTOR:
                case self::CLUSTER_PROBABILITY:
                case self::CLUSTER_SET:
                case self::COALESCE:
                case self::COALESCE_SQ:
                case self::COARSE:
                case self::CO_AUTH_IND:
                case self::COLD:
                case self::COLLECT:
                case self::COLUMNAR:
                case self::COLUMN_AUTH_INDICATOR:
                case self::COLUMN:
                case self::COLUMNS:
                case self::COLUMN_STATS:
                case self::COLUMN_VALUE:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMMITTED:
                case self::COMMON_DATA:
                case self::COMPACT:
                case self::COMPATIBILITY:
                case self::COMPILE:
                case self::COMPLETE:
                case self::COMPLIANCE:
                case self::COMPONENT:
                case self::COMPONENTS:
                case self::COMPOSE:
                case self::COMPOSITE:
                case self::COMPOSITE_LIMIT:
                case self::COMPOUND:
                case self::COMPUTE:
                case self::CONCAT:
                case self::CON_DBID_TO_ID:
                case self::CONDITIONAL:
                case self::CONDITION:
                case self::CONFIRM:
                case self::CONFORMING:
                case self::CON_GUID_TO_ID:
                case self::CON_ID:
                case self::CON_NAME_TO_ID:
                case self::CONNECT_BY_CB_WHR_ONLY:
                case self::CONNECT_BY_COMBINE_SW:
                case self::CONNECT_BY_COST_BASED:
                case self::CONNECT_BY_ELIM_DUPS:
                case self::CONNECT_BY_FILTERING:
                case self::CONNECT_BY_ISCYCLE:
                case self::CONNECT_BY_ISLEAF:
                case self::CONNECT_BY_ROOT:
                case self::CONNECT_TIME:
                case self::CONSIDER:
                case self::CONSISTENT:
                case self::CONSTANT:
                case self::CONST:
                case self::CONSTRAINT:
                case self::CONSTRAINTS:
                case self::CONSTRUCTOR:
                case self::CONTAINER:
                case self::CONTAINER_DATA:
                case self::CONTAINERS:
                case self::CONTENT:
                case self::CONTENTS:
                case self::CONTEXT:
                case self::CONTINUE:
                case self::CONTROLFILE:
                case self::CON_UID_TO_ID:
                case self::CONVERT:
                case self::COOKIE:
                case self::COPY:
                case self::CORR_K:
                case self::CORR_S:
                case self::CORRUPTION:
                case self::CORRUPT_XID_ALL:
                case self::CORRUPT_XID:
                case self::COS:
                case self::COSH:
                case self::COST:
                case self::COST_XML_QUERY_REWRITE:
                case self::COUNT:
                case self::COVAR_POP:
                case self::COVAR_SAMP:
                case self::CPU_COSTING:
                case self::CPU_PER_CALL:
                case self::CPU_PER_SESSION:
                case self::CRASH:
                case self::CREATE_FILE_DEST:
                case self::CREATE_STORED_OUTLINES:
                case self::CREATION:
                case self::CREDENTIAL:
                case self::CRITICAL:
                case self::CROSS:
                case self::CROSSEDITION:
                case self::CSCONVERT:
                case self::CUBE_AJ:
                case self::CUBE:
                case self::CUBE_GB:
                case self::CUBE_SJ:
                case self::CUME_DISTM:
                case self::CURRENT:
                case self::CURRENT_DATE:
                case self::CURRENT_SCHEMA:
                case self::CURRENT_TIME:
                case self::CURRENT_TIMESTAMP:
                case self::CURRENT_USER:
                case self::CURRENTV:
                case self::CURSOR:
                case self::CURSOR_SHARING_EXACT:
                case self::CURSOR_SPECIFIC_SEGMENT:
                case self::CUSTOMDATUM:
                case self::CV:
                case self::CYCLE:
                case self::DANGLING:
                case self::DATABASE:
                case self::DATA:
                case self::DATAFILE:
                case self::DATAFILES:
                case self::DATAMOVEMENT:
                case self::DATAOBJNO:
                case self::DATAOBJ_TO_MAT_PARTITION:
                case self::DATAOBJ_TO_PARTITION:
                case self::DATAPUMP:
                case self::DATA_SECURITY_REWRITE_LIMIT:
                case self::DATE_MODE:
                case self::DAY:
                case self::DAYS:
                case self::DBA:
                case self::DBA_RECYCLEBIN:
                case self::DBMS_STATS:
                case self::DB_ROLE_CHANGE:
                case self::DBTIMEZONE:
                case self::DB_UNIQUE_NAME:
                case self::DB_VERSION:
                case self::DDL:
                case self::DEALLOCATE:
                case self::DEBUG:
                case self::DEBUGGER:
                case self::DEC:
                case self::DECIMAL:
                case self::DECLARE:
                case self::DECOMPOSE:
                case self::DECORRELATE:
                case self::DECR:
                case self::DECREMENT:
                case self::DECRYPT:
                case self::DEDUPLICATE:
                case self::DEFAULTS:
                case self::DEFERRABLE:
                case self::DEFERRED:
                case self::DEFINED:
                case self::DEFINE:
                case self::DEFINER:
                case self::DEGREE:
                case self::DELAY:
                case self::DELEGATE:
                case self::DELETE_ALL:
                case self::DELETE:
                case self::DELETEXML:
                case self::DEMAND:
                case self::DENSE_RANKM:
                case self::DEPENDENT:
                case self::DEPTH:
                case self::DEQUEUE:
                case self::DEREF:
                case self::DEREF_NO_REWRITE:
                case self::DESTROY:
                case self::DETACHED:
                case self::DETERMINES:
                case self::DETERMINISTIC:
                case self::DICTIONARY:
                case self::DIMENSION:
                case self::DIMENSIONS:
                case self::DIRECT_LOAD:
                case self::DIRECTORY:
                case self::DIRECT_PATH:
                case self::DISABLE_ALL:
                case self::DISABLE:
                case self::DISABLE_PARALLEL_DML:
                case self::DISABLE_PRESET:
                case self::DISABLE_RPKE:
                case self::DISALLOW:
                case self::DISASSOCIATE:
                case self::DISCARD:
                case self::DISCONNECT:
                case self::DISK:
                case self::DISKGROUP:
                case self::DISKS:
                case self::DISMOUNT:
                case self::DISTINGUISHED:
                case self::DISTRIBUTED:
                case self::DISTRIBUTE:
                case self::DML:
                case self::DML_UPDATE:
                case self::DOCFIDELITY:
                case self::DOCUMENT:
                case self::DOMAIN_INDEX_FILTER:
                case self::DOMAIN_INDEX_NO_SORT:
                case self::DOMAIN_INDEX_SORT:
                case self::DOUBLE:
                case self::DOWNGRADE:
                case self::DRIVING_SITE:
                case self::DROP_COLUMN:
                case self::DROP_GROUP:
                case self::DSINTERVAL_UNCONSTRAINED:
                case self::DST_UPGRADE_INSERT_CONV:
                case self::DUMP:
                case self::DUPLICATE:
                case self::DV:
                case self::DYNAMIC:
                case self::DYNAMIC_SAMPLING:
                case self::DYNAMIC_SAMPLING_EST_CDN:
                case self::EACH:
                case self::EDITIONABLE:
                case self::EDITION:
                case self::EDITIONING:
                case self::EDITIONS:
                case self::ELEMENT:
                case self::ELIM_GROUPBY:
                case self::ELIMINATE_JOIN:
                case self::ELIMINATE_OBY:
                case self::ELIMINATE_OUTER_JOIN:
                case self::EM:
                case self::EMPTY_BLOB:
                case self::EMPTY_CLOB:
                case self::EMPTY:
                case self::ENABLE_ALL:
                case self::ENABLE:
                case self::ENABLE_PARALLEL_DML:
                case self::ENABLE_PRESET:
                case self::ENCODING:
                case self::ENCRYPT:
                case self::ENCRYPTION:
                case self::END_OUTLINE_DATA:
                case self::ENFORCED:
                case self::ENFORCE:
                case self::ENQUEUE:
                case self::ENTERPRISE:
                case self::ENTITYESCAPING:
                case self::ENTRY:
                case self::EQUIPART:
                case self::ERR:
                case self::ERROR_ARGUMENT:
                case self::ERROR:
                case self::ERROR_ON_OVERLAP_TIME:
                case self::ERRORS:
                case self::ESCAPE:
                case self::ESTIMATE:
                case self::EVAL:
                case self::EVALNAME:
                case self::EVALUATE:
                case self::EVALUATION:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCEPT:
                case self::EXCEPTION:
                case self::EXCEPTION_INIT:
                case self::EXCEPTIONS:
                case self::EXCHANGE:
                case self::EXCLUDE:
                case self::EXCLUDING:
                case self::EXECUTE:
                case self::EXEMPT:
                case self::EXISTING:
                case self::EXISTS:
                case self::EXISTSNODE:
                case self::EXIT:
                case self::EXPAND_GSET_TO_UNION:
                case self::EXPAND_TABLE:
                case self::EXP:
                case self::EXPIRE:
                case self::EXPLAIN:
                case self::EXPLOSION:
                case self::EXPORT:
                case self::EXPR_CORR_CHECK:
                case self::EXPRESS:
                case self::EXTENDS:
                case self::EXTENT:
                case self::EXTENTS:
                case self::EXTERNAL:
                case self::EXTERNALLY:
                case self::EXTRACTCLOBXML:
                case self::EXTRACT:
                case self::EXTRACTVALUE:
                case self::EXTRA:
                case self::FACILITY:
                case self::FACT:
                case self::FACTOR:
                case self::FACTORIZE_JOIN:
                case self::FAILED:
                case self::FAILED_LOGIN_ATTEMPTS:
                case self::FAILGROUP:
                case self::FAILOVER:
                case self::FAILURE:
                case self::FALSE:
                case self::FAMILY:
                case self::FAR:
                case self::FAST:
                case self::FASTSTART:
                case self::FBTSCAN:
                case self::FEATURE_DETAILS:
                case self::FEATURE_ID:
                case self::FEATURE_SET:
                case self::FEATURE_VALUE:
                case self::FETCH:
                case self::FILE:
                case self::FILE_NAME_CONVERT:
                case self::FILESYSTEM_LIKE_LOGGING:
                case self::FILTER:
                case self::FINAL:
                case self::FINE:
                case self::FINISH:
                case self::FIRST:
                case self::FIRSTM:
                case self::FIRST_ROWS:
                case self::FIRST_VALUE:
                case self::FIXED_VIEW_DATA:
                case self::FLAGGER:
                case self::FLASHBACK:
                case self::FLASH_CACHE:
                case self::FLOAT:
                case self::FLOB:
                case self::FLOOR:
                case self::FLUSH:
                case self::FOLDER:
                case self::FOLLOWING:
                case self::FOLLOWS:
                case self::FORALL:
                case self::FORCE:
                case self::FORCE_XML_QUERY_REWRITE:
                case self::FOREIGN:
                case self::FOREVER:
                case self::FORMAT:
                case self::FORWARD:
                case self::FRAGMENT_NUMBER:
                case self::FREELIST:
                case self::FREELISTS:
                case self::FREEPOOLS:
                case self::FRESH:
                case self::FROM_TZ:
                case self::FULL:
                case self::FULL_OUTER_JOIN_TO_OUTER:
                case self::FUNCTION:
                case self::FUNCTIONS:
                case self::GATHER_OPTIMIZER_STATISTICS:
                case self::GATHER_PLAN_STATISTICS:
                case self::GBY_CONC_ROLLUP:
                case self::GBY_PUSHDOWN:
                case self::GENERATED:
                case self::GET:
                case self::GLOBAL:
                case self::GLOBALLY:
                case self::GLOBAL_NAME:
                case self::GLOBAL_TOPIC_ENABLED:
                case self::GROUP_BY:
                case self::GROUP_ID:
                case self::GROUPING:
                case self::GROUPING_ID:
                case self::GROUPS:
                case self::GUARANTEED:
                case self::GUARANTEE:
                case self::GUARD:
                case self::HASH_AJ:
                case self::HASH:
                case self::HASHKEYS:
                case self::HASH_SJ:
                case self::HEADER:
                case self::HEAP:
                case self::HELP:
                case self::HEXTORAW:
                case self::HEXTOREF:
                case self::HIDDEN_KEYWORD:
                case self::HIDE:
                case self::HIERARCHY:
                case self::HIGH:
                case self::HINTSET_BEGIN:
                case self::HINTSET_END:
                case self::HOT:
                case self::HOUR:
                case self::HWM_BROKERED:
                case self::HYBRID:
                case self::IDENTIFIER:
                case self::IDENTITY:
                case self::IDGENERATORS:
                case self::ID:
                case self::IDLE_TIME:
                case self::IF:
                case self::IGNORE:
                case self::IGNORE_OPTIM_EMBEDDED_HINTS:
                case self::IGNORE_ROW_ON_DUPKEY_INDEX:
                case self::IGNORE_WHERE_CLAUSE:
                case self::ILM:
                case self::IMMEDIATE:
                case self::IMPACT:
                case self::IMPORT:
                case self::INACTIVE:
                case self::INCLUDE:
                case self::INCLUDE_VERSION:
                case self::INCLUDING:
                case self::INCREMENTAL:
                case self::INCREMENT:
                case self::INCR:
                case self::INDENT:
                case self::INDEX_ASC:
                case self::INDEX_COMBINE:
                case self::INDEX_DESC:
                case self::INDEXED:
                case self::INDEXES:
                case self::INDEX_FFS:
                case self::INDEX_FILTER:
                case self::INDEXING:
                case self::INDEX_JOIN:
                case self::INDEX_ROWS:
                case self::INDEX_RRS:
                case self::INDEX_RS_ASC:
                case self::INDEX_RS_DESC:
                case self::INDEX_RS:
                case self::INDEX_SCAN:
                case self::INDEX_SKIP_SCAN:
                case self::INDEX_SS_ASC:
                case self::INDEX_SS_DESC:
                case self::INDEX_SS:
                case self::INDEX_STATS:
                case self::INDEXTYPE:
                case self::INDEXTYPES:
                case self::INDICATOR:
                case self::INDICES:
                case self::INFINITE:
                case self::INFORMATIONAL:
                case self::INHERIT:
                case self::INITCAP:
                case self::INITIAL:
                case self::INITIALIZED:
                case self::INITIALLY:
                case self::INITRANS:
                case self::INLINE:
                case self::INLINE_XMLTYPE_NT:
                case self::INMEMORY:
                case self::IN_MEMORY_METADATA:
                case self::INMEMORY_PRUNING:
                case self::INNER:
                case self::INOUT:
                case self::INPLACE:
                case self::INSERTCHILDXMLAFTER:
                case self::INSERTCHILDXMLBEFORE:
                case self::INSERTCHILDXML:
                case self::INSERTXMLAFTER:
                case self::INSERTXMLBEFORE:
                case self::INSTANCE:
                case self::INSTANCES:
                case self::INSTANTIABLE:
                case self::INSTANTLY:
                case self::INSTEAD:
                case self::INSTR2:
                case self::INSTR4:
                case self::INSTRB:
                case self::INSTRC:
                case self::INSTR:
                case self::INTEGER:
                case self::INTERLEAVED:
                case self::INTERMEDIATE:
                case self::INTERNAL_CONVERT:
                case self::INTERNAL_USE:
                case self::INTERPRETED:
                case self::INTERVAL:
                case self::INT:
                case self::INVALIDATE:
                case self::INVISIBLE:
                case self::IN_XQUERY:
                case self::ISOLATION:
                case self::ISOLATION_LEVEL:
                case self::ITERATE:
                case self::ITERATION_NUMBER:
                case self::JAVA:
                case self::JOB:
                case self::JOIN:
                case self::JSON_ARRAYAGG:
                case self::JSON_ARRAY:
                case self::JSON_EQUAL:
                case self::JSON_EXISTS2:
                case self::JSON_EXISTS:
                case self::JSONGET:
                case self::JSON:
                case self::JSON_OBJECTAGG:
                case self::JSON_OBJECT:
                case self::JSONPARSE:
                case self::JSON_QUERY:
                case self::JSON_SERIALIZE:
                case self::JSON_TABLE:
                case self::JSON_TEXTCONTAINS2:
                case self::JSON_TEXTCONTAINS:
                case self::JSON_VALUE:
                case self::KEEP_DUPLICATES:
                case self::KEEP:
                case self::KERBEROS:
                case self::KEY:
                case self::KEY_LENGTH:
                case self::KEYSIZE:
                case self::KEYS:
                case self::KEYSTORE:
                case self::KILL:
                case self::LABEL:
                case self::LANGUAGE:
                case self::LAST_DAY:
                case self::LAST:
                case self::LAST_VALUE:
                case self::LATERAL:
                case self::LAX:
                case self::LAYER:
                case self::LDAP_REGISTRATION_ENABLED:
                case self::LDAP_REGISTRATION:
                case self::LDAP_REG_SYNC_INTERVAL:
                case self::LEADING:
                case self::LEFT:
                case self::LENGTH2:
                case self::LENGTH4:
                case self::LENGTHB:
                case self::LENGTHC:
                case self::LENGTH:
                case self::LESS:
                case self::LEVEL:
                case self::LEVELS:
                case self::LIBRARY:
                case self::LIFECYCLE:
                case self::LIFE:
                case self::LIFETIME:
                case self::LIKE2:
                case self::LIKE4:
                case self::LIKEC:
                case self::LIKE_EXPAND:
                case self::LIMIT:
                case self::LINEAR:
                case self::LINK:
                case self::LIST:
                case self::LN:
                case self::LNNVL:
                case self::LOAD:
                case self::LOB:
                case self::LOBNVL:
                case self::LOBS:
                case self::LOCAL_INDEXES:
                case self::LOCAL:
                case self::LOCALTIME:
                case self::LOCALTIMESTAMP:
                case self::LOCATION:
                case self::LOCATOR:
                case self::LOCKED:
                case self::LOCKING:
                case self::LOGFILE:
                case self::LOGFILES:
                case self::LOGGING:
                case self::LOGICAL:
                case self::LOGICAL_READS_PER_CALL:
                case self::LOGICAL_READS_PER_SESSION:
                case self::LOG:
                case self::LOGMINING:
                case self::LOGOFF:
                case self::LOGON:
                case self::LOG_READ_ONLY_VIOLATIONS:
                case self::LONG:
                case self::LOOP:
                case self::LOWER:
                case self::LOW:
                case self::LPAD:
                case self::LTRIM:
                case self::MAIN:
                case self::MAKE_REF:
                case self::MANAGED:
                case self::MANAGE:
                case self::MANAGEMENT:
                case self::MANAGER:
                case self::MANUAL:
                case self::MAP:
                case self::MAPPING:
                case self::MASTER:
                case self::MATCHED:
                case self::MATCHES:
                case self::MATCH:
                case self::MATCH_NUMBER:
                case self::MATCH_RECOGNIZE:
                case self::MATERIALIZED:
                case self::MATERIALIZE:
                case self::MAXARCHLOGS:
                case self::MAXDATAFILES:
                case self::MAXEXTENTS:
                case self::MAXIMIZE:
                case self::MAXINSTANCES:
                case self::MAXLOGFILES:
                case self::MAXLOGHISTORY:
                case self::MAXLOGMEMBERS:
                case self::MAX_SHARED_TEMP_SIZE:
                case self::MAXSIZE:
                case self::MAXTRANS:
                case self::MAXVALUE:
                case self::MEASURE:
                case self::MEASURES:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MEMCOMPRESS:
                case self::MEMORY:
                case self::MERGEACTIONS:
                case self::MERGE_AJ:
                case self::MERGE_CONST_ON:
                case self::MERGE:
                case self::MERGE_SJ:
                case self::METADATA:
                case self::METHOD:
                case self::MIGRATE:
                case self::MIGRATION:
                case self::MINEXTENTS:
                case self::MINIMIZE:
                case self::MINIMUM:
                case self::MINING:
                case self::MINUS_NULL:
                case self::MINUTE:
                case self::MINVALUE:
                case self::MIRRORCOLD:
                case self::MIRRORHOT:
                case self::MIRROR:
                case self::MLSLABEL:
                case self::MODEL_COMPILE_SUBQUERY:
                case self::MODEL_DONTVERIFY_UNIQUENESS:
                case self::MODEL_DYNAMIC_SUBQUERY:
                case self::MODEL_MIN_ANALYSIS:
                case self::MODEL:
                case self::MODEL_NB:
                case self::MODEL_NO_ANALYSIS:
                case self::MODEL_PBY:
                case self::MODEL_PUSH_REF:
                case self::MODEL_SV:
                case self::MODIFICATION:
                case self::MODIFY_COLUMN_TYPE:
                case self::MODIFY:
                case self::MOD:
                case self::MODULE:
                case self::MONITORING:
                case self::MONITOR:
                case self::MONTH:
                case self::MONTHS_BETWEEN:
                case self::MONTHS:
                case self::MOUNT:
                case self::MOUNTPATH:
                case self::MOVEMENT:
                case self::MOVE:
                case self::MULTIDIMENSIONAL:
                case self::MULTISET:
                case self::MV_MERGE:
                case self::NAMED:
                case self::NAME:
                case self::NAMESPACE:
                case self::NAN:
                case self::NANVL:
                case self::NATIONAL:
                case self::NATIVE_FULL_OUTER_JOIN:
                case self::NATIVE:
                case self::NATURAL:
                case self::NAV:
                case self::NCHAR_CS:
                case self::NCHAR:
                case self::NCHR:
                case self::NCLOB:
                case self::NEEDED:
                case self::NEG:
                case self::NESTED:
                case self::NESTED_TABLE_FAST_INSERT:
                case self::NESTED_TABLE_GET_REFS:
                case self::NESTED_TABLE_ID:
                case self::NESTED_TABLE_SET_REFS:
                case self::NESTED_TABLE_SET_SETID:
                case self::NETWORK:
                case self::NEVER:
                case self::NEW:
                case self::NEW_TIME:
                case self::NEXT_DAY:
                case self::NEXT:
                case self::NL_AJ:
                case self::NLJ_BATCHING:
                case self::NLJ_INDEX_FILTER:
                case self::NLJ_INDEX_SCAN:
                case self::NLJ_PREFETCH:
                case self::NLS_CALENDAR:
                case self::NLS_CHARACTERSET:
                case self::NLS_CHARSET_DECL_LEN:
                case self::NLS_CHARSET_ID:
                case self::NLS_CHARSET_NAME:
                case self::NLS_COMP:
                case self::NLS_CURRENCY:
                case self::NLS_DATE_FORMAT:
                case self::NLS_DATE_LANGUAGE:
                case self::NLS_INITCAP:
                case self::NLS_ISO_CURRENCY:
                case self::NL_SJ:
                case self::NLS_LANG:
                case self::NLS_LANGUAGE:
                case self::NLS_LENGTH_SEMANTICS:
                case self::NLS_LOWER:
                case self::NLS_NCHAR_CONV_EXCP:
                case self::NLS_NUMERIC_CHARACTERS:
                case self::NLS_SORT:
                case self::NLSSORT:
                case self::NLS_SPECIAL_CHARS:
                case self::NLS_TERRITORY:
                case self::NLS_UPPER:
                case self::NO_ACCESS:
                case self::NO_ADAPTIVE_PLAN:
                case self::NO_ANSI_REARCH:
                case self::NOAPPEND:
                case self::NOARCHIVELOG:
                case self::NOAUDIT:
                case self::NO_AUTO_REOPTIMIZE:
                case self::NO_BASETABLE_MULTIMV_REWRITE:
                case self::NO_BATCH_TABLE_ACCESS_BY_ROWID:
                case self::NO_BIND_AWARE:
                case self::NO_BUFFER:
                case self::NOCACHE:
                case self::NO_CARTESIAN:
                case self::NO_CHECK_ACL_REWRITE:
                case self::NO_CLUSTER_BY_ROWID:
                case self::NO_CLUSTERING:
                case self::NO_COALESCE_SQ:
                case self::NO_COMMON_DATA:
                case self::NO_CONNECT_BY_CB_WHR_ONLY:
                case self::NO_CONNECT_BY_COMBINE_SW:
                case self::NO_CONNECT_BY_COST_BASED:
                case self::NO_CONNECT_BY_ELIM_DUPS:
                case self::NO_CONNECT_BY_FILTERING:
                case self::NOCOPY:
                case self::NO_COST_XML_QUERY_REWRITE:
                case self::NO_CPU_COSTING:
                case self::NOCPU_COSTING:
                case self::NOCYCLE:
                case self::NO_DATA_SECURITY_REWRITE:
                case self::NO_DECORRELATE:
                case self::NODELAY:
                case self::NO_DOMAIN_INDEX_FILTER:
                case self::NO_DST_UPGRADE_INSERT_CONV:
                case self::NO_ELIM_GROUPBY:
                case self::NO_ELIMINATE_JOIN:
                case self::NO_ELIMINATE_OBY:
                case self::NO_ELIMINATE_OUTER_JOIN:
                case self::NOENTITYESCAPING:
                case self::NO_EXPAND_GSET_TO_UNION:
                case self::NO_EXPAND:
                case self::NO_EXPAND_TABLE:
                case self::NO_FACT:
                case self::NO_FACTORIZE_JOIN:
                case self::NO_FILTERING:
                case self::NOFORCE:
                case self::NO_FULL_OUTER_JOIN_TO_OUTER:
                case self::NO_GATHER_OPTIMIZER_STATISTICS:
                case self::NO_GBY_PUSHDOWN:
                case self::NOGUARANTEE:
                case self::NO_INDEX_FFS:
                case self::NO_INDEX:
                case self::NO_INDEX_SS:
                case self::NO_INMEMORY:
                case self::NO_INMEMORY_PRUNING:
                case self::NOKEEP:
                case self::NO_LOAD:
                case self::NOLOCAL:
                case self::NOLOGGING:
                case self::NOMAPPING:
                case self::NOMAXVALUE:
                case self::NO_MERGE:
                case self::NOMINIMIZE:
                case self::NOMINVALUE:
                case self::NO_MODEL_PUSH_REF:
                case self::NO_MONITORING:
                case self::NOMONITORING:
                case self::NO_MONITOR:
                case self::NO_MULTIMV_REWRITE:
                case self::NO_NATIVE_FULL_OUTER_JOIN:
                case self::NONBLOCKING:
                case self::NONEDITIONABLE:
                case self::NONE:
                case self::NO_NLJ_BATCHING:
                case self::NO_NLJ_PREFETCH:
                case self::NO:
                case self::NONSCHEMA:
                case self::NO_OBJECT_LINK:
                case self::NOORDER:
                case self::NO_ORDER_ROLLUPS:
                case self::NO_OUTER_JOIN_TO_ANTI:
                case self::NO_OUTER_JOIN_TO_INNER:
                case self::NOOVERRIDE:
                case self::NO_PARALLEL_INDEX:
                case self::NOPARALLEL_INDEX:
                case self::NO_PARALLEL:
                case self::NOPARALLEL:
                case self::NO_PARTIAL_COMMIT:
                case self::NO_PARTIAL_JOIN:
                case self::NO_PARTIAL_ROLLUP_PUSHDOWN:
                case self::NOPARTITION:
                case self::NO_PLACE_DISTINCT:
                case self::NO_PLACE_GROUP_BY:
                case self::NO_PQ_CONCURRENT_UNION:
                case self::NO_PQ_MAP:
                case self::NO_PQ_REPLICATE:
                case self::NO_PQ_SKEW:
                case self::NO_PRUNE_GSETS:
                case self::NO_PULL_PRED:
                case self::NO_PUSH_PRED:
                case self::NO_PUSH_SUBQ:
                case self::NO_PX_FAULT_TOLERANCE:
                case self::NO_PX_JOIN_FILTER:
                case self::NO_QKN_BUFF:
                case self::NO_QUERY_TRANSFORMATION:
                case self::NO_REF_CASCADE:
                case self::NORELOCATE:
                case self::NORELY:
                case self::NOREPAIR:
                case self::NOREPLAY:
                case self::NORESETLOGS:
                case self::NO_RESULT_CACHE:
                case self::NOREVERSE:
                case self::NO_REWRITE:
                case self::NOREWRITE:
                case self::NORMAL:
                case self::NO_ROOT_SW_FOR_LOCAL:
                case self::NOROWDEPENDENCIES:
                case self::NOSCHEMACHECK:
                case self::NOSEGMENT:
                case self::NO_SEMIJOIN:
                case self::NO_SEMI_TO_INNER:
                case self::NO_SET_TO_JOIN:
                case self::NOSORT:
                case self::NO_SQL_TRANSLATION:
                case self::NO_SQL_TUNE:
                case self::NO_STAR_TRANSFORMATION:
                case self::NO_STATEMENT_QUEUING:
                case self::NO_STATS_GSETS:
                case self::NOSTRICT:
                case self::NO_SUBQUERY_PRUNING:
                case self::NO_SUBSTRB_PAD:
                case self::NO_SWAP_JOIN_INPUTS:
                case self::NOSWITCH:
                case self::NO_TABLE_LOOKUP_BY_NL:
                case self::NO_TEMP_TABLE:
                case self::NOTHING:
                case self::NOTIFICATION:
                case self::NO_TRANSFORM_DISTINCT_AGG:
                case self::NO_UNNEST:
                case self::NO_USE_CUBE:
                case self::NO_USE_HASH_AGGREGATION:
                case self::NO_USE_HASH_GBY_FOR_PUSHDOWN:
                case self::NO_USE_HASH:
                case self::NO_USE_INVISIBLE_INDEXES:
                case self::NO_USE_MERGE:
                case self::NO_USE_NL:
                case self::NO_USE_VECTOR_AGGREGATION:
                case self::NOVALIDATE:
                case self::NO_VECTOR_TRANSFORM_DIMS:
                case self::NO_VECTOR_TRANSFORM_FACT:
                case self::NO_VECTOR_TRANSFORM:
                case self::NO_XDB_FASTPATH_INSERT:
                case self::NO_XML_DML_REWRITE:
                case self::NO_XMLINDEX_REWRITE_IN_SELECT:
                case self::NO_XMLINDEX_REWRITE:
                case self::NO_XML_QUERY_REWRITE:
                case self::NO_ZONEMAP:
                case self::NTH_VALUE:
                case self::NULLIF:
                case self::NULLS:
                case self::NUMBER:
                case self::NUMERIC:
                case self::NUM_INDEX_KEYS:
                case self::NUMTODSINTERVAL:
                case self::NUMTOYMINTERVAL:
                case self::NVARCHAR2:
                case self::NVL2:
                case self::OBJECT2XML:
                case self::OBJECT:
                case self::OBJ_ID:
                case self::OBJNO:
                case self::OBJNO_REUSE:
                case self::OCCURENCES:
                case self::OFFLINE:
                case self::OFF:
                case self::OFFSET:
                case self::OIDINDEX:
                case self::OID:
                case self::OLAP:
                case self::OLD:
                case self::OLD_PUSH_PRED:
                case self::OLS:
                case self::OLTP:
                case self::OMIT:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPAQUE:
                case self::OPAQUE_TRANSFORM:
                case self::OPAQUE_XCANONICAL:
                case self::OPCODE:
                case self::OPEN:
                case self::OPERATIONS:
                case self::OPERATOR:
                case self::OPT_ESTIMATE:
                case self::OPTIMAL:
                case self::OPTIMIZE:
                case self::OPTIMIZER_FEATURES_ENABLE:
                case self::OPTIMIZER_GOAL:
                case self::OPT_PARAM:
                case self::ORA_BRANCH:
                case self::ORA_CHECK_ACL:
                case self::ORA_CHECK_PRIVILEGE:
                case self::ORA_CLUSTERING:
                case self::ORADATA:
                case self::ORADEBUG:
                case self::ORA_DST_AFFECTED:
                case self::ORA_DST_CONVERT:
                case self::ORA_DST_ERROR:
                case self::ORA_GET_ACLIDS:
                case self::ORA_GET_PRIVILEGES:
                case self::ORA_HASH:
                case self::ORA_INVOKING_USERID:
                case self::ORA_INVOKING_USER:
                case self::ORA_INVOKING_XS_USER_GUID:
                case self::ORA_INVOKING_XS_USER:
                case self::ORA_RAWCOMPARE:
                case self::ORA_RAWCONCAT:
                case self::ORA_ROWSCN:
                case self::ORA_ROWSCN_RAW:
                case self::ORA_ROWVERSION:
                case self::ORA_TABVERSION:
                case self::ORA_WRITE_TIME:
                case self::ORDERED:
                case self::ORDERED_PREDICATES:
                case self::ORDINALITY:
                case self::OR_EXPAND:
                case self::ORGANIZATION:
                case self::OR_PREDICATES:
                case self::OSERROR:
                case self::OTHER:
                case self::OUTER_JOIN_TO_ANTI:
                case self::OUTER_JOIN_TO_INNER:
                case self::OUTER:
                case self::OUTLINE_LEAF:
                case self::OUTLINE:
                case self::OUT_OF_LINE:
                case self::OUT:
                case self::OVERFLOW_NOMOVE:
                case self::OVERFLOW:
                case self::OVERLAPS:
                case self::OVER:
                case self::OVERRIDING:
                case self::OWNER:
                case self::OWNERSHIP:
                case self::OWN:
                case self::PACKAGE:
                case self::PACKAGES:
                case self::PARALLEL_ENABLE:
                case self::PARALLEL_INDEX:
                case self::PARALLEL:
                case self::PARAMETERS:
                case self::PARAM:
                case self::PARENT:
                case self::PARITY:
                case self::PARTIAL_JOIN:
                case self::PARTIALLY:
                case self::PARTIAL:
                case self::PARTIAL_ROLLUP_PUSHDOWN:
                case self::PARTITION_HASH:
                case self::PARTITION_LIST:
                case self::PARTITION:
                case self::PARTITION_RANGE:
                case self::PARTITIONS:
                case self::PARTNUMINST:
                case self::PASSING:
                case self::PASSWORD_GRACE_TIME:
                case self::PASSWORD_LIFE_TIME:
                case self::PASSWORD_LOCK_TIME:
                case self::PASSWORD:
                case self::PASSWORD_REUSE_MAX:
                case self::PASSWORD_REUSE_TIME:
                case self::PASSWORD_VERIFY_FUNCTION:
                case self::PAST:
                case self::PATCH:
                case self::PATH:
                case self::PATH_PREFIX:
                case self::PATHS:
                case self::PATTERN:
                case self::PBL_HS_BEGIN:
                case self::PBL_HS_END:
                case self::PCTINCREASE:
                case self::PCTTHRESHOLD:
                case self::PCTUSED:
                case self::PCTVERSION:
                case self::PENDING:
                case self::PERCENT_KEYWORD:
                case self::PERCENT_RANKM:
                case self::PERFORMANCE:
                case self::PERIOD_KEYWORD:
                case self::PERMANENT:
                case self::PERMISSION:
                case self::PERMUTE:
                case self::PER:
                case self::PFILE:
                case self::PHYSICAL:
                case self::PIKEY:
                case self::PIPELINED:
                case self::PIV_GB:
                case self::PIVOT:
                case self::PIV_SSF:
                case self::PLACE_DISTINCT:
                case self::PLACE_GROUP_BY:
                case self::PLAN:
                case self::PLSCOPE_SETTINGS:
                case self::PLS_INTEGER:
                case self::PLSQL_CCFLAGS:
                case self::PLSQL_CODE_TYPE:
                case self::PLSQL_DEBUG:
                case self::PLSQL_OPTIMIZE_LEVEL:
                case self::PLSQL_WARNINGS:
                case self::PLUGGABLE:
                case self::POINT:
                case self::POLICY:
                case self::POOL_16K:
                case self::POOL_2K:
                case self::POOL_32K:
                case self::POOL_4K:
                case self::POOL_8K:
                case self::POSITIVEN:
                case self::POSITIVE:
                case self::POST_TRANSACTION:
                case self::POWERMULTISET_BY_CARDINALITY:
                case self::POWERMULTISET:
                case self::POWER:
                case self::PQ_CONCURRENT_UNION:
                case self::PQ_DISTRIBUTE:
                case self::PQ_DISTRIBUTE_WINDOW:
                case self::PQ_FILTER:
                case self::PQ_MAP:
                case self::PQ_NOMAP:
                case self::PQ_REPLICATE:
                case self::PQ_SKEW:
                case self::PRAGMA:
                case self::PREBUILT:
                case self::PRECEDES:
                case self::PRECEDING:
                case self::PRECISION:
                case self::PRECOMPUTE_SUBQUERY:
                case self::PREDICATE_REORDERS:
                case self::PRELOAD:
                case self::PREPARE:
                case self::PRESENTNNV:
                case self::PRESENT:
                case self::PRESENTV:
                case self::PRESERVE_OID:
                case self::PRESERVE:
                case self::PRETTY:
                case self::PREVIOUS:
                case self::PREV:
                case self::PRIMARY:
                case self::PRINTBLOBTOCLOB:
                case self::PRIORITY:
                case self::PRIVATE:
                case self::PRIVATE_SGA:
                case self::PRIVILEGED:
                case self::PRIVILEGE:
                case self::PRIVILEGES:
                case self::PROCEDURAL:
                case self::PROCEDURE:
                case self::PROCESS:
                case self::PROFILE:
                case self::PROGRAM:
                case self::PROJECT:
                case self::PROPAGATE:
                case self::PROTECTED:
                case self::PROTECTION:
                case self::PROXY:
                case self::PRUNING:
                case self::PULL_PRED:
                case self::PURGE:
                case self::PUSH_PRED:
                case self::PUSH_SUBQ:
                case self::PX_FAULT_TOLERANCE:
                case self::PX_GRANULE:
                case self::PX_JOIN_FILTER:
                case self::QB_NAME:
                case self::QUERY_BLOCK:
                case self::QUERY:
                case self::QUEUE_CURR:
                case self::QUEUE:
                case self::QUEUE_ROWP:
                case self::QUIESCE:
                case self::QUORUM:
                case self::QUOTA:
                case self::RAISE:
                case self::RANDOM_LOCAL:
                case self::RANDOM:
                case self::RANGE:
                case self::RANKM:
                case self::RAPIDLY:
                case self::RAW:
                case self::RAWTOHEX:
                case self::RAWTONHEX:
                case self::RBA:
                case self::RBO_OUTLINE:
                case self::RDBA:
                case self::READ:
                case self::READS:
                case self::REALM:
                case self::REAL:
                case self::REBALANCE:
                case self::REBUILD:
                case self::RECORD:
                case self::RECORDS_PER_BLOCK:
                case self::RECOVERABLE:
                case self::RECOVER:
                case self::RECOVERY:
                case self::RECYCLEBIN:
                case self::RECYCLE:
                case self::REDACTION:
                case self::REDEFINE:
                case self::REDO:
                case self::REDUCED:
                case self::REDUNDANCY:
                case self::REF_CASCADE_CURSOR:
                case self::REFERENCED:
                case self::REFERENCE:
                case self::REFERENCES:
                case self::REFERENCING:
                case self::REF:
                case self::REFRESH:
                case self::REFTOHEX:
                case self::REGEXP_COUNT:
                case self::REGEXP_INSTR:
                case self::REGEXP_LIKE:
                case self::REGEXP_REPLACE:
                case self::REGEXP_SUBSTR:
                case self::REGISTER:
                case self::REGR_AVGX:
                case self::REGR_AVGY:
                case self::REGR_COUNT:
                case self::REGR_INTERCEPT:
                case self::REGR_R2:
                case self::REGR_SLOPE:
                case self::REGR_SXX:
                case self::REGR_SXY:
                case self::REGR_SYY:
                case self::REGULAR:
                case self::REJECT:
                case self::REKEY:
                case self::RELATIONAL:
                case self::RELOCATE:
                case self::RELY:
                case self::REMAINDER:
                case self::REMOTE_MAPPED:
                case self::REMOVE:
                case self::RENAME:
                case self::REPAIR:
                case self::REPEAT:
                case self::REPLACE:
                case self::REPLICATION:
                case self::REQUIRED:
                case self::RESETLOGS:
                case self::RESET:
                case self::RESIZE:
                case self::RESOLVE:
                case self::RESOLVER:
                case self::RESPECT:
                case self::RESTART:
                case self::RESTORE_AS_INTERVALS:
                case self::RESTORE:
                case self::RESTRICT_ALL_REF_CONS:
                case self::RESTRICTED:
                case self::RESTRICT_REFERENCES:
                case self::RESTRICT:
                case self::RESULT_CACHE:
                case self::RESULT:
                case self::RESUMABLE:
                case self::RESUME:
                case self::RETENTION:
                case self::RETRY_ON_ROW_CHANGE:
                case self::RETURNING:
                case self::RETURN:
                case self::REUSE:
                case self::REVERSE:
                case self::REWRITE_OR_ERROR:
                case self::REWRITE:
                case self::RIGHT:
                case self::ROLE:
                case self::ROLESET:
                case self::ROLES:
                case self::ROLLBACK:
                case self::ROLLING:
                case self::ROLLUP:
                case self::ROWDEPENDENCIES:
                case self::ROWID_MAPPING_TABLE:
                case self::ROWID:
                case self::ROWIDTOCHAR:
                case self::ROWIDTONCHAR:
                case self::ROW_LENGTH:
                case self::ROWNUM:
                case self::ROW:
                case self::ROWS:
                case self::RPAD:
                case self::RTRIM:
                case self::RULE:
                case self::RULES:
                case self::RUNNING:
                case self::SALT:
                case self::SAMPLE:
                case self::SAVE_AS_INTERVALS:
                case self::SAVEPOINT:
                case self::SAVE:
                case self::SB4:
                case self::SCALE_ROWS:
                case self::SCALE:
                case self::SCAN_INSTANCES:
                case self::SCAN:
                case self::SCHEDULER:
                case self::SCHEMACHECK:
                case self::SCHEMA:
                case self::SCN_ASCENDING:
                case self::SCN:
                case self::SCOPE:
                case self::SCRUB:
                case self::SD_ALL:
                case self::SD_INHIBIT:
                case self::SDO_GEOM_MBR:
                case self::SD_SHOW:
                case self::SEARCH:
                case self::SECOND:
                case self::SECRET:
                case self::SECUREFILE_DBA:
                case self::SECUREFILE:
                case self::SECURITY:
                case self::SEED:
                case self::SEG_BLOCK:
                case self::SEG_FILE:
                case self::SEGMENT:
                case self::SELECTIVITY:
                case self::SELF:
                case self::SEMIJOIN_DRIVER:
                case self::SEMIJOIN:
                case self::SEMI_TO_INNER:
                case self::SEQUENCED:
                case self::SEQUENCE:
                case self::SEQUENTIAL:
                case self::SERIALIZABLE:
                case self::SERIALLY_REUSABLE:
                case self::SERIAL:
                case self::SERVERERROR:
                case self::SERVICE_NAME_CONVERT:
                case self::SERVICES:
                case self::SESSION_CACHED_CURSORS:
                case self::SESSION:
                case self::SESSIONS_PER_USER:
                case self::SESSIONTIMEZONE:
                case self::SESSIONTZNAME:
                case self::SET:
                case self::SETS:
                case self::SETTINGS:
                case self::SET_TO_JOIN:
                case self::SEVERE:
                case self::SHARED_POOL:
                case self::SHARED:
                case self::SHARING:
                case self::SHELFLIFE:
                case self::SHOW:
                case self::SHRINK:
                case self::SHUTDOWN:
                case self::SIBLINGS:
                case self::SID:
                case self::SIGNAL_COMPONENT:
                case self::SIGNAL_FUNCTION:
                case self::SIGN:
                case self::SIGNTYPE:
                case self::SIMPLE_INTEGER:
                case self::SIMPLE:
                case self::SINGLE:
                case self::SINGLETASK:
                case self::SINH:
                case self::SIN:
                case self::SKIP_EXT_OPTIMIZER:
                case self::SKIP_:
                case self::SKIP_UNQ_UNUSABLE_IDX:
                case self::SKIP_UNUSABLE_INDEXES:
                case self::SMALLFILE:
                case self::SMALLINT:
                case self::SNAPSHOT:
                case self::SOME:
                case self::SORT:
                case self::SOUNDEX:
                case self::SOURCE_FILE_DIRECTORY:
                case self::SOURCE_FILE_NAME_CONVERT:
                case self::SOURCE:
                case self::SPACE_KEYWORD:
                case self::SPECIFICATION:
                case self::SPFILE:
                case self::SPLIT:
                case self::SPREADSHEET:
                case self::SQLDATA:
                case self::SQLERROR:
                case self::SQLLDR:
                case self::SQL:
                case self::SQL_TRACE:
                case self::SQL_TRANSLATION_PROFILE:
                case self::SQRT:
                case self::STALE:
                case self::STANDALONE:
                case self::STANDARD_HASH:
                case self::STANDBY_MAX_DATA_DELAY:
                case self::STANDBYS:
                case self::STANDBY:
                case self::STAR:
                case self::STAR_TRANSFORMATION:
                case self::STARTUP:
                case self::STATEMENT_ID:
                case self::STATEMENT_QUEUING:
                case self::STATEMENTS:
                case self::STATEMENT:
                case self::STATE:
                case self::STATIC:
                case self::STATISTICS:
                case self::STATS_BINOMIAL_TEST:
                case self::STATS_CROSSTAB:
                case self::STATS_F_TEST:
                case self::STATS_KS_TEST:
                case self::STATS_MODE:
                case self::STATS_MW_TEST:
                case self::STATS_ONE_WAY_ANOVA:
                case self::STATS_T_TEST_INDEP:
                case self::STATS_T_TEST_INDEPU:
                case self::STATS_T_TEST_ONE:
                case self::STATS_T_TEST_PAIRED:
                case self::STATS_WSR_TEST:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::STOP:
                case self::STORAGE:
                case self::STORE:
                case self::STREAMS:
                case self::STREAM:
                case self::STRICT:
                case self::STRING:
                case self::STRIPE_COLUMNS:
                case self::STRIPE_WIDTH:
                case self::STRIP:
                case self::STRUCTURE:
                case self::SUBMULTISET:
                case self::SUBPARTITION_REL:
                case self::SUBPARTITIONS:
                case self::SUBPARTITION:
                case self::SUBQUERIES:
                case self::SUBQUERY_PRUNING:
                case self::SUBSCRIBE:
                case self::SUBSET:
                case self::SUBSTITUTABLE:
                case self::SUBSTR2:
                case self::SUBSTR4:
                case self::SUBSTRB:
                case self::SUBSTRC:
                case self::SUBTYPE:
                case self::SUCCESSFUL:
                case self::SUCCESS:
                case self::SUMMARY:
                case self::SUPPLEMENTAL:
                case self::SUSPEND:
                case self::SWAP_JOIN_INPUTS:
                case self::SWITCHOVER:
                case self::SWITCH:
                case self::SYNCHRONOUS:
                case self::SYNC:
                case self::SYSASM:
                case self::SYS_AUDIT:
                case self::SYSAUX:
                case self::SYSBACKUP:
                case self::SYS_CHECKACL:
                case self::SYS_CHECK_PRIVILEGE:
                case self::SYS_CONNECT_BY_PATH:
                case self::SYS_CONTEXT:
                case self::SYSDATE:
                case self::SYSDBA:
                case self::SYS_DBURIGEN:
                case self::SYSDG:
                case self::SYS_DL_CURSOR:
                case self::SYS_DM_RXFORM_CHR:
                case self::SYS_DM_RXFORM_NUM:
                case self::SYS_DOM_COMPARE:
                case self::SYS_DST_PRIM2SEC:
                case self::SYS_DST_SEC2PRIM:
                case self::SYS_ET_BFILE_TO_RAW:
                case self::SYS_ET_BLOB_TO_IMAGE:
                case self::SYS_ET_IMAGE_TO_BLOB:
                case self::SYS_ET_RAW_TO_BFILE:
                case self::SYS_EXTPDTXT:
                case self::SYS_EXTRACT_UTC:
                case self::SYS_FBT_INSDEL:
                case self::SYS_FILTER_ACLS:
                case self::SYS_FNMATCHES:
                case self::SYS_FNREPLACE:
                case self::SYS_GET_ACLIDS:
                case self::SYS_GET_COL_ACLIDS:
                case self::SYS_GET_PRIVILEGES:
                case self::SYS_GETTOKENID:
                case self::SYS_GETXTIVAL:
                case self::SYS_GUID:
                case self::SYSGUID:
                case self::SYSKM:
                case self::SYS_MAKE_XMLNODEID:
                case self::SYS_MAKEXML:
                case self::SYS_MKXMLATTR:
                case self::SYS_MKXTI:
                case self::SYSOBJ:
                case self::SYS_OP_ADT2BIN:
                case self::SYS_OP_ADTCONS:
                case self::SYS_OP_ALSCRVAL:
                case self::SYS_OP_ATG:
                case self::SYS_OP_BIN2ADT:
                case self::SYS_OP_BITVEC:
                case self::SYS_OP_BL2R:
                case self::SYS_OP_BLOOM_FILTER_LIST:
                case self::SYS_OP_BLOOM_FILTER:
                case self::SYS_OP_C2C:
                case self::SYS_OP_CAST:
                case self::SYS_OP_CEG:
                case self::SYS_OP_CL2C:
                case self::SYS_OP_COMBINED_HASH:
                case self::SYS_OP_COMP:
                case self::SYS_OP_CONVERT:
                case self::SYS_OP_COUNTCHG:
                case self::SYS_OP_CSCONV:
                case self::SYS_OP_CSCONVTEST:
                case self::SYS_OP_CSR:
                case self::SYS_OP_CSX_PATCH:
                case self::SYS_OP_CYCLED_SEQ:
                case self::SYS_OP_DECOMP:
                case self::SYS_OP_DESCEND:
                case self::SYS_OP_DISTINCT:
                case self::SYS_OP_DRA:
                case self::SYS_OP_DUMP:
                case self::SYS_OP_DV_CHECK:
                case self::SYS_OP_ENFORCE_NOT_NULL:
                case self::SYSOPER:
                case self::SYS_OP_EXTRACT:
                case self::SYS_OP_GROUPING:
                case self::SYS_OP_GUID:
                case self::SYS_OP_HASH:
                case self::SYS_OP_IIX:
                case self::SYS_OP_ITR:
                case self::SYS_OP_KEY_VECTOR_CREATE:
                case self::SYS_OP_KEY_VECTOR_FILTER_LIST:
                case self::SYS_OP_KEY_VECTOR_FILTER:
                case self::SYS_OP_KEY_VECTOR_SUCCEEDED:
                case self::SYS_OP_KEY_VECTOR_USE:
                case self::SYS_OP_LBID:
                case self::SYS_OP_LOBLOC2BLOB:
                case self::SYS_OP_LOBLOC2CLOB:
                case self::SYS_OP_LOBLOC2ID:
                case self::SYS_OP_LOBLOC2NCLOB:
                case self::SYS_OP_LOBLOC2TYP:
                case self::SYS_OP_LSVI:
                case self::SYS_OP_LVL:
                case self::SYS_OP_MAKEOID:
                case self::SYS_OP_MAP_NONNULL:
                case self::SYS_OP_MSR:
                case self::SYS_OP_NICOMBINE:
                case self::SYS_OP_NIEXTRACT:
                case self::SYS_OP_NII:
                case self::SYS_OP_NIX:
                case self::SYS_OP_NOEXPAND:
                case self::SYS_OP_NTCIMG:
                case self::SYS_OP_NUMTORAW:
                case self::SYS_OP_OIDVALUE:
                case self::SYS_OP_OPNSIZE:
                case self::SYS_OP_PAR_1:
                case self::SYS_OP_PARGID_1:
                case self::SYS_OP_PARGID:
                case self::SYS_OP_PAR:
                case self::SYS_OP_PART_ID:
                case self::SYS_OP_PIVOT:
                case self::SYS_OP_R2O:
                case self::SYS_OP_RAWTONUM:
                case self::SYS_OP_RDTM:
                case self::SYS_OP_REF:
                case self::SYS_OP_RMTD:
                case self::SYS_OP_ROWIDTOOBJ:
                case self::SYS_OP_RPB:
                case self::SYS_OPTLOBPRBSC:
                case self::SYS_OP_TOSETID:
                case self::SYS_OP_TPR:
                case self::SYS_OP_TRTB:
                case self::SYS_OPTXICMP:
                case self::SYS_OPTXQCASTASNQ:
                case self::SYS_OP_UNDESCEND:
                case self::SYS_OP_VECAND:
                case self::SYS_OP_VECBIT:
                case self::SYS_OP_VECOR:
                case self::SYS_OP_VECXOR:
                case self::SYS_OP_VERSION:
                case self::SYS_OP_VREF:
                case self::SYS_OP_VVD:
                case self::SYS_OP_XMLCONS_FOR_CSX:
                case self::SYS_OP_XPTHATG:
                case self::SYS_OP_XPTHIDX:
                case self::SYS_OP_XPTHOP:
                case self::SYS_OP_XTXT2SQLT:
                case self::SYS_OP_ZONE_ID:
                case self::SYS_ORDERKEY_DEPTH:
                case self::SYS_ORDERKEY_MAXCHILD:
                case self::SYS_ORDERKEY_PARENT:
                case self::SYS_PARALLEL_TXN:
                case self::SYS_PATHID_IS_ATTR:
                case self::SYS_PATHID_IS_NMSPC:
                case self::SYS_PATHID_LASTNAME:
                case self::SYS_PATHID_LASTNMSPC:
                case self::SYS_PATH_REVERSE:
                case self::SYS_PXQEXTRACT:
                case self::SYS_RAW_TO_XSID:
                case self::SYS_RID_ORDER:
                case self::SYS_ROW_DELTA:
                case self::SYS_SC_2_XMLT:
                case self::SYS_SYNRCIREDO:
                case self::SYSTEM_DEFINED:
                case self::SYSTEM:
                case self::SYSTIMESTAMP:
                case self::SYS_TYPEID:
                case self::SYS_UMAKEXML:
                case self::SYS_XMLANALYZE:
                case self::SYS_XMLCONTAINS:
                case self::SYS_XMLCONV:
                case self::SYS_XMLEXNSURI:
                case self::SYS_XMLGEN:
                case self::SYS_XMLI_LOC_ISNODE:
                case self::SYS_XMLI_LOC_ISTEXT:
                case self::SYS_XMLINSTR:
                case self::SYS_XMLLOCATOR_GETSVAL:
                case self::SYS_XMLNODEID_GETCID:
                case self::SYS_XMLNODEID_GETLOCATOR:
                case self::SYS_XMLNODEID_GETOKEY:
                case self::SYS_XMLNODEID_GETPATHID:
                case self::SYS_XMLNODEID_GETPTRID:
                case self::SYS_XMLNODEID_GETRID:
                case self::SYS_XMLNODEID_GETSVAL:
                case self::SYS_XMLNODEID_GETTID:
                case self::SYS_XMLNODEID:
                case self::SYS_XMLT_2_SC:
                case self::SYS_XMLTRANSLATE:
                case self::SYS_XMLTYPE2SQL:
                case self::SYS_XQ_ASQLCNV:
                case self::SYS_XQ_ATOMCNVCHK:
                case self::SYS_XQBASEURI:
                case self::SYS_XQCASTABLEERRH:
                case self::SYS_XQCODEP2STR:
                case self::SYS_XQCODEPEQ:
                case self::SYS_XQCON2SEQ:
                case self::SYS_XQCONCAT:
                case self::SYS_XQDELETE:
                case self::SYS_XQDFLTCOLATION:
                case self::SYS_XQDOC:
                case self::SYS_XQDOCURI:
                case self::SYS_XQDURDIV:
                case self::SYS_XQED4URI:
                case self::SYS_XQENDSWITH:
                case self::SYS_XQERRH:
                case self::SYS_XQERR:
                case self::SYS_XQESHTMLURI:
                case self::SYS_XQEXLOBVAL:
                case self::SYS_XQEXSTWRP:
                case self::SYS_XQEXTRACT:
                case self::SYS_XQEXTRREF:
                case self::SYS_XQEXVAL:
                case self::SYS_XQFB2STR:
                case self::SYS_XQFNBOOL:
                case self::SYS_XQFNCMP:
                case self::SYS_XQFNDATIM:
                case self::SYS_XQFNLNAME:
                case self::SYS_XQFNNM:
                case self::SYS_XQFNNSURI:
                case self::SYS_XQFNPREDTRUTH:
                case self::SYS_XQFNQNM:
                case self::SYS_XQFNROOT:
                case self::SYS_XQFORMATNUM:
                case self::SYS_XQFTCONTAIN:
                case self::SYS_XQFUNCR:
                case self::SYS_XQGETCONTENT:
                case self::SYS_XQINDXOF:
                case self::SYS_XQINSERT:
                case self::SYS_XQINSPFX:
                case self::SYS_XQIRI2URI:
                case self::SYS_XQLANG:
                case self::SYS_XQLLNMFRMQNM:
                case self::SYS_XQMKNODEREF:
                case self::SYS_XQNILLED:
                case self::SYS_XQNODENAME:
                case self::SYS_XQNORMSPACE:
                case self::SYS_XQNORMUCODE:
                case self::SYS_XQ_NRNG:
                case self::SYS_XQNSP4PFX:
                case self::SYS_XQNSPFRMQNM:
                case self::SYS_XQPFXFRMQNM:
                case self::SYS_XQ_PKSQL2XML:
                case self::SYS_XQPOLYABS:
                case self::SYS_XQPOLYADD:
                case self::SYS_XQPOLYCEL:
                case self::SYS_XQPOLYCSTBL:
                case self::SYS_XQPOLYCST:
                case self::SYS_XQPOLYDIV:
                case self::SYS_XQPOLYFLR:
                case self::SYS_XQPOLYMOD:
                case self::SYS_XQPOLYMUL:
                case self::SYS_XQPOLYRND:
                case self::SYS_XQPOLYSQRT:
                case self::SYS_XQPOLYSUB:
                case self::SYS_XQPOLYUMUS:
                case self::SYS_XQPOLYUPLS:
                case self::SYS_XQPOLYVEQ:
                case self::SYS_XQPOLYVGE:
                case self::SYS_XQPOLYVGT:
                case self::SYS_XQPOLYVLE:
                case self::SYS_XQPOLYVLT:
                case self::SYS_XQPOLYVNE:
                case self::SYS_XQREF2VAL:
                case self::SYS_XQRENAME:
                case self::SYS_XQREPLACE:
                case self::SYS_XQRESVURI:
                case self::SYS_XQRNDHALF2EVN:
                case self::SYS_XQRSLVQNM:
                case self::SYS_XQRYENVPGET:
                case self::SYS_XQRYVARGET:
                case self::SYS_XQRYWRP:
                case self::SYS_XQSEQ2CON4XC:
                case self::SYS_XQSEQ2CON:
                case self::SYS_XQSEQDEEPEQ:
                case self::SYS_XQSEQINSB:
                case self::SYS_XQSEQRM:
                case self::SYS_XQSEQRVS:
                case self::SYS_XQSEQSUB:
                case self::SYS_XQSEQTYPMATCH:
                case self::SYS_XQSTARTSWITH:
                case self::SYS_XQSTATBURI:
                case self::SYS_XQSTR2CODEP:
                case self::SYS_XQSTRJOIN:
                case self::SYS_XQSUBSTRAFT:
                case self::SYS_XQSUBSTRBEF:
                case self::SYS_XQTOKENIZE:
                case self::SYS_XQTREATAS:
                case self::SYS_XQ_UPKXML2SQL:
                case self::SYS_XQXFORM:
                case self::SYS_XSID_TO_RAW:
                case self::SYS_ZMAP_FILTER:
                case self::SYS_ZMAP_REFRESH:
                case self::TABLE_LOOKUP_BY_NL:
                case self::TABLESPACE_NO:
                case self::TABLESPACE:
                case self::TABLES:
                case self::TABLE_STATS:
                case self::TABLE:
                case self::TABNO:
                case self::TAG:
                case self::TANH:
                case self::TAN:
                case self::TBLORIDXPARTNUM:
                case self::TEMPFILE:
                case self::TEMPLATE:
                case self::TEMPORARY:
                case self::TEMP_TABLE:
                case self::TEST:
                case self::TEXT:
                case self::THAN:
                case self::THEN:
                case self::THE:
                case self::THREAD:
                case self::THROUGH:
                case self::TIER:
                case self::TIES:
                case self::TIMEOUT:
                case self::TIMESTAMP_LTZ_UNCONSTRAINED:
                case self::TIMESTAMP:
                case self::TIMESTAMP_TZ_UNCONSTRAINED:
                case self::TIMESTAMP_UNCONSTRAINED:
                case self::TIMES:
                case self::TIME:
                case self::TIMEZONE_ABBR:
                case self::TIMEZONE_HOUR:
                case self::TIMEZONE_MINUTE:
                case self::TIMEZONE_OFFSET:
                case self::TIMEZONE_REGION:
                case self::TIME_ZONE:
                case self::TIV_GB:
                case self::TIV_SSF:
                case self::TO_ACLID:
                case self::TO_BINARY_DOUBLE:
                case self::TO_BINARY_FLOAT:
                case self::TO_BLOB:
                case self::TO_CLOB:
                case self::TO_DSINTERVAL:
                case self::TO_LOB:
                case self::TO_MULTI_BYTE:
                case self::TO_NCHAR:
                case self::TO_NCLOB:
                case self::TO_NUMBER:
                case self::TOPLEVEL:
                case self::TO_SINGLE_BYTE:
                case self::TO_TIMESTAMP:
                case self::TO_TIMESTAMP_TZ:
                case self::TO_TIME:
                case self::TO_TIME_TZ:
                case self::TO_YMINTERVAL:
                case self::TRACE:
                case self::TRACING:
                case self::TRACKING:
                case self::TRAILING:
                case self::TRANSACTION:
                case self::TRANSFORM_DISTINCT_AGG:
                case self::TRANSITIONAL:
                case self::TRANSITION:
                case self::TRANSLATE:
                case self::TRANSLATION:
                case self::TREAT:
                case self::TRIGGERS:
                case self::TRIGGER:
                case self::TRUE:
                case self::TRUNCATE:
                case self::TRUNC:
                case self::TRUSTED:
                case self::TRUST:
                case self::TUNING:
                case self::TX:
                case self::TYPES:
                case self::TYPE:
                case self::TZ_OFFSET:
                case self::UB2:
                case self::UBA:
                case self::UCS2:
                case self::UID:
                case self::UNARCHIVED:
                case self::UNBOUNDED:
                case self::UNBOUND:
                case self::UNCONDITIONAL:
                case self::UNDER:
                case self::UNDO:
                case self::UNDROP:
                case self::UNIFORM:
                case self::UNISTR:
                case self::UNLIMITED:
                case self::UNLOAD:
                case self::UNLOCK:
                case self::UNMATCHED:
                case self::UNNEST_INNERJ_DISTINCT_VIEW:
                case self::UNNEST_NOSEMIJ_NODISTINCTVIEW:
                case self::UNNEST_SEMIJ_VIEW:
                case self::UNNEST:
                case self::UNPACKED:
                case self::UNPIVOT:
                case self::UNPLUG:
                case self::UNPROTECTED:
                case self::UNQUIESCE:
                case self::UNRECOVERABLE:
                case self::UNRESTRICTED:
                case self::UNSUBSCRIBE:
                case self::UNTIL:
                case self::UNUSABLE:
                case self::UNUSED:
                case self::UPDATABLE:
                case self::UPDATED:
                case self::UPDATEXML:
                case self::UPD_INDEXES:
                case self::UPD_JOININDEX:
                case self::UPGRADE:
                case self::UPPER:
                case self::UPSERT:
                case self::UROWID:
                case self::USABLE:
                case self::USAGE:
                case self::USE_ANTI:
                case self::USE_CONCAT:
                case self::USE_CUBE:
                case self::USE_HASH_AGGREGATION:
                case self::USE_HASH_GBY_FOR_PUSHDOWN:
                case self::USE_HASH:
                case self::USE_HIDDEN_PARTITIONS:
                case self::USE_INVISIBLE_INDEXES:
                case self::USE_MERGE_CARTESIAN:
                case self::USE_MERGE:
                case self::USE_NL:
                case self::USE_NL_WITH_INDEX:
                case self::USE_PRIVATE_OUTLINES:
                case self::USER_DATA:
                case self::USER_DEFINED:
                case self::USERENV:
                case self::USERGROUP:
                case self::USER_RECYCLEBIN:
                case self::USERS:
                case self::USER_TABLESPACES:
                case self::USER:
                case self::USE_SEMI:
                case self::USE_STORED_OUTLINES:
                case self::USE_TTT_FOR_GSETS:
                case self::USE:
                case self::USE_VECTOR_AGGREGATION:
                case self::USE_WEAK_NAME_RESL:
                case self::USING_NO_EXPAND:
                case self::USING:
                case self::UTF16BE:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::V1:
                case self::V2:
                case self::VALIDATE:
                case self::VALIDATION:
                case self::VALID_TIME_END:
                case self::VALUE:
                case self::VARCHAR2:
                case self::VARCHAR:
                case self::VARIABLE:
                case self::VAR_POP:
                case self::VARRAYS:
                case self::VARRAY:
                case self::VAR_SAMP:
                case self::VARYING:
                case self::VECTOR_READ_TRACE:
                case self::VECTOR_READ:
                case self::VECTOR_TRANSFORM_DIMS:
                case self::VECTOR_TRANSFORM_FACT:
                case self::VECTOR_TRANSFORM:
                case self::VERIFIER:
                case self::VERIFY:
                case self::VERSIONING:
                case self::VERSIONS_ENDSCN:
                case self::VERSIONS_ENDTIME:
                case self::VERSIONS_OPERATION:
                case self::VERSIONS_STARTSCN:
                case self::VERSIONS_STARTTIME:
                case self::VERSIONS:
                case self::VERSIONS_XID:
                case self::VERSION:
                case self::VIOLATION:
                case self::VIRTUAL:
                case self::VISIBILITY:
                case self::VISIBLE:
                case self::VOLUME:
                case self::VSIZE:
                case self::WAIT:
                case self::WALLET:
                case self::WARNING:
                case self::WEEKS:
                case self::WEEK:
                case self::WELLFORMED:
                case self::WHENEVER:
                case self::WHEN:
                case self::WHILE:
                case self::WHITESPACE:
                case self::WIDTH_BUCKET:
                case self::WITHIN:
                case self::WITHOUT:
                case self::WITH_PLSQL:
                case self::WORK:
                case self::WRAPPED:
                case self::WRAPPER:
                case self::WRITE:
                case self::XDB_FASTPATH_INSERT:
                case self::X_DYN_PRUNE:
                case self::XID:
                case self::XML2OBJECT:
                case self::XMLAGG:
                case self::XMLATTRIBUTES:
                case self::XMLCAST:
                case self::XMLCDATA:
                case self::XMLCOLATTVAL:
                case self::XMLCOMMENT:
                case self::XMLCONCAT:
                case self::XMLDIFF:
                case self::XML_DML_RWT_STMT:
                case self::XMLELEMENT:
                case self::XMLEXISTS2:
                case self::XMLEXISTS:
                case self::XMLFOREST:
                case self::XMLINDEX_REWRITE_IN_SELECT:
                case self::XMLINDEX_REWRITE:
                case self::XMLINDEX_SEL_IDX_TBL:
                case self::XMLISNODE:
                case self::XMLISVALID:
                case self::XMLNAMESPACES:
                case self::XMLPARSE:
                case self::XMLPATCH:
                case self::XMLPI:
                case self::XMLQUERYVAL:
                case self::XMLQUERY:
                case self::XMLROOT:
                case self::XMLSCHEMA:
                case self::XMLSERIALIZE:
                case self::XMLTABLE:
                case self::XMLTRANSFORMBLOB:
                case self::XMLTRANSFORM:
                case self::XMLTYPE:
                case self::XML:
                case self::XPATHTABLE:
                case self::XS_SYS_CONTEXT:
                case self::XS:
                case self::YEARS:
                case self::YEAR:
                case self::YES:
                case self::YMINTERVAL_UNCONSTRAINED:
                case self::ZONEMAP:
                case self::ZONE:
                case self::PREDICTION:
                case self::PREDICTION_BOUNDS:
                case self::PREDICTION_COST:
                case self::PREDICTION_DETAILS:
                case self::PREDICTION_PROBABILITY:
                case self::PREDICTION_SET:
                case self::CUME_DIST:
                case self::DENSE_RANK:
                case self::LISTAGG:
                case self::PERCENT_RANK:
                case self::PERCENTILE_CONT:
                case self::PERCENTILE_DISC:
                case self::RANK:
                case self::AVG:
                case self::CORR:
                case self::COVAR_:
                case self::LAG:
                case self::LEAD:
                case self::MAX:
                case self::MEDIAN:
                case self::MIN:
                case self::NTILE:
                case self::NVL:
                case self::RATIO_TO_REPORT:
                case self::REGR_:
                case self::ROUND:
                case self::ROW_NUMBER:
                case self::SUBSTR:
                case self::TO_CHAR:
                case self::TRIM:
                case self::SUM:
                case self::STDDEV:
                case self::VAR_:
                case self::VARIANCE:
                case self::LEAST:
                case self::GREATEST:
                case self::TO_DATE:
                case self::PERIOD:
                case self::DELIMITED_ID:
                case self::INTRODUCER:
                case self::REGULAR_ID:
                    $this->setState(7663);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 965, $this->ctx)) {
                        case 1:
                            $this->setState(7661);
                            $this->column_definition();
                            break;

                        case 2:
                            $this->setState(7662);
                            $this->virtual_column_definition();
                            break;
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(7668);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COLUMN || $_la === self::LOB || $_la === self::NESTED || $_la === self::VARRAY || $_la === self::XMLTYPE) {
                $this->setState(7667);
                $this->column_properties();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alter_varray_col_properties(): Context\Alter_varray_col_propertiesContext
    {
        $localContext = new Context\Alter_varray_col_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 808, self::RULE_alter_varray_col_properties);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7670);
            $this->match(self::MODIFY);
            $this->setState(7671);
            $this->match(self::VARRAY);
            $this->setState(7672);
            $this->varray_item();
            $this->setState(7673);
            $this->match(self::LEFT_PAREN);
            $this->setState(7674);
            $this->modify_lob_parameters();
            $this->setState(7675);
            $this->match(self::RIGHT_PAREN);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function varray_col_properties(): Context\Varray_col_propertiesContext
    {
        $localContext = new Context\Varray_col_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 810, self::RULE_varray_col_properties);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7677);
            $this->match(self::VARRAY);
            $this->setState(7678);
            $this->varray_item();
            $this->setState(7684);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 969, $this->ctx)) {
                case 1:
                    $this->setState(7680);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ELEMENT || $_la === self::IS || $_la === self::NOT || $_la === self::SUBSTITUTABLE) {
                        $this->setState(7679);
                        $this->substitutable_column_clause();
                    }
                    $this->setState(7682);
                    $this->varray_storage_clause();
                    break;

                case 2:
                    $this->setState(7683);
                    $this->substitutable_column_clause();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function varray_storage_clause(): Context\Varray_storage_clauseContext
    {
        $localContext = new Context\Varray_storage_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 812, self::RULE_varray_storage_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7686);
            $this->match(self::STORE);
            $this->setState(7687);
            $this->match(self::AS);
            $this->setState(7689);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::BASICFILE || $_la === self::SECUREFILE) {
                $this->setState(7688);

                $_la = $this->input->LA(1);

                if (!($_la === self::BASICFILE || $_la === self::SECUREFILE)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(7691);
            $this->match(self::LOB);
            $this->setState(7700);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 972, $this->ctx)) {
                case 1:
                    $this->setState(7693);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ABORT) | (1 << self::ABS) | (1 << self::ACCESS) | (1 << self::ACCESSED) | (1 << self::ACCOUNT) | (1 << self::ACL) | (1 << self::ACOS) | (1 << self::ACTION) | (1 << self::ACTIONS) | (1 << self::ACTIVATE) | (1 << self::ACTIVE) | (1 << self::ACTIVE_COMPONENT) | (1 << self::ACTIVE_DATA) | (1 << self::ACTIVE_FUNCTION) | (1 << self::ACTIVE_TAG) | (1 << self::ACTIVITY) | (1 << self::ADAPTIVE_PLAN) | (1 << self::ADD) | (1 << self::ADD_COLUMN) | (1 << self::ADD_GROUP) | (1 << self::ADD_MONTHS) | (1 << self::ADJ_DATE) | (1 << self::ADMIN) | (1 << self::ADMINISTER) | (1 << self::ADMINISTRATOR) | (1 << self::ADVANCED) | (1 << self::ADVISE) | (1 << self::ADVISOR) | (1 << self::AFD_DISKSTRING) | (1 << self::AFTER) | (1 << self::AGENT) | (1 << self::AGGREGATE) | (1 << self::A_LETTER) | (1 << self::ALIAS) | (1 << self::ALLOCATE) | (1 << self::ALLOW) | (1 << self::ALL_ROWS) | (1 << self::ALWAYS) | (1 << self::ANALYZE) | (1 << self::ANCILLARY) | (1 << self::AND_EQUAL) | (1 << self::ANOMALY) | (1 << self::ANSI_REARCH) | (1 << self::ANTIJOIN) | (1 << self::ANYSCHEMA) | (1 << self::APPEND) | (1 << self::APPENDCHILDXML) | (1 << self::APPEND_VALUES) | (1 << self::APPLICATION) | (1 << self::APPLY) | (1 << self::APPROX_COUNT_DISTINCT) | (1 << self::ARCHIVAL) | (1 << self::ARCHIVE) | (1 << self::ARCHIVED) | (1 << self::ARCHIVELOG) | (1 << self::ARRAY) | (1 << self::ASCII))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::ASCIISTR - 64)) | (1 << (self::ASIN - 64)) | (1 << (self::ASIS - 64)) | (1 << (self::ASSEMBLY - 64)) | (1 << (self::ASSIGN - 64)) | (1 << (self::ASSOCIATE - 64)) | (1 << (self::ASYNC - 64)) | (1 << (self::ASYNCHRONOUS - 64)) | (1 << (self::ATAN2 - 64)) | (1 << (self::ATAN - 64)) | (1 << (self::AT - 64)) | (1 << (self::ATTRIBUTE - 64)) | (1 << (self::ATTRIBUTES - 64)) | (1 << (self::AUTHENTICATED - 64)) | (1 << (self::AUTHENTICATION - 64)) | (1 << (self::AUTHID - 64)) | (1 << (self::AUTHORIZATION - 64)) | (1 << (self::AUTOALLOCATE - 64)) | (1 << (self::AUTO - 64)) | (1 << (self::AUTOEXTEND - 64)) | (1 << (self::AUTO_LOGIN - 64)) | (1 << (self::AUTOMATIC - 64)) | (1 << (self::AUTONOMOUS_TRANSACTION - 64)) | (1 << (self::AUTO_REOPTIMIZE - 64)) | (1 << (self::AVAILABILITY - 64)) | (1 << (self::AVRO - 64)) | (1 << (self::BACKGROUND - 64)) | (1 << (self::BACKUP - 64)) | (1 << (self::BASIC - 64)) | (1 << (self::BASICFILE - 64)) | (1 << (self::BATCH - 64)) | (1 << (self::BATCHSIZE - 64)) | (1 << (self::BATCH_TABLE_ACCESS_BY_ROWID - 64)) | (1 << (self::BECOME - 64)) | (1 << (self::BEFORE - 64)) | (1 << (self::BEGIN - 64)) | (1 << (self::BEGINNING - 64)) | (1 << (self::BEGIN_OUTLINE_DATA - 64)) | (1 << (self::BEHALF - 64)) | (1 << (self::BEQUEATH - 64)) | (1 << (self::BFILE - 64)) | (1 << (self::BFILENAME - 64)) | (1 << (self::BIGFILE - 64)) | (1 << (self::BINARY - 64)) | (1 << (self::BINARY_DOUBLE - 64)) | (1 << (self::BINARY_DOUBLE_INFINITY - 64)) | (1 << (self::BINARY_DOUBLE_NAN - 64)) | (1 << (self::BINARY_FLOAT - 64)) | (1 << (self::BINARY_FLOAT_INFINITY - 64)) | (1 << (self::BINARY_FLOAT_NAN - 64)) | (1 << (self::BINARY_INTEGER - 64)) | (1 << (self::BIND_AWARE - 64)) | (1 << (self::BINDING - 64)) | (1 << (self::BIN_TO_NUM - 64)) | (1 << (self::BITAND - 64)) | (1 << (self::BITMAP_AND - 64)) | (1 << (self::BITMAP - 64)) | (1 << (self::BITMAPS - 64)) | (1 << (self::BITMAP_TREE - 64)) | (1 << (self::BITS - 64)))) !== 0) || (((($_la - 128)) & ~0x3f) === 0 && ((1 << ($_la - 128)) & ((1 << (self::BLOB - 128)) | (1 << (self::BLOCK - 128)) | (1 << (self::BLOCK_RANGE - 128)) | (1 << (self::BLOCKS - 128)) | (1 << (self::BLOCKSIZE - 128)) | (1 << (self::BODY - 128)) | (1 << (self::BOOLEAN - 128)) | (1 << (self::BOTH - 128)) | (1 << (self::BOUND - 128)) | (1 << (self::BRANCH - 128)) | (1 << (self::BREADTH - 128)) | (1 << (self::BROADCAST - 128)) | (1 << (self::BSON - 128)) | (1 << (self::BUFFER - 128)) | (1 << (self::BUFFER_CACHE - 128)) | (1 << (self::BUFFER_POOL - 128)) | (1 << (self::BUILD - 128)) | (1 << (self::BULK - 128)) | (1 << (self::BYPASS_RECURSIVE_CHECK - 128)) | (1 << (self::BYPASS_UJVC - 128)) | (1 << (self::BYTE - 128)) | (1 << (self::CACHE - 128)) | (1 << (self::CACHE_CB - 128)) | (1 << (self::CACHE_INSTANCES - 128)) | (1 << (self::CACHE_TEMP_TABLE - 128)) | (1 << (self::CACHING - 128)) | (1 << (self::CALCULATED - 128)) | (1 << (self::CALLBACK - 128)) | (1 << (self::CALL - 128)) | (1 << (self::CANCEL - 128)) | (1 << (self::CAPACITY - 128)) | (1 << (self::CARDINALITY - 128)) | (1 << (self::CASCADE - 128)) | (1 << (self::CASE - 128)) | (1 << (self::CAST - 128)) | (1 << (self::CATEGORY - 128)) | (1 << (self::CDBDEFAULT - 128)) | (1 << (self::CEIL - 128)) | (1 << (self::CELL_FLASH_CACHE - 128)) | (1 << (self::CERTIFICATE - 128)) | (1 << (self::CFILE - 128)) | (1 << (self::CHAINED - 128)) | (1 << (self::CHANGE - 128)) | (1 << (self::CHANGE_DUPKEY_ERROR_INDEX - 128)) | (1 << (self::CHARACTER - 128)) | (1 << (self::CHAR - 128)) | (1 << (self::CHAR_CS - 128)) | (1 << (self::CHARTOROWID - 128)) | (1 << (self::CHECK_ACL_REWRITE - 128)) | (1 << (self::CHECKPOINT - 128)) | (1 << (self::CHILD - 128)) | (1 << (self::CHOOSE - 128)) | (1 << (self::CHR - 128)) | (1 << (self::CHUNK - 128)) | (1 << (self::CLASS - 128)) | (1 << (self::CLASSIFIER - 128)) | (1 << (self::CLEANUP - 128)) | (1 << (self::CLEAR - 128)) | (1 << (self::C_LETTER - 128)) | (1 << (self::CLIENT - 128)))) !== 0) || (((($_la - 192)) & ~0x3f) === 0 && ((1 << ($_la - 192)) & ((1 << (self::CLOB - 192)) | (1 << (self::CLONE - 192)) | (1 << (self::CLOSE_CACHED_OPEN_CURSORS - 192)) | (1 << (self::CLOSE - 192)) | (1 << (self::CLUSTER_BY_ROWID - 192)) | (1 << (self::CLUSTER - 192)) | (1 << (self::CLUSTER_DETAILS - 192)) | (1 << (self::CLUSTER_DISTANCE - 192)) | (1 << (self::CLUSTER_ID - 192)) | (1 << (self::CLUSTERING - 192)) | (1 << (self::CLUSTERING_FACTOR - 192)) | (1 << (self::CLUSTER_PROBABILITY - 192)) | (1 << (self::CLUSTER_SET - 192)) | (1 << (self::COALESCE - 192)) | (1 << (self::COALESCE_SQ - 192)) | (1 << (self::COARSE - 192)) | (1 << (self::CO_AUTH_IND - 192)) | (1 << (self::COLD - 192)) | (1 << (self::COLLECT - 192)) | (1 << (self::COLUMNAR - 192)) | (1 << (self::COLUMN_AUTH_INDICATOR - 192)) | (1 << (self::COLUMN - 192)) | (1 << (self::COLUMNS - 192)) | (1 << (self::COLUMN_STATS - 192)) | (1 << (self::COLUMN_VALUE - 192)) | (1 << (self::COMMENT - 192)) | (1 << (self::COMMIT - 192)) | (1 << (self::COMMITTED - 192)) | (1 << (self::COMMON_DATA - 192)) | (1 << (self::COMPACT - 192)) | (1 << (self::COMPATIBILITY - 192)) | (1 << (self::COMPILE - 192)) | (1 << (self::COMPLETE - 192)) | (1 << (self::COMPLIANCE - 192)) | (1 << (self::COMPONENT - 192)) | (1 << (self::COMPONENTS - 192)) | (1 << (self::COMPOSE - 192)) | (1 << (self::COMPOSITE - 192)) | (1 << (self::COMPOSITE_LIMIT - 192)) | (1 << (self::COMPOUND - 192)) | (1 << (self::COMPUTE - 192)) | (1 << (self::CONCAT - 192)) | (1 << (self::CON_DBID_TO_ID - 192)) | (1 << (self::CONDITIONAL - 192)) | (1 << (self::CONDITION - 192)) | (1 << (self::CONFIRM - 192)) | (1 << (self::CONFORMING - 192)) | (1 << (self::CON_GUID_TO_ID - 192)) | (1 << (self::CON_ID - 192)) | (1 << (self::CON_NAME_TO_ID - 192)) | (1 << (self::CONNECT_BY_CB_WHR_ONLY - 192)) | (1 << (self::CONNECT_BY_COMBINE_SW - 192)) | (1 << (self::CONNECT_BY_COST_BASED - 192)) | (1 << (self::CONNECT_BY_ELIM_DUPS - 192)) | (1 << (self::CONNECT_BY_FILTERING - 192)) | (1 << (self::CONNECT_BY_ISCYCLE - 192)) | (1 << (self::CONNECT_BY_ISLEAF - 192)) | (1 << (self::CONNECT_BY_ROOT - 192)) | (1 << (self::CONNECT_TIME - 192)) | (1 << (self::CONSIDER - 192)) | (1 << (self::CONSISTENT - 192)) | (1 << (self::CONSTANT - 192)))) !== 0) || (((($_la - 256)) & ~0x3f) === 0 && ((1 << ($_la - 256)) & ((1 << (self::CONST - 256)) | (1 << (self::CONSTRAINT - 256)) | (1 << (self::CONSTRAINTS - 256)) | (1 << (self::CONSTRUCTOR - 256)) | (1 << (self::CONTAINER - 256)) | (1 << (self::CONTAINER_DATA - 256)) | (1 << (self::CONTAINERS - 256)) | (1 << (self::CONTENT - 256)) | (1 << (self::CONTENTS - 256)) | (1 << (self::CONTEXT - 256)) | (1 << (self::CONTINUE - 256)) | (1 << (self::CONTROLFILE - 256)) | (1 << (self::CON_UID_TO_ID - 256)) | (1 << (self::CONVERT - 256)) | (1 << (self::COOKIE - 256)) | (1 << (self::COPY - 256)) | (1 << (self::CORR_K - 256)) | (1 << (self::CORR_S - 256)) | (1 << (self::CORRUPTION - 256)) | (1 << (self::CORRUPT_XID_ALL - 256)) | (1 << (self::CORRUPT_XID - 256)) | (1 << (self::COS - 256)) | (1 << (self::COSH - 256)) | (1 << (self::COST - 256)) | (1 << (self::COST_XML_QUERY_REWRITE - 256)) | (1 << (self::COUNT - 256)) | (1 << (self::COVAR_POP - 256)) | (1 << (self::COVAR_SAMP - 256)) | (1 << (self::CPU_COSTING - 256)) | (1 << (self::CPU_PER_CALL - 256)) | (1 << (self::CPU_PER_SESSION - 256)) | (1 << (self::CRASH - 256)) | (1 << (self::CREATE_FILE_DEST - 256)) | (1 << (self::CREATE_STORED_OUTLINES - 256)) | (1 << (self::CREATION - 256)) | (1 << (self::CREDENTIAL - 256)) | (1 << (self::CRITICAL - 256)) | (1 << (self::CROSS - 256)) | (1 << (self::CROSSEDITION - 256)) | (1 << (self::CSCONVERT - 256)) | (1 << (self::CUBE_AJ - 256)) | (1 << (self::CUBE - 256)) | (1 << (self::CUBE_GB - 256)) | (1 << (self::CUBE_SJ - 256)) | (1 << (self::CUME_DISTM - 256)) | (1 << (self::CURRENT - 256)) | (1 << (self::CURRENT_DATE - 256)) | (1 << (self::CURRENT_SCHEMA - 256)) | (1 << (self::CURRENT_TIME - 256)) | (1 << (self::CURRENT_TIMESTAMP - 256)) | (1 << (self::CURRENT_USER - 256)) | (1 << (self::CURRENTV - 256)) | (1 << (self::CURSOR - 256)) | (1 << (self::CURSOR_SHARING_EXACT - 256)) | (1 << (self::CURSOR_SPECIFIC_SEGMENT - 256)) | (1 << (self::CUSTOMDATUM - 256)) | (1 << (self::CV - 256)) | (1 << (self::CYCLE - 256)) | (1 << (self::DANGLING - 256)) | (1 << (self::DATABASE - 256)) | (1 << (self::DATA - 256)) | (1 << (self::DATAFILE - 256)) | (1 << (self::DATAFILES - 256)))) !== 0) || (((($_la - 321)) & ~0x3f) === 0 && ((1 << ($_la - 321)) & ((1 << (self::DATAMOVEMENT - 321)) | (1 << (self::DATAOBJNO - 321)) | (1 << (self::DATAOBJ_TO_MAT_PARTITION - 321)) | (1 << (self::DATAOBJ_TO_PARTITION - 321)) | (1 << (self::DATAPUMP - 321)) | (1 << (self::DATA_SECURITY_REWRITE_LIMIT - 321)) | (1 << (self::DATE_MODE - 321)) | (1 << (self::DAY - 321)) | (1 << (self::DAYS - 321)) | (1 << (self::DBA - 321)) | (1 << (self::DBA_RECYCLEBIN - 321)) | (1 << (self::DBMS_STATS - 321)) | (1 << (self::DB_ROLE_CHANGE - 321)) | (1 << (self::DBTIMEZONE - 321)) | (1 << (self::DB_UNIQUE_NAME - 321)) | (1 << (self::DB_VERSION - 321)) | (1 << (self::DDL - 321)) | (1 << (self::DEALLOCATE - 321)) | (1 << (self::DEBUG - 321)) | (1 << (self::DEBUGGER - 321)) | (1 << (self::DEC - 321)) | (1 << (self::DECIMAL - 321)) | (1 << (self::DECLARE - 321)) | (1 << (self::DECOMPOSE - 321)) | (1 << (self::DECORRELATE - 321)) | (1 << (self::DECR - 321)) | (1 << (self::DECREMENT - 321)) | (1 << (self::DECRYPT - 321)) | (1 << (self::DEDUPLICATE - 321)) | (1 << (self::DEFAULTS - 321)) | (1 << (self::DEFERRABLE - 321)) | (1 << (self::DEFERRED - 321)) | (1 << (self::DEFINED - 321)) | (1 << (self::DEFINE - 321)) | (1 << (self::DEFINER - 321)) | (1 << (self::DEGREE - 321)) | (1 << (self::DELAY - 321)) | (1 << (self::DELEGATE - 321)) | (1 << (self::DELETE_ALL - 321)) | (1 << (self::DELETE - 321)) | (1 << (self::DELETEXML - 321)) | (1 << (self::DEMAND - 321)) | (1 << (self::DENSE_RANKM - 321)) | (1 << (self::DEPENDENT - 321)) | (1 << (self::DEPTH - 321)) | (1 << (self::DEQUEUE - 321)) | (1 << (self::DEREF - 321)) | (1 << (self::DEREF_NO_REWRITE - 321)) | (1 << (self::DESTROY - 321)) | (1 << (self::DETACHED - 321)) | (1 << (self::DETERMINES - 321)) | (1 << (self::DETERMINISTIC - 321)) | (1 << (self::DICTIONARY - 321)) | (1 << (self::DIMENSION - 321)) | (1 << (self::DIMENSIONS - 321)) | (1 << (self::DIRECT_LOAD - 321)) | (1 << (self::DIRECTORY - 321)) | (1 << (self::DIRECT_PATH - 321)) | (1 << (self::DISABLE_ALL - 321)) | (1 << (self::DISABLE - 321)) | (1 << (self::DISABLE_PARALLEL_DML - 321)))) !== 0) || (((($_la - 385)) & ~0x3f) === 0 && ((1 << ($_la - 385)) & ((1 << (self::DISABLE_PRESET - 385)) | (1 << (self::DISABLE_RPKE - 385)) | (1 << (self::DISALLOW - 385)) | (1 << (self::DISASSOCIATE - 385)) | (1 << (self::DISCARD - 385)) | (1 << (self::DISCONNECT - 385)) | (1 << (self::DISK - 385)) | (1 << (self::DISKGROUP - 385)) | (1 << (self::DISKS - 385)) | (1 << (self::DISMOUNT - 385)) | (1 << (self::DISTINGUISHED - 385)) | (1 << (self::DISTRIBUTED - 385)) | (1 << (self::DISTRIBUTE - 385)) | (1 << (self::DML - 385)) | (1 << (self::DML_UPDATE - 385)) | (1 << (self::DOCFIDELITY - 385)) | (1 << (self::DOCUMENT - 385)) | (1 << (self::DOMAIN_INDEX_FILTER - 385)) | (1 << (self::DOMAIN_INDEX_NO_SORT - 385)) | (1 << (self::DOMAIN_INDEX_SORT - 385)) | (1 << (self::DOUBLE - 385)) | (1 << (self::DOWNGRADE - 385)) | (1 << (self::DRIVING_SITE - 385)) | (1 << (self::DROP_COLUMN - 385)) | (1 << (self::DROP_GROUP - 385)) | (1 << (self::DSINTERVAL_UNCONSTRAINED - 385)) | (1 << (self::DST_UPGRADE_INSERT_CONV - 385)) | (1 << (self::DUMP - 385)) | (1 << (self::DUPLICATE - 385)) | (1 << (self::DV - 385)) | (1 << (self::DYNAMIC - 385)) | (1 << (self::DYNAMIC_SAMPLING - 385)) | (1 << (self::DYNAMIC_SAMPLING_EST_CDN - 385)) | (1 << (self::EACH - 385)) | (1 << (self::EDITIONABLE - 385)) | (1 << (self::EDITION - 385)) | (1 << (self::EDITIONING - 385)) | (1 << (self::EDITIONS - 385)) | (1 << (self::ELEMENT - 385)) | (1 << (self::ELIM_GROUPBY - 385)) | (1 << (self::ELIMINATE_JOIN - 385)) | (1 << (self::ELIMINATE_OBY - 385)) | (1 << (self::ELIMINATE_OUTER_JOIN - 385)) | (1 << (self::EM - 385)) | (1 << (self::EMPTY_BLOB - 385)) | (1 << (self::EMPTY_CLOB - 385)) | (1 << (self::EMPTY - 385)) | (1 << (self::ENABLE_ALL - 385)) | (1 << (self::ENABLE - 385)) | (1 << (self::ENABLE_PARALLEL_DML - 385)) | (1 << (self::ENABLE_PRESET - 385)) | (1 << (self::ENCODING - 385)) | (1 << (self::ENCRYPT - 385)) | (1 << (self::ENCRYPTION - 385)) | (1 << (self::END_OUTLINE_DATA - 385)) | (1 << (self::ENFORCED - 385)) | (1 << (self::ENFORCE - 385)))) !== 0) || (((($_la - 449)) & ~0x3f) === 0 && ((1 << ($_la - 449)) & ((1 << (self::ENQUEUE - 449)) | (1 << (self::ENTERPRISE - 449)) | (1 << (self::ENTITYESCAPING - 449)) | (1 << (self::ENTRY - 449)) | (1 << (self::EQUIPART - 449)) | (1 << (self::ERR - 449)) | (1 << (self::ERROR_ARGUMENT - 449)) | (1 << (self::ERROR - 449)) | (1 << (self::ERROR_ON_OVERLAP_TIME - 449)) | (1 << (self::ERRORS - 449)) | (1 << (self::ESCAPE - 449)) | (1 << (self::ESTIMATE - 449)) | (1 << (self::EVAL - 449)) | (1 << (self::EVALNAME - 449)) | (1 << (self::EVALUATE - 449)) | (1 << (self::EVALUATION - 449)) | (1 << (self::EVENTS - 449)) | (1 << (self::EVERY - 449)) | (1 << (self::EXCEPT - 449)) | (1 << (self::EXCEPTION - 449)) | (1 << (self::EXCEPTION_INIT - 449)) | (1 << (self::EXCEPTIONS - 449)) | (1 << (self::EXCHANGE - 449)) | (1 << (self::EXCLUDE - 449)) | (1 << (self::EXCLUDING - 449)) | (1 << (self::EXECUTE - 449)) | (1 << (self::EXEMPT - 449)) | (1 << (self::EXISTING - 449)) | (1 << (self::EXISTS - 449)) | (1 << (self::EXISTSNODE - 449)) | (1 << (self::EXIT - 449)) | (1 << (self::EXPAND_GSET_TO_UNION - 449)) | (1 << (self::EXPAND_TABLE - 449)) | (1 << (self::EXP - 449)) | (1 << (self::EXPIRE - 449)) | (1 << (self::EXPLAIN - 449)) | (1 << (self::EXPLOSION - 449)) | (1 << (self::EXPORT - 449)) | (1 << (self::EXPR_CORR_CHECK - 449)) | (1 << (self::EXPRESS - 449)) | (1 << (self::EXTENDS - 449)) | (1 << (self::EXTENT - 449)) | (1 << (self::EXTENTS - 449)) | (1 << (self::EXTERNAL - 449)) | (1 << (self::EXTERNALLY - 449)) | (1 << (self::EXTRACTCLOBXML - 449)) | (1 << (self::EXTRACT - 449)) | (1 << (self::EXTRACTVALUE - 449)) | (1 << (self::EXTRA - 449)) | (1 << (self::FACILITY - 449)) | (1 << (self::FACT - 449)) | (1 << (self::FACTOR - 449)) | (1 << (self::FACTORIZE_JOIN - 449)) | (1 << (self::FAILED - 449)) | (1 << (self::FAILED_LOGIN_ATTEMPTS - 449)) | (1 << (self::FAILGROUP - 449)) | (1 << (self::FAILOVER - 449)) | (1 << (self::FAILURE - 449)) | (1 << (self::FALSE - 449)) | (1 << (self::FAMILY - 449)) | (1 << (self::FAR - 449)) | (1 << (self::FAST - 449)) | (1 << (self::FASTSTART - 449)))) !== 0) || (((($_la - 513)) & ~0x3f) === 0 && ((1 << ($_la - 513)) & ((1 << (self::FBTSCAN - 513)) | (1 << (self::FEATURE_DETAILS - 513)) | (1 << (self::FEATURE_ID - 513)) | (1 << (self::FEATURE_SET - 513)) | (1 << (self::FEATURE_VALUE - 513)) | (1 << (self::FETCH - 513)) | (1 << (self::FILE - 513)) | (1 << (self::FILE_NAME_CONVERT - 513)) | (1 << (self::FILESYSTEM_LIKE_LOGGING - 513)) | (1 << (self::FILTER - 513)) | (1 << (self::FINAL - 513)) | (1 << (self::FINE - 513)) | (1 << (self::FINISH - 513)) | (1 << (self::FIRST - 513)) | (1 << (self::FIRSTM - 513)) | (1 << (self::FIRST_ROWS - 513)) | (1 << (self::FIRST_VALUE - 513)) | (1 << (self::FIXED_VIEW_DATA - 513)) | (1 << (self::FLAGGER - 513)) | (1 << (self::FLASHBACK - 513)) | (1 << (self::FLASH_CACHE - 513)) | (1 << (self::FLOAT - 513)) | (1 << (self::FLOB - 513)) | (1 << (self::FLOOR - 513)) | (1 << (self::FLUSH - 513)) | (1 << (self::FOLDER - 513)) | (1 << (self::FOLLOWING - 513)) | (1 << (self::FOLLOWS - 513)) | (1 << (self::FORALL - 513)) | (1 << (self::FORCE - 513)) | (1 << (self::FORCE_XML_QUERY_REWRITE - 513)) | (1 << (self::FOREIGN - 513)) | (1 << (self::FOREVER - 513)) | (1 << (self::FORMAT - 513)) | (1 << (self::FORWARD - 513)) | (1 << (self::FRAGMENT_NUMBER - 513)) | (1 << (self::FREELIST - 513)) | (1 << (self::FREELISTS - 513)) | (1 << (self::FREEPOOLS - 513)) | (1 << (self::FRESH - 513)) | (1 << (self::FROM_TZ - 513)) | (1 << (self::FULL - 513)) | (1 << (self::FULL_OUTER_JOIN_TO_OUTER - 513)) | (1 << (self::FUNCTION - 513)) | (1 << (self::FUNCTIONS - 513)) | (1 << (self::GATHER_OPTIMIZER_STATISTICS - 513)) | (1 << (self::GATHER_PLAN_STATISTICS - 513)) | (1 << (self::GBY_CONC_ROLLUP - 513)) | (1 << (self::GBY_PUSHDOWN - 513)) | (1 << (self::GENERATED - 513)) | (1 << (self::GET - 513)) | (1 << (self::GLOBAL - 513)) | (1 << (self::GLOBALLY - 513)) | (1 << (self::GLOBAL_NAME - 513)) | (1 << (self::GLOBAL_TOPIC_ENABLED - 513)) | (1 << (self::GROUP_BY - 513)) | (1 << (self::GROUP_ID - 513)) | (1 << (self::GROUPING - 513)) | (1 << (self::GROUPING_ID - 513)))) !== 0) || (((($_la - 577)) & ~0x3f) === 0 && ((1 << ($_la - 577)) & ((1 << (self::GROUPS - 577)) | (1 << (self::GUARANTEED - 577)) | (1 << (self::GUARANTEE - 577)) | (1 << (self::GUARD - 577)) | (1 << (self::HASH_AJ - 577)) | (1 << (self::HASH - 577)) | (1 << (self::HASHKEYS - 577)) | (1 << (self::HASH_SJ - 577)) | (1 << (self::HEADER - 577)) | (1 << (self::HEAP - 577)) | (1 << (self::HELP - 577)) | (1 << (self::HEXTORAW - 577)) | (1 << (self::HEXTOREF - 577)) | (1 << (self::HIDDEN_KEYWORD - 577)) | (1 << (self::HIDE - 577)) | (1 << (self::HIERARCHY - 577)) | (1 << (self::HIGH - 577)) | (1 << (self::HINTSET_BEGIN - 577)) | (1 << (self::HINTSET_END - 577)) | (1 << (self::HOT - 577)) | (1 << (self::HOUR - 577)) | (1 << (self::HWM_BROKERED - 577)) | (1 << (self::HYBRID - 577)) | (1 << (self::IDENTIFIER - 577)) | (1 << (self::IDENTITY - 577)) | (1 << (self::IDGENERATORS - 577)) | (1 << (self::ID - 577)) | (1 << (self::IDLE_TIME - 577)) | (1 << (self::IF - 577)) | (1 << (self::IGNORE - 577)) | (1 << (self::IGNORE_OPTIM_EMBEDDED_HINTS - 577)) | (1 << (self::IGNORE_ROW_ON_DUPKEY_INDEX - 577)) | (1 << (self::IGNORE_WHERE_CLAUSE - 577)) | (1 << (self::ILM - 577)) | (1 << (self::IMMEDIATE - 577)) | (1 << (self::IMPACT - 577)) | (1 << (self::IMPORT - 577)) | (1 << (self::INACTIVE - 577)) | (1 << (self::INCLUDE - 577)) | (1 << (self::INCLUDE_VERSION - 577)) | (1 << (self::INCLUDING - 577)) | (1 << (self::INCREMENTAL - 577)) | (1 << (self::INCREMENT - 577)) | (1 << (self::INCR - 577)) | (1 << (self::INDENT - 577)) | (1 << (self::INDEX_ASC - 577)) | (1 << (self::INDEX_COMBINE - 577)) | (1 << (self::INDEX_DESC - 577)) | (1 << (self::INDEXED - 577)) | (1 << (self::INDEXES - 577)) | (1 << (self::INDEX_FFS - 577)) | (1 << (self::INDEX_FILTER - 577)) | (1 << (self::INDEXING - 577)) | (1 << (self::INDEX_JOIN - 577)) | (1 << (self::INDEX_ROWS - 577)) | (1 << (self::INDEX_RRS - 577)) | (1 << (self::INDEX_RS_ASC - 577)) | (1 << (self::INDEX_RS_DESC - 577)) | (1 << (self::INDEX_RS - 577)) | (1 << (self::INDEX_SCAN - 577)) | (1 << (self::INDEX_SKIP_SCAN - 577)))) !== 0) || (((($_la - 641)) & ~0x3f) === 0 && ((1 << ($_la - 641)) & ((1 << (self::INDEX_SS_ASC - 641)) | (1 << (self::INDEX_SS_DESC - 641)) | (1 << (self::INDEX_SS - 641)) | (1 << (self::INDEX_STATS - 641)) | (1 << (self::INDEXTYPE - 641)) | (1 << (self::INDEXTYPES - 641)) | (1 << (self::INDICATOR - 641)) | (1 << (self::INDICES - 641)) | (1 << (self::INFINITE - 641)) | (1 << (self::INFORMATIONAL - 641)) | (1 << (self::INHERIT - 641)) | (1 << (self::INITCAP - 641)) | (1 << (self::INITIAL - 641)) | (1 << (self::INITIALIZED - 641)) | (1 << (self::INITIALLY - 641)) | (1 << (self::INITRANS - 641)) | (1 << (self::INLINE - 641)) | (1 << (self::INLINE_XMLTYPE_NT - 641)) | (1 << (self::INMEMORY - 641)) | (1 << (self::IN_MEMORY_METADATA - 641)) | (1 << (self::INMEMORY_PRUNING - 641)) | (1 << (self::INNER - 641)) | (1 << (self::INOUT - 641)) | (1 << (self::INPLACE - 641)) | (1 << (self::INSERTCHILDXMLAFTER - 641)) | (1 << (self::INSERTCHILDXMLBEFORE - 641)) | (1 << (self::INSERTCHILDXML - 641)) | (1 << (self::INSERTXMLAFTER - 641)) | (1 << (self::INSERTXMLBEFORE - 641)) | (1 << (self::INSTANCE - 641)) | (1 << (self::INSTANCES - 641)) | (1 << (self::INSTANTIABLE - 641)) | (1 << (self::INSTANTLY - 641)) | (1 << (self::INSTEAD - 641)) | (1 << (self::INSTR2 - 641)) | (1 << (self::INSTR4 - 641)) | (1 << (self::INSTRB - 641)) | (1 << (self::INSTRC - 641)) | (1 << (self::INSTR - 641)) | (1 << (self::INTEGER - 641)) | (1 << (self::INTERLEAVED - 641)) | (1 << (self::INTERMEDIATE - 641)) | (1 << (self::INTERNAL_CONVERT - 641)) | (1 << (self::INTERNAL_USE - 641)) | (1 << (self::INTERPRETED - 641)) | (1 << (self::INTERVAL - 641)) | (1 << (self::INT - 641)) | (1 << (self::INVALIDATE - 641)) | (1 << (self::INVISIBLE - 641)) | (1 << (self::IN_XQUERY - 641)) | (1 << (self::ISOLATION - 641)) | (1 << (self::ISOLATION_LEVEL - 641)) | (1 << (self::ITERATE - 641)) | (1 << (self::ITERATION_NUMBER - 641)) | (1 << (self::JAVA - 641)) | (1 << (self::JOB - 641)) | (1 << (self::JOIN - 641)) | (1 << (self::JSON_ARRAYAGG - 641)) | (1 << (self::JSON_ARRAY - 641)))) !== 0) || (((($_la - 705)) & ~0x3f) === 0 && ((1 << ($_la - 705)) & ((1 << (self::JSON_EQUAL - 705)) | (1 << (self::JSON_EXISTS2 - 705)) | (1 << (self::JSON_EXISTS - 705)) | (1 << (self::JSONGET - 705)) | (1 << (self::JSON - 705)) | (1 << (self::JSON_OBJECTAGG - 705)) | (1 << (self::JSON_OBJECT - 705)) | (1 << (self::JSONPARSE - 705)) | (1 << (self::JSON_QUERY - 705)) | (1 << (self::JSON_SERIALIZE - 705)) | (1 << (self::JSON_TABLE - 705)) | (1 << (self::JSON_TEXTCONTAINS2 - 705)) | (1 << (self::JSON_TEXTCONTAINS - 705)) | (1 << (self::JSON_VALUE - 705)) | (1 << (self::KEEP_DUPLICATES - 705)) | (1 << (self::KEEP - 705)) | (1 << (self::KERBEROS - 705)) | (1 << (self::KEY - 705)) | (1 << (self::KEY_LENGTH - 705)) | (1 << (self::KEYSIZE - 705)) | (1 << (self::KEYS - 705)) | (1 << (self::KEYSTORE - 705)) | (1 << (self::KILL - 705)) | (1 << (self::LABEL - 705)) | (1 << (self::LANGUAGE - 705)) | (1 << (self::LAST_DAY - 705)) | (1 << (self::LAST - 705)) | (1 << (self::LAST_VALUE - 705)) | (1 << (self::LATERAL - 705)) | (1 << (self::LAX - 705)) | (1 << (self::LAYER - 705)) | (1 << (self::LDAP_REGISTRATION_ENABLED - 705)) | (1 << (self::LDAP_REGISTRATION - 705)) | (1 << (self::LDAP_REG_SYNC_INTERVAL - 705)) | (1 << (self::LEADING - 705)) | (1 << (self::LEFT - 705)) | (1 << (self::LENGTH2 - 705)) | (1 << (self::LENGTH4 - 705)) | (1 << (self::LENGTHB - 705)) | (1 << (self::LENGTHC - 705)) | (1 << (self::LENGTH - 705)) | (1 << (self::LESS - 705)) | (1 << (self::LEVEL - 705)) | (1 << (self::LEVELS - 705)) | (1 << (self::LIBRARY - 705)) | (1 << (self::LIFECYCLE - 705)) | (1 << (self::LIFE - 705)) | (1 << (self::LIFETIME - 705)) | (1 << (self::LIKE2 - 705)) | (1 << (self::LIKE4 - 705)) | (1 << (self::LIKEC - 705)) | (1 << (self::LIKE_EXPAND - 705)) | (1 << (self::LIMIT - 705)) | (1 << (self::LINEAR - 705)) | (1 << (self::LINK - 705)) | (1 << (self::LIST - 705)) | (1 << (self::LN - 705)) | (1 << (self::LNNVL - 705)) | (1 << (self::LOAD - 705)) | (1 << (self::LOB - 705)) | (1 << (self::LOBNVL - 705)) | (1 << (self::LOBS - 705)) | (1 << (self::LOCAL_INDEXES - 705)))) !== 0) || (((($_la - 769)) & ~0x3f) === 0 && ((1 << ($_la - 769)) & ((1 << (self::LOCAL - 769)) | (1 << (self::LOCALTIME - 769)) | (1 << (self::LOCALTIMESTAMP - 769)) | (1 << (self::LOCATION - 769)) | (1 << (self::LOCATOR - 769)) | (1 << (self::LOCKED - 769)) | (1 << (self::LOCKING - 769)) | (1 << (self::LOGFILE - 769)) | (1 << (self::LOGFILES - 769)) | (1 << (self::LOGGING - 769)) | (1 << (self::LOGICAL - 769)) | (1 << (self::LOGICAL_READS_PER_CALL - 769)) | (1 << (self::LOGICAL_READS_PER_SESSION - 769)) | (1 << (self::LOG - 769)) | (1 << (self::LOGMINING - 769)) | (1 << (self::LOGOFF - 769)) | (1 << (self::LOGON - 769)) | (1 << (self::LOG_READ_ONLY_VIOLATIONS - 769)) | (1 << (self::LONG - 769)) | (1 << (self::LOOP - 769)) | (1 << (self::LOWER - 769)) | (1 << (self::LOW - 769)) | (1 << (self::LPAD - 769)) | (1 << (self::LTRIM - 769)) | (1 << (self::MAIN - 769)) | (1 << (self::MAKE_REF - 769)) | (1 << (self::MANAGED - 769)) | (1 << (self::MANAGE - 769)) | (1 << (self::MANAGEMENT - 769)) | (1 << (self::MANAGER - 769)) | (1 << (self::MANUAL - 769)) | (1 << (self::MAP - 769)) | (1 << (self::MAPPING - 769)) | (1 << (self::MASTER - 769)) | (1 << (self::MATCHED - 769)) | (1 << (self::MATCHES - 769)) | (1 << (self::MATCH - 769)) | (1 << (self::MATCH_NUMBER - 769)) | (1 << (self::MATCH_RECOGNIZE - 769)) | (1 << (self::MATERIALIZED - 769)) | (1 << (self::MATERIALIZE - 769)) | (1 << (self::MAXARCHLOGS - 769)) | (1 << (self::MAXDATAFILES - 769)) | (1 << (self::MAXEXTENTS - 769)) | (1 << (self::MAXIMIZE - 769)) | (1 << (self::MAXINSTANCES - 769)) | (1 << (self::MAXLOGFILES - 769)) | (1 << (self::MAXLOGHISTORY - 769)) | (1 << (self::MAXLOGMEMBERS - 769)) | (1 << (self::MAX_SHARED_TEMP_SIZE - 769)) | (1 << (self::MAXSIZE - 769)) | (1 << (self::MAXTRANS - 769)) | (1 << (self::MAXVALUE - 769)) | (1 << (self::MEASURE - 769)) | (1 << (self::MEASURES - 769)) | (1 << (self::MEDIUM - 769)) | (1 << (self::MEMBER - 769)) | (1 << (self::MEMCOMPRESS - 769)) | (1 << (self::MEMORY - 769)) | (1 << (self::MERGEACTIONS - 769)) | (1 << (self::MERGE_AJ - 769)) | (1 << (self::MERGE_CONST_ON - 769)) | (1 << (self::MERGE - 769)))) !== 0) || (((($_la - 833)) & ~0x3f) === 0 && ((1 << ($_la - 833)) & ((1 << (self::MERGE_SJ - 833)) | (1 << (self::METADATA - 833)) | (1 << (self::METHOD - 833)) | (1 << (self::MIGRATE - 833)) | (1 << (self::MIGRATION - 833)) | (1 << (self::MINEXTENTS - 833)) | (1 << (self::MINIMIZE - 833)) | (1 << (self::MINIMUM - 833)) | (1 << (self::MINING - 833)) | (1 << (self::MINUS_NULL - 833)) | (1 << (self::MINUTE - 833)) | (1 << (self::MINVALUE - 833)) | (1 << (self::MIRRORCOLD - 833)) | (1 << (self::MIRRORHOT - 833)) | (1 << (self::MIRROR - 833)) | (1 << (self::MLSLABEL - 833)) | (1 << (self::MODEL_COMPILE_SUBQUERY - 833)) | (1 << (self::MODEL_DONTVERIFY_UNIQUENESS - 833)) | (1 << (self::MODEL_DYNAMIC_SUBQUERY - 833)) | (1 << (self::MODEL_MIN_ANALYSIS - 833)) | (1 << (self::MODEL - 833)) | (1 << (self::MODEL_NB - 833)) | (1 << (self::MODEL_NO_ANALYSIS - 833)) | (1 << (self::MODEL_PBY - 833)) | (1 << (self::MODEL_PUSH_REF - 833)) | (1 << (self::MODEL_SV - 833)) | (1 << (self::MODIFICATION - 833)) | (1 << (self::MODIFY_COLUMN_TYPE - 833)) | (1 << (self::MODIFY - 833)) | (1 << (self::MOD - 833)) | (1 << (self::MODULE - 833)) | (1 << (self::MONITORING - 833)) | (1 << (self::MONITOR - 833)) | (1 << (self::MONTH - 833)) | (1 << (self::MONTHS_BETWEEN - 833)) | (1 << (self::MONTHS - 833)) | (1 << (self::MOUNT - 833)) | (1 << (self::MOUNTPATH - 833)) | (1 << (self::MOVEMENT - 833)) | (1 << (self::MOVE - 833)) | (1 << (self::MULTIDIMENSIONAL - 833)) | (1 << (self::MULTISET - 833)) | (1 << (self::MV_MERGE - 833)) | (1 << (self::NAMED - 833)) | (1 << (self::NAME - 833)) | (1 << (self::NAMESPACE - 833)) | (1 << (self::NAN - 833)) | (1 << (self::NANVL - 833)) | (1 << (self::NATIONAL - 833)) | (1 << (self::NATIVE_FULL_OUTER_JOIN - 833)) | (1 << (self::NATIVE - 833)) | (1 << (self::NATURAL - 833)) | (1 << (self::NAV - 833)) | (1 << (self::NCHAR_CS - 833)) | (1 << (self::NCHAR - 833)) | (1 << (self::NCHR - 833)) | (1 << (self::NCLOB - 833)) | (1 << (self::NEEDED - 833)) | (1 << (self::NEG - 833)) | (1 << (self::NESTED - 833)) | (1 << (self::NESTED_TABLE_FAST_INSERT - 833)))) !== 0) || (((($_la - 897)) & ~0x3f) === 0 && ((1 << ($_la - 897)) & ((1 << (self::NESTED_TABLE_GET_REFS - 897)) | (1 << (self::NESTED_TABLE_ID - 897)) | (1 << (self::NESTED_TABLE_SET_REFS - 897)) | (1 << (self::NESTED_TABLE_SET_SETID - 897)) | (1 << (self::NETWORK - 897)) | (1 << (self::NEVER - 897)) | (1 << (self::NEW - 897)) | (1 << (self::NEW_TIME - 897)) | (1 << (self::NEXT_DAY - 897)) | (1 << (self::NEXT - 897)) | (1 << (self::NL_AJ - 897)) | (1 << (self::NLJ_BATCHING - 897)) | (1 << (self::NLJ_INDEX_FILTER - 897)) | (1 << (self::NLJ_INDEX_SCAN - 897)) | (1 << (self::NLJ_PREFETCH - 897)) | (1 << (self::NLS_CALENDAR - 897)) | (1 << (self::NLS_CHARACTERSET - 897)) | (1 << (self::NLS_CHARSET_DECL_LEN - 897)) | (1 << (self::NLS_CHARSET_ID - 897)) | (1 << (self::NLS_CHARSET_NAME - 897)) | (1 << (self::NLS_COMP - 897)) | (1 << (self::NLS_CURRENCY - 897)) | (1 << (self::NLS_DATE_FORMAT - 897)) | (1 << (self::NLS_DATE_LANGUAGE - 897)) | (1 << (self::NLS_INITCAP - 897)) | (1 << (self::NLS_ISO_CURRENCY - 897)) | (1 << (self::NL_SJ - 897)) | (1 << (self::NLS_LANG - 897)) | (1 << (self::NLS_LANGUAGE - 897)) | (1 << (self::NLS_LENGTH_SEMANTICS - 897)) | (1 << (self::NLS_LOWER - 897)) | (1 << (self::NLS_NCHAR_CONV_EXCP - 897)) | (1 << (self::NLS_NUMERIC_CHARACTERS - 897)) | (1 << (self::NLS_SORT - 897)) | (1 << (self::NLSSORT - 897)) | (1 << (self::NLS_SPECIAL_CHARS - 897)) | (1 << (self::NLS_TERRITORY - 897)) | (1 << (self::NLS_UPPER - 897)) | (1 << (self::NO_ACCESS - 897)) | (1 << (self::NO_ADAPTIVE_PLAN - 897)) | (1 << (self::NO_ANSI_REARCH - 897)) | (1 << (self::NOAPPEND - 897)) | (1 << (self::NOARCHIVELOG - 897)) | (1 << (self::NOAUDIT - 897)) | (1 << (self::NO_AUTO_REOPTIMIZE - 897)) | (1 << (self::NO_BASETABLE_MULTIMV_REWRITE - 897)) | (1 << (self::NO_BATCH_TABLE_ACCESS_BY_ROWID - 897)) | (1 << (self::NO_BIND_AWARE - 897)) | (1 << (self::NO_BUFFER - 897)) | (1 << (self::NOCACHE - 897)) | (1 << (self::NO_CARTESIAN - 897)) | (1 << (self::NO_CHECK_ACL_REWRITE - 897)) | (1 << (self::NO_CLUSTER_BY_ROWID - 897)) | (1 << (self::NO_CLUSTERING - 897)) | (1 << (self::NO_COALESCE_SQ - 897)) | (1 << (self::NO_COMMON_DATA - 897)) | (1 << (self::NO_CONNECT_BY_CB_WHR_ONLY - 897)) | (1 << (self::NO_CONNECT_BY_COMBINE_SW - 897)) | (1 << (self::NO_CONNECT_BY_COST_BASED - 897)) | (1 << (self::NO_CONNECT_BY_ELIM_DUPS - 897)) | (1 << (self::NO_CONNECT_BY_FILTERING - 897)) | (1 << (self::NOCOPY - 897)) | (1 << (self::NO_COST_XML_QUERY_REWRITE - 897)))) !== 0) || (((($_la - 961)) & ~0x3f) === 0 && ((1 << ($_la - 961)) & ((1 << (self::NO_CPU_COSTING - 961)) | (1 << (self::NOCPU_COSTING - 961)) | (1 << (self::NOCYCLE - 961)) | (1 << (self::NO_DATA_SECURITY_REWRITE - 961)) | (1 << (self::NO_DECORRELATE - 961)) | (1 << (self::NODELAY - 961)) | (1 << (self::NO_DOMAIN_INDEX_FILTER - 961)) | (1 << (self::NO_DST_UPGRADE_INSERT_CONV - 961)) | (1 << (self::NO_ELIM_GROUPBY - 961)) | (1 << (self::NO_ELIMINATE_JOIN - 961)) | (1 << (self::NO_ELIMINATE_OBY - 961)) | (1 << (self::NO_ELIMINATE_OUTER_JOIN - 961)) | (1 << (self::NOENTITYESCAPING - 961)) | (1 << (self::NO_EXPAND_GSET_TO_UNION - 961)) | (1 << (self::NO_EXPAND - 961)) | (1 << (self::NO_EXPAND_TABLE - 961)) | (1 << (self::NO_FACT - 961)) | (1 << (self::NO_FACTORIZE_JOIN - 961)) | (1 << (self::NO_FILTERING - 961)) | (1 << (self::NOFORCE - 961)) | (1 << (self::NO_FULL_OUTER_JOIN_TO_OUTER - 961)) | (1 << (self::NO_GATHER_OPTIMIZER_STATISTICS - 961)) | (1 << (self::NO_GBY_PUSHDOWN - 961)) | (1 << (self::NOGUARANTEE - 961)) | (1 << (self::NO_INDEX_FFS - 961)) | (1 << (self::NO_INDEX - 961)) | (1 << (self::NO_INDEX_SS - 961)) | (1 << (self::NO_INMEMORY - 961)) | (1 << (self::NO_INMEMORY_PRUNING - 961)) | (1 << (self::NOKEEP - 961)) | (1 << (self::NO_LOAD - 961)) | (1 << (self::NOLOCAL - 961)) | (1 << (self::NOLOGGING - 961)) | (1 << (self::NOMAPPING - 961)) | (1 << (self::NOMAXVALUE - 961)) | (1 << (self::NO_MERGE - 961)) | (1 << (self::NOMINIMIZE - 961)) | (1 << (self::NOMINVALUE - 961)) | (1 << (self::NO_MODEL_PUSH_REF - 961)) | (1 << (self::NO_MONITORING - 961)) | (1 << (self::NOMONITORING - 961)) | (1 << (self::NO_MONITOR - 961)) | (1 << (self::NO_MULTIMV_REWRITE - 961)) | (1 << (self::NO_NATIVE_FULL_OUTER_JOIN - 961)) | (1 << (self::NONBLOCKING - 961)) | (1 << (self::NONEDITIONABLE - 961)) | (1 << (self::NONE - 961)) | (1 << (self::NO_NLJ_BATCHING - 961)) | (1 << (self::NO_NLJ_PREFETCH - 961)) | (1 << (self::NO - 961)) | (1 << (self::NONSCHEMA - 961)) | (1 << (self::NO_OBJECT_LINK - 961)) | (1 << (self::NOORDER - 961)) | (1 << (self::NO_ORDER_ROLLUPS - 961)) | (1 << (self::NO_OUTER_JOIN_TO_ANTI - 961)) | (1 << (self::NO_OUTER_JOIN_TO_INNER - 961)) | (1 << (self::NOOVERRIDE - 961)) | (1 << (self::NO_PARALLEL_INDEX - 961)) | (1 << (self::NOPARALLEL_INDEX - 961)) | (1 << (self::NO_PARALLEL - 961)) | (1 << (self::NOPARALLEL - 961)) | (1 << (self::NO_PARTIAL_COMMIT - 961)) | (1 << (self::NO_PARTIAL_JOIN - 961)) | (1 << (self::NO_PARTIAL_ROLLUP_PUSHDOWN - 961)))) !== 0) || (((($_la - 1025)) & ~0x3f) === 0 && ((1 << ($_la - 1025)) & ((1 << (self::NOPARTITION - 1025)) | (1 << (self::NO_PLACE_DISTINCT - 1025)) | (1 << (self::NO_PLACE_GROUP_BY - 1025)) | (1 << (self::NO_PQ_CONCURRENT_UNION - 1025)) | (1 << (self::NO_PQ_MAP - 1025)) | (1 << (self::NO_PQ_REPLICATE - 1025)) | (1 << (self::NO_PQ_SKEW - 1025)) | (1 << (self::NO_PRUNE_GSETS - 1025)) | (1 << (self::NO_PULL_PRED - 1025)) | (1 << (self::NO_PUSH_PRED - 1025)) | (1 << (self::NO_PUSH_SUBQ - 1025)) | (1 << (self::NO_PX_FAULT_TOLERANCE - 1025)) | (1 << (self::NO_PX_JOIN_FILTER - 1025)) | (1 << (self::NO_QKN_BUFF - 1025)) | (1 << (self::NO_QUERY_TRANSFORMATION - 1025)) | (1 << (self::NO_REF_CASCADE - 1025)) | (1 << (self::NORELOCATE - 1025)) | (1 << (self::NORELY - 1025)) | (1 << (self::NOREPAIR - 1025)) | (1 << (self::NOREPLAY - 1025)) | (1 << (self::NORESETLOGS - 1025)) | (1 << (self::NO_RESULT_CACHE - 1025)) | (1 << (self::NOREVERSE - 1025)) | (1 << (self::NO_REWRITE - 1025)) | (1 << (self::NOREWRITE - 1025)) | (1 << (self::NORMAL - 1025)) | (1 << (self::NO_ROOT_SW_FOR_LOCAL - 1025)) | (1 << (self::NOROWDEPENDENCIES - 1025)) | (1 << (self::NOSCHEMACHECK - 1025)) | (1 << (self::NOSEGMENT - 1025)) | (1 << (self::NO_SEMIJOIN - 1025)) | (1 << (self::NO_SEMI_TO_INNER - 1025)) | (1 << (self::NO_SET_TO_JOIN - 1025)) | (1 << (self::NOSORT - 1025)) | (1 << (self::NO_SQL_TRANSLATION - 1025)) | (1 << (self::NO_SQL_TUNE - 1025)) | (1 << (self::NO_STAR_TRANSFORMATION - 1025)) | (1 << (self::NO_STATEMENT_QUEUING - 1025)) | (1 << (self::NO_STATS_GSETS - 1025)) | (1 << (self::NOSTRICT - 1025)) | (1 << (self::NO_SUBQUERY_PRUNING - 1025)) | (1 << (self::NO_SUBSTRB_PAD - 1025)) | (1 << (self::NO_SWAP_JOIN_INPUTS - 1025)) | (1 << (self::NOSWITCH - 1025)) | (1 << (self::NO_TABLE_LOOKUP_BY_NL - 1025)) | (1 << (self::NO_TEMP_TABLE - 1025)) | (1 << (self::NOTHING - 1025)) | (1 << (self::NOTIFICATION - 1025)) | (1 << (self::NO_TRANSFORM_DISTINCT_AGG - 1025)) | (1 << (self::NO_UNNEST - 1025)) | (1 << (self::NO_USE_CUBE - 1025)) | (1 << (self::NO_USE_HASH_AGGREGATION - 1025)) | (1 << (self::NO_USE_HASH_GBY_FOR_PUSHDOWN - 1025)) | (1 << (self::NO_USE_HASH - 1025)) | (1 << (self::NO_USE_INVISIBLE_INDEXES - 1025)) | (1 << (self::NO_USE_MERGE - 1025)) | (1 << (self::NO_USE_NL - 1025)) | (1 << (self::NO_USE_VECTOR_AGGREGATION - 1025)) | (1 << (self::NOVALIDATE - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_DIMS - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_FACT - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM - 1025)))) !== 0) || (((($_la - 1089)) & ~0x3f) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::NO_XDB_FASTPATH_INSERT - 1089)) | (1 << (self::NO_XML_DML_REWRITE - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE_IN_SELECT - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE - 1089)) | (1 << (self::NO_XML_QUERY_REWRITE - 1089)) | (1 << (self::NO_ZONEMAP - 1089)) | (1 << (self::NTH_VALUE - 1089)) | (1 << (self::NULLIF - 1089)) | (1 << (self::NULLS - 1089)) | (1 << (self::NUMBER - 1089)) | (1 << (self::NUMERIC - 1089)) | (1 << (self::NUM_INDEX_KEYS - 1089)) | (1 << (self::NUMTODSINTERVAL - 1089)) | (1 << (self::NUMTOYMINTERVAL - 1089)) | (1 << (self::NVARCHAR2 - 1089)) | (1 << (self::NVL2 - 1089)) | (1 << (self::OBJECT2XML - 1089)) | (1 << (self::OBJECT - 1089)) | (1 << (self::OBJ_ID - 1089)) | (1 << (self::OBJNO - 1089)) | (1 << (self::OBJNO_REUSE - 1089)) | (1 << (self::OCCURENCES - 1089)) | (1 << (self::OFFLINE - 1089)) | (1 << (self::OFF - 1089)) | (1 << (self::OFFSET - 1089)) | (1 << (self::OIDINDEX - 1089)) | (1 << (self::OID - 1089)) | (1 << (self::OLAP - 1089)) | (1 << (self::OLD - 1089)) | (1 << (self::OLD_PUSH_PRED - 1089)) | (1 << (self::OLS - 1089)) | (1 << (self::OLTP - 1089)) | (1 << (self::OMIT - 1089)) | (1 << (self::ONE - 1089)) | (1 << (self::ONLINE - 1089)) | (1 << (self::ONLY - 1089)) | (1 << (self::OPAQUE - 1089)) | (1 << (self::OPAQUE_TRANSFORM - 1089)) | (1 << (self::OPAQUE_XCANONICAL - 1089)) | (1 << (self::OPCODE - 1089)) | (1 << (self::OPEN - 1089)) | (1 << (self::OPERATIONS - 1089)) | (1 << (self::OPERATOR - 1089)) | (1 << (self::OPT_ESTIMATE - 1089)) | (1 << (self::OPTIMAL - 1089)) | (1 << (self::OPTIMIZE - 1089)) | (1 << (self::OPTIMIZER_FEATURES_ENABLE - 1089)) | (1 << (self::OPTIMIZER_GOAL - 1089)) | (1 << (self::OPT_PARAM - 1089)) | (1 << (self::ORA_BRANCH - 1089)) | (1 << (self::ORA_CHECK_ACL - 1089)) | (1 << (self::ORA_CHECK_PRIVILEGE - 1089)) | (1 << (self::ORA_CLUSTERING - 1089)) | (1 << (self::ORADATA - 1089)) | (1 << (self::ORADEBUG - 1089)) | (1 << (self::ORA_DST_AFFECTED - 1089)) | (1 << (self::ORA_DST_CONVERT - 1089)) | (1 << (self::ORA_DST_ERROR - 1089)) | (1 << (self::ORA_GET_ACLIDS - 1089)))) !== 0) || (((($_la - 1153)) & ~0x3f) === 0 && ((1 << ($_la - 1153)) & ((1 << (self::ORA_GET_PRIVILEGES - 1153)) | (1 << (self::ORA_HASH - 1153)) | (1 << (self::ORA_INVOKING_USERID - 1153)) | (1 << (self::ORA_INVOKING_USER - 1153)) | (1 << (self::ORA_INVOKING_XS_USER_GUID - 1153)) | (1 << (self::ORA_INVOKING_XS_USER - 1153)) | (1 << (self::ORA_RAWCOMPARE - 1153)) | (1 << (self::ORA_RAWCONCAT - 1153)) | (1 << (self::ORA_ROWSCN - 1153)) | (1 << (self::ORA_ROWSCN_RAW - 1153)) | (1 << (self::ORA_ROWVERSION - 1153)) | (1 << (self::ORA_TABVERSION - 1153)) | (1 << (self::ORA_WRITE_TIME - 1153)) | (1 << (self::ORDERED - 1153)) | (1 << (self::ORDERED_PREDICATES - 1153)) | (1 << (self::ORDINALITY - 1153)) | (1 << (self::OR_EXPAND - 1153)) | (1 << (self::ORGANIZATION - 1153)) | (1 << (self::OR_PREDICATES - 1153)) | (1 << (self::OSERROR - 1153)) | (1 << (self::OTHER - 1153)) | (1 << (self::OUTER_JOIN_TO_ANTI - 1153)) | (1 << (self::OUTER_JOIN_TO_INNER - 1153)) | (1 << (self::OUTER - 1153)) | (1 << (self::OUTLINE_LEAF - 1153)) | (1 << (self::OUTLINE - 1153)) | (1 << (self::OUT_OF_LINE - 1153)) | (1 << (self::OUT - 1153)) | (1 << (self::OVERFLOW_NOMOVE - 1153)) | (1 << (self::OVERFLOW - 1153)) | (1 << (self::OVERLAPS - 1153)) | (1 << (self::OVER - 1153)) | (1 << (self::OVERRIDING - 1153)) | (1 << (self::OWNER - 1153)) | (1 << (self::OWNERSHIP - 1153)) | (1 << (self::OWN - 1153)) | (1 << (self::PACKAGE - 1153)) | (1 << (self::PACKAGES - 1153)) | (1 << (self::PARALLEL_ENABLE - 1153)) | (1 << (self::PARALLEL_INDEX - 1153)) | (1 << (self::PARALLEL - 1153)) | (1 << (self::PARAMETERS - 1153)) | (1 << (self::PARAM - 1153)) | (1 << (self::PARENT - 1153)) | (1 << (self::PARITY - 1153)) | (1 << (self::PARTIAL_JOIN - 1153)) | (1 << (self::PARTIALLY - 1153)) | (1 << (self::PARTIAL - 1153)) | (1 << (self::PARTIAL_ROLLUP_PUSHDOWN - 1153)) | (1 << (self::PARTITION_HASH - 1153)) | (1 << (self::PARTITION_LIST - 1153)) | (1 << (self::PARTITION - 1153)) | (1 << (self::PARTITION_RANGE - 1153)) | (1 << (self::PARTITIONS - 1153)) | (1 << (self::PARTNUMINST - 1153)) | (1 << (self::PASSING - 1153)) | (1 << (self::PASSWORD_GRACE_TIME - 1153)) | (1 << (self::PASSWORD_LIFE_TIME - 1153)) | (1 << (self::PASSWORD_LOCK_TIME - 1153)) | (1 << (self::PASSWORD - 1153)) | (1 << (self::PASSWORD_REUSE_MAX - 1153)))) !== 0) || (((($_la - 1217)) & ~0x3f) === 0 && ((1 << ($_la - 1217)) & ((1 << (self::PASSWORD_REUSE_TIME - 1217)) | (1 << (self::PASSWORD_VERIFY_FUNCTION - 1217)) | (1 << (self::PAST - 1217)) | (1 << (self::PATCH - 1217)) | (1 << (self::PATH - 1217)) | (1 << (self::PATH_PREFIX - 1217)) | (1 << (self::PATHS - 1217)) | (1 << (self::PATTERN - 1217)) | (1 << (self::PBL_HS_BEGIN - 1217)) | (1 << (self::PBL_HS_END - 1217)) | (1 << (self::PCTINCREASE - 1217)) | (1 << (self::PCTTHRESHOLD - 1217)) | (1 << (self::PCTUSED - 1217)) | (1 << (self::PCTVERSION - 1217)) | (1 << (self::PENDING - 1217)) | (1 << (self::PERCENT_KEYWORD - 1217)) | (1 << (self::PERCENT_RANKM - 1217)) | (1 << (self::PERFORMANCE - 1217)) | (1 << (self::PERIOD_KEYWORD - 1217)) | (1 << (self::PERMANENT - 1217)) | (1 << (self::PERMISSION - 1217)) | (1 << (self::PERMUTE - 1217)) | (1 << (self::PER - 1217)) | (1 << (self::PFILE - 1217)) | (1 << (self::PHYSICAL - 1217)) | (1 << (self::PIKEY - 1217)) | (1 << (self::PIPELINED - 1217)) | (1 << (self::PIV_GB - 1217)) | (1 << (self::PIVOT - 1217)) | (1 << (self::PIV_SSF - 1217)) | (1 << (self::PLACE_DISTINCT - 1217)) | (1 << (self::PLACE_GROUP_BY - 1217)) | (1 << (self::PLAN - 1217)) | (1 << (self::PLSCOPE_SETTINGS - 1217)) | (1 << (self::PLS_INTEGER - 1217)) | (1 << (self::PLSQL_CCFLAGS - 1217)) | (1 << (self::PLSQL_CODE_TYPE - 1217)) | (1 << (self::PLSQL_DEBUG - 1217)) | (1 << (self::PLSQL_OPTIMIZE_LEVEL - 1217)) | (1 << (self::PLSQL_WARNINGS - 1217)) | (1 << (self::PLUGGABLE - 1217)) | (1 << (self::POINT - 1217)) | (1 << (self::POLICY - 1217)) | (1 << (self::POOL_16K - 1217)) | (1 << (self::POOL_2K - 1217)) | (1 << (self::POOL_32K - 1217)) | (1 << (self::POOL_4K - 1217)) | (1 << (self::POOL_8K - 1217)) | (1 << (self::POSITIVEN - 1217)) | (1 << (self::POSITIVE - 1217)) | (1 << (self::POST_TRANSACTION - 1217)) | (1 << (self::POWERMULTISET_BY_CARDINALITY - 1217)) | (1 << (self::POWERMULTISET - 1217)) | (1 << (self::POWER - 1217)) | (1 << (self::PQ_CONCURRENT_UNION - 1217)) | (1 << (self::PQ_DISTRIBUTE - 1217)))) !== 0) || (((($_la - 1281)) & ~0x3f) === 0 && ((1 << ($_la - 1281)) & ((1 << (self::PQ_DISTRIBUTE_WINDOW - 1281)) | (1 << (self::PQ_FILTER - 1281)) | (1 << (self::PQ_MAP - 1281)) | (1 << (self::PQ_NOMAP - 1281)) | (1 << (self::PQ_REPLICATE - 1281)) | (1 << (self::PQ_SKEW - 1281)) | (1 << (self::PRAGMA - 1281)) | (1 << (self::PREBUILT - 1281)) | (1 << (self::PRECEDES - 1281)) | (1 << (self::PRECEDING - 1281)) | (1 << (self::PRECISION - 1281)) | (1 << (self::PRECOMPUTE_SUBQUERY - 1281)) | (1 << (self::PREDICATE_REORDERS - 1281)) | (1 << (self::PRELOAD - 1281)) | (1 << (self::PREPARE - 1281)) | (1 << (self::PRESENTNNV - 1281)) | (1 << (self::PRESENT - 1281)) | (1 << (self::PRESENTV - 1281)) | (1 << (self::PRESERVE_OID - 1281)) | (1 << (self::PRESERVE - 1281)) | (1 << (self::PRETTY - 1281)) | (1 << (self::PREVIOUS - 1281)) | (1 << (self::PREV - 1281)) | (1 << (self::PRIMARY - 1281)) | (1 << (self::PRINTBLOBTOCLOB - 1281)) | (1 << (self::PRIORITY - 1281)) | (1 << (self::PRIVATE - 1281)) | (1 << (self::PRIVATE_SGA - 1281)) | (1 << (self::PRIVILEGED - 1281)) | (1 << (self::PRIVILEGE - 1281)) | (1 << (self::PRIVILEGES - 1281)) | (1 << (self::PROCEDURAL - 1281)) | (1 << (self::PROCEDURE - 1281)) | (1 << (self::PROCESS - 1281)) | (1 << (self::PROFILE - 1281)) | (1 << (self::PROGRAM - 1281)) | (1 << (self::PROJECT - 1281)) | (1 << (self::PROPAGATE - 1281)) | (1 << (self::PROTECTED - 1281)) | (1 << (self::PROTECTION - 1281)) | (1 << (self::PROXY - 1281)) | (1 << (self::PRUNING - 1281)) | (1 << (self::PULL_PRED - 1281)) | (1 << (self::PURGE - 1281)) | (1 << (self::PUSH_PRED - 1281)) | (1 << (self::PUSH_SUBQ - 1281)) | (1 << (self::PX_FAULT_TOLERANCE - 1281)) | (1 << (self::PX_GRANULE - 1281)) | (1 << (self::PX_JOIN_FILTER - 1281)) | (1 << (self::QB_NAME - 1281)) | (1 << (self::QUERY_BLOCK - 1281)) | (1 << (self::QUERY - 1281)) | (1 << (self::QUEUE_CURR - 1281)) | (1 << (self::QUEUE - 1281)) | (1 << (self::QUEUE_ROWP - 1281)) | (1 << (self::QUIESCE - 1281)) | (1 << (self::QUORUM - 1281)) | (1 << (self::QUOTA - 1281)) | (1 << (self::RAISE - 1281)) | (1 << (self::RANDOM_LOCAL - 1281)) | (1 << (self::RANDOM - 1281)) | (1 << (self::RANGE - 1281)))) !== 0) || (((($_la - 1345)) & ~0x3f) === 0 && ((1 << ($_la - 1345)) & ((1 << (self::RANKM - 1345)) | (1 << (self::RAPIDLY - 1345)) | (1 << (self::RAW - 1345)) | (1 << (self::RAWTOHEX - 1345)) | (1 << (self::RAWTONHEX - 1345)) | (1 << (self::RBA - 1345)) | (1 << (self::RBO_OUTLINE - 1345)) | (1 << (self::RDBA - 1345)) | (1 << (self::READ - 1345)) | (1 << (self::READS - 1345)) | (1 << (self::REALM - 1345)) | (1 << (self::REAL - 1345)) | (1 << (self::REBALANCE - 1345)) | (1 << (self::REBUILD - 1345)) | (1 << (self::RECORD - 1345)) | (1 << (self::RECORDS_PER_BLOCK - 1345)) | (1 << (self::RECOVERABLE - 1345)) | (1 << (self::RECOVER - 1345)) | (1 << (self::RECOVERY - 1345)) | (1 << (self::RECYCLEBIN - 1345)) | (1 << (self::RECYCLE - 1345)) | (1 << (self::REDACTION - 1345)) | (1 << (self::REDEFINE - 1345)) | (1 << (self::REDO - 1345)) | (1 << (self::REDUCED - 1345)) | (1 << (self::REDUNDANCY - 1345)) | (1 << (self::REF_CASCADE_CURSOR - 1345)) | (1 << (self::REFERENCED - 1345)) | (1 << (self::REFERENCE - 1345)) | (1 << (self::REFERENCES - 1345)) | (1 << (self::REFERENCING - 1345)) | (1 << (self::REF - 1345)) | (1 << (self::REFRESH - 1345)) | (1 << (self::REFTOHEX - 1345)) | (1 << (self::REGEXP_COUNT - 1345)) | (1 << (self::REGEXP_INSTR - 1345)) | (1 << (self::REGEXP_LIKE - 1345)) | (1 << (self::REGEXP_REPLACE - 1345)) | (1 << (self::REGEXP_SUBSTR - 1345)) | (1 << (self::REGISTER - 1345)) | (1 << (self::REGR_AVGX - 1345)) | (1 << (self::REGR_AVGY - 1345)) | (1 << (self::REGR_COUNT - 1345)) | (1 << (self::REGR_INTERCEPT - 1345)) | (1 << (self::REGR_R2 - 1345)) | (1 << (self::REGR_SLOPE - 1345)) | (1 << (self::REGR_SXX - 1345)) | (1 << (self::REGR_SXY - 1345)) | (1 << (self::REGR_SYY - 1345)) | (1 << (self::REGULAR - 1345)) | (1 << (self::REJECT - 1345)) | (1 << (self::REKEY - 1345)) | (1 << (self::RELATIONAL - 1345)) | (1 << (self::RELOCATE - 1345)) | (1 << (self::RELY - 1345)) | (1 << (self::REMAINDER - 1345)) | (1 << (self::REMOTE_MAPPED - 1345)) | (1 << (self::REMOVE - 1345)) | (1 << (self::RENAME - 1345)) | (1 << (self::REPAIR - 1345)) | (1 << (self::REPEAT - 1345)) | (1 << (self::REPLACE - 1345)) | (1 << (self::REPLICATION - 1345)))) !== 0) || (((($_la - 1409)) & ~0x3f) === 0 && ((1 << ($_la - 1409)) & ((1 << (self::REQUIRED - 1409)) | (1 << (self::RESETLOGS - 1409)) | (1 << (self::RESET - 1409)) | (1 << (self::RESIZE - 1409)) | (1 << (self::RESOLVE - 1409)) | (1 << (self::RESOLVER - 1409)) | (1 << (self::RESPECT - 1409)) | (1 << (self::RESTART - 1409)) | (1 << (self::RESTORE_AS_INTERVALS - 1409)) | (1 << (self::RESTORE - 1409)) | (1 << (self::RESTRICT_ALL_REF_CONS - 1409)) | (1 << (self::RESTRICTED - 1409)) | (1 << (self::RESTRICT_REFERENCES - 1409)) | (1 << (self::RESTRICT - 1409)) | (1 << (self::RESULT_CACHE - 1409)) | (1 << (self::RESULT - 1409)) | (1 << (self::RESUMABLE - 1409)) | (1 << (self::RESUME - 1409)) | (1 << (self::RETENTION - 1409)) | (1 << (self::RETRY_ON_ROW_CHANGE - 1409)) | (1 << (self::RETURNING - 1409)) | (1 << (self::RETURN - 1409)) | (1 << (self::REUSE - 1409)) | (1 << (self::REVERSE - 1409)) | (1 << (self::REWRITE_OR_ERROR - 1409)) | (1 << (self::REWRITE - 1409)) | (1 << (self::RIGHT - 1409)) | (1 << (self::ROLE - 1409)) | (1 << (self::ROLESET - 1409)) | (1 << (self::ROLES - 1409)) | (1 << (self::ROLLBACK - 1409)) | (1 << (self::ROLLING - 1409)) | (1 << (self::ROLLUP - 1409)) | (1 << (self::ROWDEPENDENCIES - 1409)) | (1 << (self::ROWID_MAPPING_TABLE - 1409)) | (1 << (self::ROWID - 1409)) | (1 << (self::ROWIDTOCHAR - 1409)) | (1 << (self::ROWIDTONCHAR - 1409)) | (1 << (self::ROW_LENGTH - 1409)) | (1 << (self::ROWNUM - 1409)) | (1 << (self::ROW - 1409)) | (1 << (self::ROWS - 1409)) | (1 << (self::RPAD - 1409)) | (1 << (self::RTRIM - 1409)) | (1 << (self::RULE - 1409)) | (1 << (self::RULES - 1409)) | (1 << (self::RUNNING - 1409)) | (1 << (self::SALT - 1409)) | (1 << (self::SAMPLE - 1409)) | (1 << (self::SAVE_AS_INTERVALS - 1409)) | (1 << (self::SAVEPOINT - 1409)) | (1 << (self::SAVE - 1409)) | (1 << (self::SB4 - 1409)) | (1 << (self::SCALE_ROWS - 1409)) | (1 << (self::SCALE - 1409)) | (1 << (self::SCAN_INSTANCES - 1409)) | (1 << (self::SCAN - 1409)) | (1 << (self::SCHEDULER - 1409)) | (1 << (self::SCHEMACHECK - 1409)) | (1 << (self::SCHEMA - 1409)) | (1 << (self::SCN_ASCENDING - 1409)) | (1 << (self::SCN - 1409)))) !== 0) || (((($_la - 1473)) & ~0x3f) === 0 && ((1 << ($_la - 1473)) & ((1 << (self::SCOPE - 1473)) | (1 << (self::SCRUB - 1473)) | (1 << (self::SD_ALL - 1473)) | (1 << (self::SD_INHIBIT - 1473)) | (1 << (self::SDO_GEOM_MBR - 1473)) | (1 << (self::SD_SHOW - 1473)) | (1 << (self::SEARCH - 1473)) | (1 << (self::SECOND - 1473)) | (1 << (self::SECRET - 1473)) | (1 << (self::SECUREFILE_DBA - 1473)) | (1 << (self::SECUREFILE - 1473)) | (1 << (self::SECURITY - 1473)) | (1 << (self::SEED - 1473)) | (1 << (self::SEG_BLOCK - 1473)) | (1 << (self::SEG_FILE - 1473)) | (1 << (self::SEGMENT - 1473)) | (1 << (self::SELECTIVITY - 1473)) | (1 << (self::SELF - 1473)) | (1 << (self::SEMIJOIN_DRIVER - 1473)) | (1 << (self::SEMIJOIN - 1473)) | (1 << (self::SEMI_TO_INNER - 1473)) | (1 << (self::SEQUENCED - 1473)) | (1 << (self::SEQUENCE - 1473)) | (1 << (self::SEQUENTIAL - 1473)) | (1 << (self::SERIALIZABLE - 1473)) | (1 << (self::SERIALLY_REUSABLE - 1473)) | (1 << (self::SERIAL - 1473)) | (1 << (self::SERVERERROR - 1473)) | (1 << (self::SERVICE_NAME_CONVERT - 1473)) | (1 << (self::SERVICES - 1473)) | (1 << (self::SESSION_CACHED_CURSORS - 1473)) | (1 << (self::SESSION - 1473)) | (1 << (self::SESSIONS_PER_USER - 1473)) | (1 << (self::SESSIONTIMEZONE - 1473)) | (1 << (self::SESSIONTZNAME - 1473)) | (1 << (self::SET - 1473)) | (1 << (self::SETS - 1473)) | (1 << (self::SETTINGS - 1473)) | (1 << (self::SET_TO_JOIN - 1473)) | (1 << (self::SEVERE - 1473)) | (1 << (self::SHARED_POOL - 1473)) | (1 << (self::SHARED - 1473)) | (1 << (self::SHARING - 1473)) | (1 << (self::SHELFLIFE - 1473)) | (1 << (self::SHOW - 1473)) | (1 << (self::SHRINK - 1473)) | (1 << (self::SHUTDOWN - 1473)) | (1 << (self::SIBLINGS - 1473)) | (1 << (self::SID - 1473)) | (1 << (self::SIGNAL_COMPONENT - 1473)) | (1 << (self::SIGNAL_FUNCTION - 1473)) | (1 << (self::SIGN - 1473)) | (1 << (self::SIGNTYPE - 1473)) | (1 << (self::SIMPLE_INTEGER - 1473)) | (1 << (self::SIMPLE - 1473)) | (1 << (self::SINGLE - 1473)) | (1 << (self::SINGLETASK - 1473)) | (1 << (self::SINH - 1473)) | (1 << (self::SIN - 1473)) | (1 << (self::SKIP_EXT_OPTIMIZER - 1473)))) !== 0) || (((($_la - 1537)) & ~0x3f) === 0 && ((1 << ($_la - 1537)) & ((1 << (self::SKIP_ - 1537)) | (1 << (self::SKIP_UNQ_UNUSABLE_IDX - 1537)) | (1 << (self::SKIP_UNUSABLE_INDEXES - 1537)) | (1 << (self::SMALLFILE - 1537)) | (1 << (self::SMALLINT - 1537)) | (1 << (self::SNAPSHOT - 1537)) | (1 << (self::SOME - 1537)) | (1 << (self::SORT - 1537)) | (1 << (self::SOUNDEX - 1537)) | (1 << (self::SOURCE_FILE_DIRECTORY - 1537)) | (1 << (self::SOURCE_FILE_NAME_CONVERT - 1537)) | (1 << (self::SOURCE - 1537)) | (1 << (self::SPACE_KEYWORD - 1537)) | (1 << (self::SPECIFICATION - 1537)) | (1 << (self::SPFILE - 1537)) | (1 << (self::SPLIT - 1537)) | (1 << (self::SPREADSHEET - 1537)) | (1 << (self::SQLDATA - 1537)) | (1 << (self::SQLERROR - 1537)) | (1 << (self::SQLLDR - 1537)) | (1 << (self::SQL - 1537)) | (1 << (self::SQL_TRACE - 1537)) | (1 << (self::SQL_TRANSLATION_PROFILE - 1537)) | (1 << (self::SQRT - 1537)) | (1 << (self::STALE - 1537)) | (1 << (self::STANDALONE - 1537)) | (1 << (self::STANDARD_HASH - 1537)) | (1 << (self::STANDBY_MAX_DATA_DELAY - 1537)) | (1 << (self::STANDBYS - 1537)) | (1 << (self::STANDBY - 1537)) | (1 << (self::STAR - 1537)) | (1 << (self::STAR_TRANSFORMATION - 1537)) | (1 << (self::STARTUP - 1537)) | (1 << (self::STATEMENT_ID - 1537)) | (1 << (self::STATEMENT_QUEUING - 1537)) | (1 << (self::STATEMENTS - 1537)) | (1 << (self::STATEMENT - 1537)) | (1 << (self::STATE - 1537)) | (1 << (self::STATIC - 1537)) | (1 << (self::STATISTICS - 1537)) | (1 << (self::STATS_BINOMIAL_TEST - 1537)) | (1 << (self::STATS_CROSSTAB - 1537)) | (1 << (self::STATS_F_TEST - 1537)) | (1 << (self::STATS_KS_TEST - 1537)) | (1 << (self::STATS_MODE - 1537)) | (1 << (self::STATS_MW_TEST - 1537)) | (1 << (self::STATS_ONE_WAY_ANOVA - 1537)) | (1 << (self::STATS_T_TEST_INDEP - 1537)) | (1 << (self::STATS_T_TEST_INDEPU - 1537)) | (1 << (self::STATS_T_TEST_ONE - 1537)) | (1 << (self::STATS_T_TEST_PAIRED - 1537)) | (1 << (self::STATS_WSR_TEST - 1537)) | (1 << (self::STDDEV_POP - 1537)) | (1 << (self::STDDEV_SAMP - 1537)) | (1 << (self::STOP - 1537)) | (1 << (self::STORAGE - 1537)) | (1 << (self::STORE - 1537)) | (1 << (self::STREAMS - 1537)) | (1 << (self::STREAM - 1537)) | (1 << (self::STRICT - 1537)) | (1 << (self::STRING - 1537)) | (1 << (self::STRIPE_COLUMNS - 1537)) | (1 << (self::STRIPE_WIDTH - 1537)))) !== 0) || (((($_la - 1601)) & ~0x3f) === 0 && ((1 << ($_la - 1601)) & ((1 << (self::STRIP - 1601)) | (1 << (self::STRUCTURE - 1601)) | (1 << (self::SUBMULTISET - 1601)) | (1 << (self::SUBPARTITION_REL - 1601)) | (1 << (self::SUBPARTITIONS - 1601)) | (1 << (self::SUBPARTITION - 1601)) | (1 << (self::SUBQUERIES - 1601)) | (1 << (self::SUBQUERY_PRUNING - 1601)) | (1 << (self::SUBSCRIBE - 1601)) | (1 << (self::SUBSET - 1601)) | (1 << (self::SUBSTITUTABLE - 1601)) | (1 << (self::SUBSTR2 - 1601)) | (1 << (self::SUBSTR4 - 1601)) | (1 << (self::SUBSTRB - 1601)) | (1 << (self::SUBSTRC - 1601)) | (1 << (self::SUBTYPE - 1601)) | (1 << (self::SUCCESSFUL - 1601)) | (1 << (self::SUCCESS - 1601)) | (1 << (self::SUMMARY - 1601)) | (1 << (self::SUPPLEMENTAL - 1601)) | (1 << (self::SUSPEND - 1601)) | (1 << (self::SWAP_JOIN_INPUTS - 1601)) | (1 << (self::SWITCHOVER - 1601)) | (1 << (self::SWITCH - 1601)) | (1 << (self::SYNCHRONOUS - 1601)) | (1 << (self::SYNC - 1601)) | (1 << (self::SYSASM - 1601)) | (1 << (self::SYS_AUDIT - 1601)) | (1 << (self::SYSAUX - 1601)) | (1 << (self::SYSBACKUP - 1601)) | (1 << (self::SYS_CHECKACL - 1601)) | (1 << (self::SYS_CHECK_PRIVILEGE - 1601)) | (1 << (self::SYS_CONNECT_BY_PATH - 1601)) | (1 << (self::SYS_CONTEXT - 1601)) | (1 << (self::SYSDATE - 1601)) | (1 << (self::SYSDBA - 1601)) | (1 << (self::SYS_DBURIGEN - 1601)) | (1 << (self::SYSDG - 1601)) | (1 << (self::SYS_DL_CURSOR - 1601)) | (1 << (self::SYS_DM_RXFORM_CHR - 1601)) | (1 << (self::SYS_DM_RXFORM_NUM - 1601)) | (1 << (self::SYS_DOM_COMPARE - 1601)) | (1 << (self::SYS_DST_PRIM2SEC - 1601)) | (1 << (self::SYS_DST_SEC2PRIM - 1601)) | (1 << (self::SYS_ET_BFILE_TO_RAW - 1601)) | (1 << (self::SYS_ET_BLOB_TO_IMAGE - 1601)) | (1 << (self::SYS_ET_IMAGE_TO_BLOB - 1601)) | (1 << (self::SYS_ET_RAW_TO_BFILE - 1601)) | (1 << (self::SYS_EXTPDTXT - 1601)) | (1 << (self::SYS_EXTRACT_UTC - 1601)) | (1 << (self::SYS_FBT_INSDEL - 1601)) | (1 << (self::SYS_FILTER_ACLS - 1601)) | (1 << (self::SYS_FNMATCHES - 1601)) | (1 << (self::SYS_FNREPLACE - 1601)) | (1 << (self::SYS_GET_ACLIDS - 1601)) | (1 << (self::SYS_GET_COL_ACLIDS - 1601)) | (1 << (self::SYS_GET_PRIVILEGES - 1601)) | (1 << (self::SYS_GETTOKENID - 1601)) | (1 << (self::SYS_GETXTIVAL - 1601)) | (1 << (self::SYS_GUID - 1601)) | (1 << (self::SYSGUID - 1601)) | (1 << (self::SYSKM - 1601)) | (1 << (self::SYS_MAKE_XMLNODEID - 1601)))) !== 0) || (((($_la - 1665)) & ~0x3f) === 0 && ((1 << ($_la - 1665)) & ((1 << (self::SYS_MAKEXML - 1665)) | (1 << (self::SYS_MKXMLATTR - 1665)) | (1 << (self::SYS_MKXTI - 1665)) | (1 << (self::SYSOBJ - 1665)) | (1 << (self::SYS_OP_ADT2BIN - 1665)) | (1 << (self::SYS_OP_ADTCONS - 1665)) | (1 << (self::SYS_OP_ALSCRVAL - 1665)) | (1 << (self::SYS_OP_ATG - 1665)) | (1 << (self::SYS_OP_BIN2ADT - 1665)) | (1 << (self::SYS_OP_BITVEC - 1665)) | (1 << (self::SYS_OP_BL2R - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER - 1665)) | (1 << (self::SYS_OP_C2C - 1665)) | (1 << (self::SYS_OP_CAST - 1665)) | (1 << (self::SYS_OP_CEG - 1665)) | (1 << (self::SYS_OP_CL2C - 1665)) | (1 << (self::SYS_OP_COMBINED_HASH - 1665)) | (1 << (self::SYS_OP_COMP - 1665)) | (1 << (self::SYS_OP_CONVERT - 1665)) | (1 << (self::SYS_OP_COUNTCHG - 1665)) | (1 << (self::SYS_OP_CSCONV - 1665)) | (1 << (self::SYS_OP_CSCONVTEST - 1665)) | (1 << (self::SYS_OP_CSR - 1665)) | (1 << (self::SYS_OP_CSX_PATCH - 1665)) | (1 << (self::SYS_OP_CYCLED_SEQ - 1665)) | (1 << (self::SYS_OP_DECOMP - 1665)) | (1 << (self::SYS_OP_DESCEND - 1665)) | (1 << (self::SYS_OP_DISTINCT - 1665)) | (1 << (self::SYS_OP_DRA - 1665)) | (1 << (self::SYS_OP_DUMP - 1665)) | (1 << (self::SYS_OP_DV_CHECK - 1665)) | (1 << (self::SYS_OP_ENFORCE_NOT_NULL - 1665)) | (1 << (self::SYSOPER - 1665)) | (1 << (self::SYS_OP_EXTRACT - 1665)) | (1 << (self::SYS_OP_GROUPING - 1665)) | (1 << (self::SYS_OP_GUID - 1665)) | (1 << (self::SYS_OP_HASH - 1665)) | (1 << (self::SYS_OP_IIX - 1665)) | (1 << (self::SYS_OP_ITR - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_CREATE - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_SUCCEEDED - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_USE - 1665)) | (1 << (self::SYS_OP_LBID - 1665)) | (1 << (self::SYS_OP_LOBLOC2BLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2CLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2ID - 1665)) | (1 << (self::SYS_OP_LOBLOC2NCLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2TYP - 1665)) | (1 << (self::SYS_OP_LSVI - 1665)) | (1 << (self::SYS_OP_LVL - 1665)) | (1 << (self::SYS_OP_MAKEOID - 1665)) | (1 << (self::SYS_OP_MAP_NONNULL - 1665)) | (1 << (self::SYS_OP_MSR - 1665)) | (1 << (self::SYS_OP_NICOMBINE - 1665)) | (1 << (self::SYS_OP_NIEXTRACT - 1665)) | (1 << (self::SYS_OP_NII - 1665)) | (1 << (self::SYS_OP_NIX - 1665)) | (1 << (self::SYS_OP_NOEXPAND - 1665)) | (1 << (self::SYS_OP_NTCIMG - 1665)) | (1 << (self::SYS_OP_NUMTORAW - 1665)) | (1 << (self::SYS_OP_OIDVALUE - 1665)))) !== 0) || (((($_la - 1729)) & ~0x3f) === 0 && ((1 << ($_la - 1729)) & ((1 << (self::SYS_OP_OPNSIZE - 1729)) | (1 << (self::SYS_OP_PAR_1 - 1729)) | (1 << (self::SYS_OP_PARGID_1 - 1729)) | (1 << (self::SYS_OP_PARGID - 1729)) | (1 << (self::SYS_OP_PAR - 1729)) | (1 << (self::SYS_OP_PART_ID - 1729)) | (1 << (self::SYS_OP_PIVOT - 1729)) | (1 << (self::SYS_OP_R2O - 1729)) | (1 << (self::SYS_OP_RAWTONUM - 1729)) | (1 << (self::SYS_OP_RDTM - 1729)) | (1 << (self::SYS_OP_REF - 1729)) | (1 << (self::SYS_OP_RMTD - 1729)) | (1 << (self::SYS_OP_ROWIDTOOBJ - 1729)) | (1 << (self::SYS_OP_RPB - 1729)) | (1 << (self::SYS_OPTLOBPRBSC - 1729)) | (1 << (self::SYS_OP_TOSETID - 1729)) | (1 << (self::SYS_OP_TPR - 1729)) | (1 << (self::SYS_OP_TRTB - 1729)) | (1 << (self::SYS_OPTXICMP - 1729)) | (1 << (self::SYS_OPTXQCASTASNQ - 1729)) | (1 << (self::SYS_OP_UNDESCEND - 1729)) | (1 << (self::SYS_OP_VECAND - 1729)) | (1 << (self::SYS_OP_VECBIT - 1729)) | (1 << (self::SYS_OP_VECOR - 1729)) | (1 << (self::SYS_OP_VECXOR - 1729)) | (1 << (self::SYS_OP_VERSION - 1729)) | (1 << (self::SYS_OP_VREF - 1729)) | (1 << (self::SYS_OP_VVD - 1729)) | (1 << (self::SYS_OP_XMLCONS_FOR_CSX - 1729)) | (1 << (self::SYS_OP_XPTHATG - 1729)) | (1 << (self::SYS_OP_XPTHIDX - 1729)) | (1 << (self::SYS_OP_XPTHOP - 1729)) | (1 << (self::SYS_OP_XTXT2SQLT - 1729)) | (1 << (self::SYS_OP_ZONE_ID - 1729)) | (1 << (self::SYS_ORDERKEY_DEPTH - 1729)) | (1 << (self::SYS_ORDERKEY_MAXCHILD - 1729)) | (1 << (self::SYS_ORDERKEY_PARENT - 1729)) | (1 << (self::SYS_PARALLEL_TXN - 1729)) | (1 << (self::SYS_PATHID_IS_ATTR - 1729)) | (1 << (self::SYS_PATHID_IS_NMSPC - 1729)) | (1 << (self::SYS_PATHID_LASTNAME - 1729)) | (1 << (self::SYS_PATHID_LASTNMSPC - 1729)) | (1 << (self::SYS_PATH_REVERSE - 1729)) | (1 << (self::SYS_PXQEXTRACT - 1729)) | (1 << (self::SYS_RAW_TO_XSID - 1729)) | (1 << (self::SYS_RID_ORDER - 1729)) | (1 << (self::SYS_ROW_DELTA - 1729)) | (1 << (self::SYS_SC_2_XMLT - 1729)) | (1 << (self::SYS_SYNRCIREDO - 1729)) | (1 << (self::SYSTEM_DEFINED - 1729)) | (1 << (self::SYSTEM - 1729)) | (1 << (self::SYSTIMESTAMP - 1729)) | (1 << (self::SYS_TYPEID - 1729)) | (1 << (self::SYS_UMAKEXML - 1729)) | (1 << (self::SYS_XMLANALYZE - 1729)) | (1 << (self::SYS_XMLCONTAINS - 1729)) | (1 << (self::SYS_XMLCONV - 1729)) | (1 << (self::SYS_XMLEXNSURI - 1729)) | (1 << (self::SYS_XMLGEN - 1729)) | (1 << (self::SYS_XMLI_LOC_ISNODE - 1729)) | (1 << (self::SYS_XMLI_LOC_ISTEXT - 1729)) | (1 << (self::SYS_XMLINSTR - 1729)) | (1 << (self::SYS_XMLLOCATOR_GETSVAL - 1729)) | (1 << (self::SYS_XMLNODEID_GETCID - 1729)))) !== 0) || (((($_la - 1793)) & ~0x3f) === 0 && ((1 << ($_la - 1793)) & ((1 << (self::SYS_XMLNODEID_GETLOCATOR - 1793)) | (1 << (self::SYS_XMLNODEID_GETOKEY - 1793)) | (1 << (self::SYS_XMLNODEID_GETPATHID - 1793)) | (1 << (self::SYS_XMLNODEID_GETPTRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETSVAL - 1793)) | (1 << (self::SYS_XMLNODEID_GETTID - 1793)) | (1 << (self::SYS_XMLNODEID - 1793)) | (1 << (self::SYS_XMLT_2_SC - 1793)) | (1 << (self::SYS_XMLTRANSLATE - 1793)) | (1 << (self::SYS_XMLTYPE2SQL - 1793)) | (1 << (self::SYS_XQ_ASQLCNV - 1793)) | (1 << (self::SYS_XQ_ATOMCNVCHK - 1793)) | (1 << (self::SYS_XQBASEURI - 1793)) | (1 << (self::SYS_XQCASTABLEERRH - 1793)) | (1 << (self::SYS_XQCODEP2STR - 1793)) | (1 << (self::SYS_XQCODEPEQ - 1793)) | (1 << (self::SYS_XQCON2SEQ - 1793)) | (1 << (self::SYS_XQCONCAT - 1793)) | (1 << (self::SYS_XQDELETE - 1793)) | (1 << (self::SYS_XQDFLTCOLATION - 1793)) | (1 << (self::SYS_XQDOC - 1793)) | (1 << (self::SYS_XQDOCURI - 1793)) | (1 << (self::SYS_XQDURDIV - 1793)) | (1 << (self::SYS_XQED4URI - 1793)) | (1 << (self::SYS_XQENDSWITH - 1793)) | (1 << (self::SYS_XQERRH - 1793)) | (1 << (self::SYS_XQERR - 1793)) | (1 << (self::SYS_XQESHTMLURI - 1793)) | (1 << (self::SYS_XQEXLOBVAL - 1793)) | (1 << (self::SYS_XQEXSTWRP - 1793)) | (1 << (self::SYS_XQEXTRACT - 1793)) | (1 << (self::SYS_XQEXTRREF - 1793)) | (1 << (self::SYS_XQEXVAL - 1793)) | (1 << (self::SYS_XQFB2STR - 1793)) | (1 << (self::SYS_XQFNBOOL - 1793)) | (1 << (self::SYS_XQFNCMP - 1793)) | (1 << (self::SYS_XQFNDATIM - 1793)) | (1 << (self::SYS_XQFNLNAME - 1793)) | (1 << (self::SYS_XQFNNM - 1793)) | (1 << (self::SYS_XQFNNSURI - 1793)) | (1 << (self::SYS_XQFNPREDTRUTH - 1793)) | (1 << (self::SYS_XQFNQNM - 1793)) | (1 << (self::SYS_XQFNROOT - 1793)) | (1 << (self::SYS_XQFORMATNUM - 1793)) | (1 << (self::SYS_XQFTCONTAIN - 1793)) | (1 << (self::SYS_XQFUNCR - 1793)) | (1 << (self::SYS_XQGETCONTENT - 1793)) | (1 << (self::SYS_XQINDXOF - 1793)) | (1 << (self::SYS_XQINSERT - 1793)) | (1 << (self::SYS_XQINSPFX - 1793)) | (1 << (self::SYS_XQIRI2URI - 1793)) | (1 << (self::SYS_XQLANG - 1793)) | (1 << (self::SYS_XQLLNMFRMQNM - 1793)) | (1 << (self::SYS_XQMKNODEREF - 1793)) | (1 << (self::SYS_XQNILLED - 1793)) | (1 << (self::SYS_XQNODENAME - 1793)) | (1 << (self::SYS_XQNORMSPACE - 1793)) | (1 << (self::SYS_XQNORMUCODE - 1793)) | (1 << (self::SYS_XQ_NRNG - 1793)) | (1 << (self::SYS_XQNSP4PFX - 1793)) | (1 << (self::SYS_XQNSPFRMQNM - 1793)) | (1 << (self::SYS_XQPFXFRMQNM - 1793)) | (1 << (self::SYS_XQ_PKSQL2XML - 1793)))) !== 0) || (((($_la - 1857)) & ~0x3f) === 0 && ((1 << ($_la - 1857)) & ((1 << (self::SYS_XQPOLYABS - 1857)) | (1 << (self::SYS_XQPOLYADD - 1857)) | (1 << (self::SYS_XQPOLYCEL - 1857)) | (1 << (self::SYS_XQPOLYCSTBL - 1857)) | (1 << (self::SYS_XQPOLYCST - 1857)) | (1 << (self::SYS_XQPOLYDIV - 1857)) | (1 << (self::SYS_XQPOLYFLR - 1857)) | (1 << (self::SYS_XQPOLYMOD - 1857)) | (1 << (self::SYS_XQPOLYMUL - 1857)) | (1 << (self::SYS_XQPOLYRND - 1857)) | (1 << (self::SYS_XQPOLYSQRT - 1857)) | (1 << (self::SYS_XQPOLYSUB - 1857)) | (1 << (self::SYS_XQPOLYUMUS - 1857)) | (1 << (self::SYS_XQPOLYUPLS - 1857)) | (1 << (self::SYS_XQPOLYVEQ - 1857)) | (1 << (self::SYS_XQPOLYVGE - 1857)) | (1 << (self::SYS_XQPOLYVGT - 1857)) | (1 << (self::SYS_XQPOLYVLE - 1857)) | (1 << (self::SYS_XQPOLYVLT - 1857)) | (1 << (self::SYS_XQPOLYVNE - 1857)) | (1 << (self::SYS_XQREF2VAL - 1857)) | (1 << (self::SYS_XQRENAME - 1857)) | (1 << (self::SYS_XQREPLACE - 1857)) | (1 << (self::SYS_XQRESVURI - 1857)) | (1 << (self::SYS_XQRNDHALF2EVN - 1857)) | (1 << (self::SYS_XQRSLVQNM - 1857)) | (1 << (self::SYS_XQRYENVPGET - 1857)) | (1 << (self::SYS_XQRYVARGET - 1857)) | (1 << (self::SYS_XQRYWRP - 1857)) | (1 << (self::SYS_XQSEQ2CON4XC - 1857)) | (1 << (self::SYS_XQSEQ2CON - 1857)) | (1 << (self::SYS_XQSEQDEEPEQ - 1857)) | (1 << (self::SYS_XQSEQINSB - 1857)) | (1 << (self::SYS_XQSEQRM - 1857)) | (1 << (self::SYS_XQSEQRVS - 1857)) | (1 << (self::SYS_XQSEQSUB - 1857)) | (1 << (self::SYS_XQSEQTYPMATCH - 1857)) | (1 << (self::SYS_XQSTARTSWITH - 1857)) | (1 << (self::SYS_XQSTATBURI - 1857)) | (1 << (self::SYS_XQSTR2CODEP - 1857)) | (1 << (self::SYS_XQSTRJOIN - 1857)) | (1 << (self::SYS_XQSUBSTRAFT - 1857)) | (1 << (self::SYS_XQSUBSTRBEF - 1857)) | (1 << (self::SYS_XQTOKENIZE - 1857)) | (1 << (self::SYS_XQTREATAS - 1857)) | (1 << (self::SYS_XQ_UPKXML2SQL - 1857)) | (1 << (self::SYS_XQXFORM - 1857)) | (1 << (self::SYS_XSID_TO_RAW - 1857)) | (1 << (self::SYS_ZMAP_FILTER - 1857)) | (1 << (self::SYS_ZMAP_REFRESH - 1857)) | (1 << (self::TABLE_LOOKUP_BY_NL - 1857)) | (1 << (self::TABLESPACE_NO - 1857)) | (1 << (self::TABLESPACE - 1857)) | (1 << (self::TABLES - 1857)) | (1 << (self::TABLE_STATS - 1857)) | (1 << (self::TABLE - 1857)) | (1 << (self::TABNO - 1857)) | (1 << (self::TAG - 1857)) | (1 << (self::TANH - 1857)) | (1 << (self::TAN - 1857)) | (1 << (self::TBLORIDXPARTNUM - 1857)) | (1 << (self::TEMPFILE - 1857)) | (1 << (self::TEMPLATE - 1857)) | (1 << (self::TEMPORARY - 1857)))) !== 0) || (((($_la - 1921)) & ~0x3f) === 0 && ((1 << ($_la - 1921)) & ((1 << (self::TEMP_TABLE - 1921)) | (1 << (self::TEST - 1921)) | (1 << (self::TEXT - 1921)) | (1 << (self::THAN - 1921)) | (1 << (self::THEN - 1921)) | (1 << (self::THE - 1921)) | (1 << (self::THREAD - 1921)) | (1 << (self::THROUGH - 1921)) | (1 << (self::TIER - 1921)) | (1 << (self::TIES - 1921)) | (1 << (self::TIMEOUT - 1921)) | (1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP - 1921)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1921)) | (1 << (self::TIMES - 1921)) | (1 << (self::TIME - 1921)) | (1 << (self::TIMEZONE_ABBR - 1921)) | (1 << (self::TIMEZONE_HOUR - 1921)) | (1 << (self::TIMEZONE_MINUTE - 1921)) | (1 << (self::TIMEZONE_OFFSET - 1921)) | (1 << (self::TIMEZONE_REGION - 1921)) | (1 << (self::TIME_ZONE - 1921)) | (1 << (self::TIV_GB - 1921)) | (1 << (self::TIV_SSF - 1921)) | (1 << (self::TO_ACLID - 1921)) | (1 << (self::TO_BINARY_DOUBLE - 1921)) | (1 << (self::TO_BINARY_FLOAT - 1921)) | (1 << (self::TO_BLOB - 1921)) | (1 << (self::TO_CLOB - 1921)) | (1 << (self::TO_DSINTERVAL - 1921)) | (1 << (self::TO_LOB - 1921)) | (1 << (self::TO_MULTI_BYTE - 1921)) | (1 << (self::TO_NCHAR - 1921)) | (1 << (self::TO_NCLOB - 1921)) | (1 << (self::TO_NUMBER - 1921)) | (1 << (self::TOPLEVEL - 1921)) | (1 << (self::TO_SINGLE_BYTE - 1921)) | (1 << (self::TO_TIMESTAMP - 1921)) | (1 << (self::TO_TIMESTAMP_TZ - 1921)) | (1 << (self::TO_TIME - 1921)) | (1 << (self::TO_TIME_TZ - 1921)) | (1 << (self::TO_YMINTERVAL - 1921)) | (1 << (self::TRACE - 1921)) | (1 << (self::TRACING - 1921)) | (1 << (self::TRACKING - 1921)) | (1 << (self::TRAILING - 1921)) | (1 << (self::TRANSACTION - 1921)) | (1 << (self::TRANSFORM_DISTINCT_AGG - 1921)) | (1 << (self::TRANSITIONAL - 1921)) | (1 << (self::TRANSITION - 1921)) | (1 << (self::TRANSLATE - 1921)) | (1 << (self::TRANSLATION - 1921)) | (1 << (self::TREAT - 1921)) | (1 << (self::TRIGGERS - 1921)) | (1 << (self::TRIGGER - 1921)) | (1 << (self::TRUE - 1921)) | (1 << (self::TRUNCATE - 1921)) | (1 << (self::TRUNC - 1921)) | (1 << (self::TRUSTED - 1921)) | (1 << (self::TRUST - 1921)) | (1 << (self::TUNING - 1921)))) !== 0) || (((($_la - 1985)) & ~0x3f) === 0 && ((1 << ($_la - 1985)) & ((1 << (self::TX - 1985)) | (1 << (self::TYPES - 1985)) | (1 << (self::TYPE - 1985)) | (1 << (self::TZ_OFFSET - 1985)) | (1 << (self::UB2 - 1985)) | (1 << (self::UBA - 1985)) | (1 << (self::UCS2 - 1985)) | (1 << (self::UID - 1985)) | (1 << (self::UNARCHIVED - 1985)) | (1 << (self::UNBOUNDED - 1985)) | (1 << (self::UNBOUND - 1985)) | (1 << (self::UNCONDITIONAL - 1985)) | (1 << (self::UNDER - 1985)) | (1 << (self::UNDO - 1985)) | (1 << (self::UNDROP - 1985)) | (1 << (self::UNIFORM - 1985)) | (1 << (self::UNISTR - 1985)) | (1 << (self::UNLIMITED - 1985)) | (1 << (self::UNLOAD - 1985)) | (1 << (self::UNLOCK - 1985)) | (1 << (self::UNMATCHED - 1985)) | (1 << (self::UNNEST_INNERJ_DISTINCT_VIEW - 1985)) | (1 << (self::UNNEST_NOSEMIJ_NODISTINCTVIEW - 1985)) | (1 << (self::UNNEST_SEMIJ_VIEW - 1985)) | (1 << (self::UNNEST - 1985)) | (1 << (self::UNPACKED - 1985)) | (1 << (self::UNPIVOT - 1985)) | (1 << (self::UNPLUG - 1985)) | (1 << (self::UNPROTECTED - 1985)) | (1 << (self::UNQUIESCE - 1985)) | (1 << (self::UNRECOVERABLE - 1985)) | (1 << (self::UNRESTRICTED - 1985)) | (1 << (self::UNSUBSCRIBE - 1985)) | (1 << (self::UNTIL - 1985)) | (1 << (self::UNUSABLE - 1985)) | (1 << (self::UNUSED - 1985)) | (1 << (self::UPDATABLE - 1985)) | (1 << (self::UPDATED - 1985)) | (1 << (self::UPDATEXML - 1985)) | (1 << (self::UPD_INDEXES - 1985)) | (1 << (self::UPD_JOININDEX - 1985)) | (1 << (self::UPGRADE - 1985)) | (1 << (self::UPPER - 1985)) | (1 << (self::UPSERT - 1985)) | (1 << (self::UROWID - 1985)) | (1 << (self::USABLE - 1985)) | (1 << (self::USAGE - 1985)) | (1 << (self::USE_ANTI - 1985)) | (1 << (self::USE_CONCAT - 1985)) | (1 << (self::USE_CUBE - 1985)) | (1 << (self::USE_HASH_AGGREGATION - 1985)) | (1 << (self::USE_HASH_GBY_FOR_PUSHDOWN - 1985)) | (1 << (self::USE_HASH - 1985)) | (1 << (self::USE_HIDDEN_PARTITIONS - 1985)) | (1 << (self::USE_INVISIBLE_INDEXES - 1985)) | (1 << (self::USE_MERGE_CARTESIAN - 1985)) | (1 << (self::USE_MERGE - 1985)) | (1 << (self::USE_NL - 1985)) | (1 << (self::USE_NL_WITH_INDEX - 1985)) | (1 << (self::USE_PRIVATE_OUTLINES - 1985)) | (1 << (self::USER_DATA - 1985)))) !== 0) || (((($_la - 2049)) & ~0x3f) === 0 && ((1 << ($_la - 2049)) & ((1 << (self::USER_DEFINED - 2049)) | (1 << (self::USERENV - 2049)) | (1 << (self::USERGROUP - 2049)) | (1 << (self::USER_RECYCLEBIN - 2049)) | (1 << (self::USERS - 2049)) | (1 << (self::USER_TABLESPACES - 2049)) | (1 << (self::USER - 2049)) | (1 << (self::USE_SEMI - 2049)) | (1 << (self::USE_STORED_OUTLINES - 2049)) | (1 << (self::USE_TTT_FOR_GSETS - 2049)) | (1 << (self::USE - 2049)) | (1 << (self::USE_VECTOR_AGGREGATION - 2049)) | (1 << (self::USE_WEAK_NAME_RESL - 2049)) | (1 << (self::USING_NO_EXPAND - 2049)) | (1 << (self::USING - 2049)) | (1 << (self::UTF16BE - 2049)) | (1 << (self::UTF16LE - 2049)) | (1 << (self::UTF32 - 2049)) | (1 << (self::UTF8 - 2049)) | (1 << (self::V1 - 2049)) | (1 << (self::V2 - 2049)) | (1 << (self::VALIDATE - 2049)) | (1 << (self::VALIDATION - 2049)) | (1 << (self::VALID_TIME_END - 2049)) | (1 << (self::VALUE - 2049)) | (1 << (self::VARCHAR2 - 2049)) | (1 << (self::VARCHAR - 2049)) | (1 << (self::VARIABLE - 2049)) | (1 << (self::VAR_POP - 2049)) | (1 << (self::VARRAYS - 2049)) | (1 << (self::VARRAY - 2049)) | (1 << (self::VAR_SAMP - 2049)) | (1 << (self::VARYING - 2049)) | (1 << (self::VECTOR_READ_TRACE - 2049)) | (1 << (self::VECTOR_READ - 2049)) | (1 << (self::VECTOR_TRANSFORM_DIMS - 2049)) | (1 << (self::VECTOR_TRANSFORM_FACT - 2049)) | (1 << (self::VECTOR_TRANSFORM - 2049)) | (1 << (self::VERIFIER - 2049)) | (1 << (self::VERIFY - 2049)) | (1 << (self::VERSIONING - 2049)) | (1 << (self::VERSIONS_ENDSCN - 2049)) | (1 << (self::VERSIONS_ENDTIME - 2049)) | (1 << (self::VERSIONS_OPERATION - 2049)) | (1 << (self::VERSIONS_STARTSCN - 2049)) | (1 << (self::VERSIONS_STARTTIME - 2049)) | (1 << (self::VERSIONS - 2049)) | (1 << (self::VERSIONS_XID - 2049)) | (1 << (self::VERSION - 2049)) | (1 << (self::VIOLATION - 2049)) | (1 << (self::VIRTUAL - 2049)) | (1 << (self::VISIBILITY - 2049)) | (1 << (self::VISIBLE - 2049)) | (1 << (self::VOLUME - 2049)) | (1 << (self::VSIZE - 2049)) | (1 << (self::WAIT - 2049)) | (1 << (self::WALLET - 2049)) | (1 << (self::WARNING - 2049)) | (1 << (self::WEEKS - 2049)) | (1 << (self::WEEK - 2049)) | (1 << (self::WELLFORMED - 2049)) | (1 << (self::WHENEVER - 2049)))) !== 0) || (((($_la - 2113)) & ~0x3f) === 0 && ((1 << ($_la - 2113)) & ((1 << (self::WHEN - 2113)) | (1 << (self::WHILE - 2113)) | (1 << (self::WHITESPACE - 2113)) | (1 << (self::WIDTH_BUCKET - 2113)) | (1 << (self::WITHIN - 2113)) | (1 << (self::WITHOUT - 2113)) | (1 << (self::WITH_PLSQL - 2113)) | (1 << (self::WORK - 2113)) | (1 << (self::WRAPPED - 2113)) | (1 << (self::WRAPPER - 2113)) | (1 << (self::WRITE - 2113)) | (1 << (self::XDB_FASTPATH_INSERT - 2113)) | (1 << (self::X_DYN_PRUNE - 2113)) | (1 << (self::XID - 2113)) | (1 << (self::XML2OBJECT - 2113)) | (1 << (self::XMLAGG - 2113)) | (1 << (self::XMLATTRIBUTES - 2113)) | (1 << (self::XMLCAST - 2113)) | (1 << (self::XMLCDATA - 2113)) | (1 << (self::XMLCOLATTVAL - 2113)) | (1 << (self::XMLCOMMENT - 2113)) | (1 << (self::XMLCONCAT - 2113)) | (1 << (self::XMLDIFF - 2113)) | (1 << (self::XML_DML_RWT_STMT - 2113)) | (1 << (self::XMLELEMENT - 2113)) | (1 << (self::XMLEXISTS2 - 2113)) | (1 << (self::XMLEXISTS - 2113)) | (1 << (self::XMLFOREST - 2113)) | (1 << (self::XMLINDEX_REWRITE_IN_SELECT - 2113)) | (1 << (self::XMLINDEX_REWRITE - 2113)) | (1 << (self::XMLINDEX_SEL_IDX_TBL - 2113)) | (1 << (self::XMLISNODE - 2113)) | (1 << (self::XMLISVALID - 2113)) | (1 << (self::XMLNAMESPACES - 2113)) | (1 << (self::XMLPARSE - 2113)) | (1 << (self::XMLPATCH - 2113)) | (1 << (self::XMLPI - 2113)) | (1 << (self::XMLQUERYVAL - 2113)) | (1 << (self::XMLQUERY - 2113)) | (1 << (self::XMLROOT - 2113)) | (1 << (self::XMLSCHEMA - 2113)) | (1 << (self::XMLSERIALIZE - 2113)) | (1 << (self::XMLTABLE - 2113)) | (1 << (self::XMLTRANSFORMBLOB - 2113)) | (1 << (self::XMLTRANSFORM - 2113)) | (1 << (self::XMLTYPE - 2113)) | (1 << (self::XML - 2113)) | (1 << (self::XPATHTABLE - 2113)) | (1 << (self::XS_SYS_CONTEXT - 2113)) | (1 << (self::XS - 2113)) | (1 << (self::YEARS - 2113)) | (1 << (self::YEAR - 2113)) | (1 << (self::YES - 2113)) | (1 << (self::YMINTERVAL_UNCONSTRAINED - 2113)) | (1 << (self::ZONEMAP - 2113)) | (1 << (self::ZONE - 2113)) | (1 << (self::PREDICTION - 2113)) | (1 << (self::PREDICTION_BOUNDS - 2113)) | (1 << (self::PREDICTION_COST - 2113)))) !== 0) || (((($_la - 2177)) & ~0x3f) === 0 && ((1 << ($_la - 2177)) & ((1 << (self::PREDICTION_DETAILS - 2177)) | (1 << (self::PREDICTION_PROBABILITY - 2177)) | (1 << (self::PREDICTION_SET - 2177)) | (1 << (self::CUME_DIST - 2177)) | (1 << (self::DENSE_RANK - 2177)) | (1 << (self::LISTAGG - 2177)) | (1 << (self::PERCENT_RANK - 2177)) | (1 << (self::PERCENTILE_CONT - 2177)) | (1 << (self::PERCENTILE_DISC - 2177)) | (1 << (self::RANK - 2177)) | (1 << (self::AVG - 2177)) | (1 << (self::CORR - 2177)) | (1 << (self::COVAR_ - 2177)) | (1 << (self::LAG - 2177)) | (1 << (self::LEAD - 2177)) | (1 << (self::MAX - 2177)) | (1 << (self::MEDIAN - 2177)) | (1 << (self::MIN - 2177)) | (1 << (self::NTILE - 2177)) | (1 << (self::NVL - 2177)) | (1 << (self::RATIO_TO_REPORT - 2177)) | (1 << (self::REGR_ - 2177)) | (1 << (self::ROUND - 2177)) | (1 << (self::ROW_NUMBER - 2177)) | (1 << (self::SUBSTR - 2177)) | (1 << (self::TO_CHAR - 2177)) | (1 << (self::TRIM - 2177)) | (1 << (self::SUM - 2177)) | (1 << (self::STDDEV - 2177)) | (1 << (self::VAR_ - 2177)) | (1 << (self::VARIANCE - 2177)) | (1 << (self::LEAST - 2177)) | (1 << (self::GREATEST - 2177)) | (1 << (self::TO_DATE - 2177)) | (1 << (self::PERIOD - 2177)))) !== 0) || $_la === self::REGULAR_ID) {
                        $this->setState(7692);
                        $this->lob_segname();
                    }
                    $this->setState(7695);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7696);
                    $this->lob_storage_parameters();
                    $this->setState(7697);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case 2:
                    $this->setState(7699);
                    $this->lob_segname();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_segname(): Context\Lob_segnameContext
    {
        $localContext = new Context\Lob_segnameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 814, self::RULE_lob_segname);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7702);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_item(): Context\Lob_itemContext
    {
        $localContext = new Context\Lob_itemContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 816, self::RULE_lob_item);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7704);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_storage_parameters(): Context\Lob_storage_parametersContext
    {
        $localContext = new Context\Lob_storage_parametersContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 818, self::RULE_lob_storage_parameters);

        try {
            $this->setState(7713);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::TABLESPACE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7706);
                    $this->match(self::TABLESPACE);
                    $this->setState(7707);
                    $this->tablespace();
                    break;

                case self::CACHE:
                case self::CHUNK:
                case self::COMPRESS:
                case self::DECRYPT:
                case self::DEDUPLICATE:
                case self::DISABLE:
                case self::ENABLE:
                case self::ENCRYPT:
                case self::FREEPOOLS:
                case self::KEEP_DUPLICATES:
                case self::NOCACHE:
                case self::NOCOMPRESS:
                case self::PCTVERSION:
                case self::RETENTION:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7708);
                    $this->lob_parameters();
                    $this->setState(7710);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::STORAGE) {
                        $this->setState(7709);
                        $this->storage_clause();
                    }
                    break;

                case self::STORAGE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7712);
                    $this->storage_clause();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_storage_clause(): Context\Lob_storage_clauseContext
    {
        $localContext = new Context\Lob_storage_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 820, self::RULE_lob_storage_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7715);
            $this->match(self::LOB);
            $this->setState(7752);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 980, $this->ctx)) {
                case 1:
                    $this->setState(7716);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7717);
                    $this->lob_item();
                    $this->setState(7722);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(7718);
                        $this->match(self::COMMA);
                        $this->setState(7719);
                        $this->lob_item();
                        $this->setState(7724);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(7725);
                    $this->match(self::RIGHT_PAREN);
                    $this->setState(7726);
                    $this->match(self::STORE);
                    $this->setState(7727);
                    $this->match(self::AS);
                    $this->setState(7733);
                    $this->errorHandler->sync($this);

                    $alt = 1;

                    do {
                        switch ($alt) {
                            case 1:
                                $this->setState(7733);
                                $this->errorHandler->sync($this);

                                switch ($this->input->LA(1)) {
                                    case self::BASICFILE:
                                    case self::SECUREFILE:
                                        $this->setState(7728);

                                        $_la = $this->input->LA(1);

                                        if (!($_la === self::BASICFILE || $_la === self::SECUREFILE)) {
                                            $this->errorHandler->recoverInline($this);
                                        } else {
                                            if ($this->input->LA(1) === Token::EOF) {
                                                $this->matchedEOF = true;
                                            }

                                            $this->errorHandler->reportMatch($this);
                                            $this->consume();
                                        }
                                        break;

                                    case self::LEFT_PAREN:
                                        $this->setState(7729);
                                        $this->match(self::LEFT_PAREN);
                                        $this->setState(7730);
                                        $this->lob_storage_parameters();
                                        $this->setState(7731);
                                        $this->match(self::RIGHT_PAREN);
                                        break;

                                    default:
                                        throw new NoViableAltException($this);
                                }
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }

                        $this->setState(7735);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 977, $this->ctx);
                    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
                    break;

                case 2:
                    $this->setState(7737);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(7738);
                    $this->lob_item();
                    $this->setState(7739);
                    $this->match(self::RIGHT_PAREN);
                    $this->setState(7740);
                    $this->match(self::STORE);
                    $this->setState(7741);
                    $this->match(self::AS);
                    $this->setState(7748);
                    $this->errorHandler->sync($this);

                    $alt = 1;

                    do {
                        switch ($alt) {
                            case 1:
                                $this->setState(7748);
                                $this->errorHandler->sync($this);

                                switch ($this->getInterpreter()->adaptivePredict($this->input, 978, $this->ctx)) {
                                    case 1:
                                        $this->setState(7742);

                                        $_la = $this->input->LA(1);

                                        if (!($_la === self::BASICFILE || $_la === self::SECUREFILE)) {
                                            $this->errorHandler->recoverInline($this);
                                        } else {
                                            if ($this->input->LA(1) === Token::EOF) {
                                                $this->matchedEOF = true;
                                            }

                                            $this->errorHandler->reportMatch($this);
                                            $this->consume();
                                        }
                                        break;

                                    case 2:
                                        $this->setState(7743);
                                        $this->lob_segname();
                                        break;

                                    case 3:
                                        $this->setState(7744);
                                        $this->match(self::LEFT_PAREN);
                                        $this->setState(7745);
                                        $this->lob_storage_parameters();
                                        $this->setState(7746);
                                        $this->match(self::RIGHT_PAREN);
                                        break;
                                }
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }

                        $this->setState(7750);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 979, $this->ctx);
                    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function modify_lob_storage_clause(): Context\Modify_lob_storage_clauseContext
    {
        $localContext = new Context\Modify_lob_storage_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 822, self::RULE_modify_lob_storage_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7754);
            $this->match(self::MODIFY);
            $this->setState(7755);
            $this->match(self::LOB);
            $this->setState(7756);
            $this->match(self::LEFT_PAREN);
            $this->setState(7757);
            $this->lob_item();
            $this->setState(7758);
            $this->match(self::RIGHT_PAREN);
            $this->setState(7759);
            $this->match(self::LEFT_PAREN);
            $this->setState(7760);
            $this->modify_lob_parameters();
            $this->setState(7761);
            $this->match(self::RIGHT_PAREN);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function modify_lob_parameters(): Context\Modify_lob_parametersContext
    {
        $localContext = new Context\Modify_lob_parametersContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 824, self::RULE_modify_lob_parameters);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7787);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(7787);
                $this->errorHandler->sync($this);

                switch ($this->getInterpreter()->adaptivePredict($this->input, 983, $this->ctx)) {
                    case 1:
                        $this->setState(7763);
                        $this->storage_clause();
                        break;

                    case 2:
                        $this->setState(7764);

                        $_la = $this->input->LA(1);

                        if (!($_la === self::FREEPOOLS || $_la === self::PCTVERSION)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(7765);
                        $this->match(self::UNSIGNED_INTEGER);
                        break;

                    case 3:
                        $this->setState(7766);
                        $this->match(self::REBUILD);
                        $this->setState(7767);
                        $this->match(self::FREEPOOLS);
                        break;

                    case 4:
                        $this->setState(7768);
                        $this->lob_retention_clause();
                        break;

                    case 5:
                        $this->setState(7769);
                        $this->lob_deduplicate_clause();
                        break;

                    case 6:
                        $this->setState(7770);
                        $this->lob_compression_clause();
                        break;

                    case 7:
                        $this->setState(7771);
                        $this->match(self::ENCRYPT);
                        $this->setState(7772);
                        $this->encryption_spec();
                        break;

                    case 8:
                        $this->setState(7773);
                        $this->match(self::DECRYPT);
                        break;

                    case 9:
                        $this->setState(7774);
                        $this->match(self::CACHE);
                        break;

                    case 10:
                        $this->setState(7779);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 981, $this->ctx)) {
                            case 1:
                                $this->setState(7775);
                                $this->match(self::CACHE);
                                break;

                            case 2:
                                $this->setState(7776);
                                $this->match(self::NOCACHE);
                                break;

                            case 3:
                                $this->setState(7777);
                                $this->match(self::CACHE);
                                $this->setState(7778);
                                $this->match(self::READS);
                                break;
                        }
                        $this->setState(7782);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::LOGGING || $_la === self::NOLOGGING) {
                            $this->setState(7781);
                            $this->logging_clause();
                        }
                        break;

                    case 11:
                        $this->setState(7784);
                        $this->allocate_extent_clause();
                        break;

                    case 12:
                        $this->setState(7785);
                        $this->shrink_clause();
                        break;

                    case 13:
                        $this->setState(7786);
                        $this->deallocate_unused_clause();
                        break;
                }
                $this->setState(7789);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::ALLOCATE || $_la === self::CACHE || $_la === self::COMPRESS || (((($_la - 339)) & ~0x3f) === 0 && ((1 << ($_la - 339)) & ((1 << (self::DEALLOCATE - 339)) | (1 << (self::DECRYPT - 339)) | (1 << (self::DEDUPLICATE - 339)))) !== 0) || $_la === self::ENCRYPT || $_la === self::FREEPOOLS || $_la === self::KEEP_DUPLICATES || $_la === self::NOCACHE || $_la === self::NOCOMPRESS || $_la === self::PCTVERSION || $_la === self::REBUILD || $_la === self::RETENTION || $_la === self::SHRINK || $_la === self::STORAGE);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_parameters(): Context\Lob_parametersContext
    {
        $localContext = new Context\Lob_parametersContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 826, self::RULE_lob_parameters);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7816);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(7816);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::DISABLE:
                    case self::ENABLE:
                        $this->setState(7791);

                        $_la = $this->input->LA(1);

                        if (!($_la === self::DISABLE || $_la === self::ENABLE)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(7792);
                        $this->match(self::STORAGE);
                        $this->setState(7793);
                        $this->match(self::IN);
                        $this->setState(7794);
                        $this->match(self::ROW);
                        break;

                    case self::CHUNK:
                        $this->setState(7795);
                        $this->match(self::CHUNK);
                        $this->setState(7796);
                        $this->match(self::UNSIGNED_INTEGER);
                        break;

                    case self::PCTVERSION:
                        $this->setState(7797);
                        $this->match(self::PCTVERSION);
                        $this->setState(7798);
                        $this->match(self::UNSIGNED_INTEGER);
                        break;

                    case self::FREEPOOLS:
                        $this->setState(7799);
                        $this->match(self::FREEPOOLS);
                        $this->setState(7800);
                        $this->match(self::UNSIGNED_INTEGER);
                        break;

                    case self::RETENTION:
                        $this->setState(7801);
                        $this->lob_retention_clause();
                        break;

                    case self::DEDUPLICATE:
                    case self::KEEP_DUPLICATES:
                        $this->setState(7802);
                        $this->lob_deduplicate_clause();
                        break;

                    case self::COMPRESS:
                    case self::NOCOMPRESS:
                        $this->setState(7803);
                        $this->lob_compression_clause();
                        break;

                    case self::ENCRYPT:
                        $this->setState(7804);
                        $this->match(self::ENCRYPT);
                        $this->setState(7805);
                        $this->encryption_spec();
                        break;

                    case self::DECRYPT:
                        $this->setState(7806);
                        $this->match(self::DECRYPT);
                        break;

                    case self::CACHE:
                    case self::NOCACHE:
                        $this->setState(7811);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 985, $this->ctx)) {
                            case 1:
                                $this->setState(7807);
                                $this->match(self::CACHE);
                                break;

                            case 2:
                                $this->setState(7808);
                                $this->match(self::NOCACHE);
                                break;

                            case 3:
                                $this->setState(7809);
                                $this->match(self::CACHE);
                                $this->setState(7810);
                                $this->match(self::READS);
                                break;
                        }
                        $this->setState(7814);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::LOGGING || $_la === self::NOLOGGING) {
                            $this->setState(7813);
                            $this->logging_clause();
                        }
                        break;

                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(7818);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::CACHE || $_la === self::CHUNK || $_la === self::COMPRESS || (((($_la - 349)) & ~0x3f) === 0 && ((1 << ($_la - 349)) & ((1 << (self::DECRYPT - 349)) | (1 << (self::DEDUPLICATE - 349)) | (1 << (self::DISABLE - 349)))) !== 0) || $_la === self::ENABLE || $_la === self::ENCRYPT || $_la === self::FREEPOOLS || $_la === self::KEEP_DUPLICATES || $_la === self::NOCACHE || $_la === self::NOCOMPRESS || $_la === self::PCTVERSION || $_la === self::RETENTION);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_deduplicate_clause(): Context\Lob_deduplicate_clauseContext
    {
        $localContext = new Context\Lob_deduplicate_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 828, self::RULE_lob_deduplicate_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7820);

            $_la = $this->input->LA(1);

            if (!($_la === self::DEDUPLICATE || $_la === self::KEEP_DUPLICATES)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_compression_clause(): Context\Lob_compression_clauseContext
    {
        $localContext = new Context\Lob_compression_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 830, self::RULE_lob_compression_clause);

        try {
            $this->setState(7827);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::NOCOMPRESS:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7822);
                    $this->match(self::NOCOMPRESS);
                    break;

                case self::COMPRESS:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7823);
                    $this->match(self::COMPRESS);
                    $this->setState(7825);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::HIGH || $_la === self::LOW || $_la === self::MEDIUM) {
                        $this->setState(7824);

                        $_la = $this->input->LA(1);

                        if (!($_la === self::HIGH || $_la === self::LOW || $_la === self::MEDIUM)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lob_retention_clause(): Context\Lob_retention_clauseContext
    {
        $localContext = new Context\Lob_retention_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 832, self::RULE_lob_retention_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7829);
            $this->match(self::RETENTION);
            $this->setState(7835);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::MAX:
                    $this->setState(7830);
                    $this->match(self::MAX);
                    break;

                case self::MIN:
                    $this->setState(7831);
                    $this->match(self::MIN);
                    $this->setState(7832);
                    $this->match(self::UNSIGNED_INTEGER);
                    break;

                case self::AUTO:
                    $this->setState(7833);
                    $this->match(self::AUTO);
                    break;

                case self::NONE:
                    $this->setState(7834);
                    $this->match(self::NONE);
                    break;

                case self::ALLOCATE:
                case self::CACHE:
                case self::CHUNK:
                case self::COMPRESS:
                case self::DEALLOCATE:
                case self::DECRYPT:
                case self::DEDUPLICATE:
                case self::DISABLE:
                case self::ENABLE:
                case self::ENCRYPT:
                case self::FREEPOOLS:
                case self::KEEP_DUPLICATES:
                case self::NOCACHE:
                case self::NOCOMPRESS:
                case self::PCTVERSION:
                case self::REBUILD:
                case self::RETENTION:
                case self::SHRINK:
                case self::STORAGE:
                case self::RIGHT_PAREN:
                    break;

                default:
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function encryption_spec(): Context\Encryption_specContext
    {
        $localContext = new Context\Encryption_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 834, self::RULE_encryption_spec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7839);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USING) {
                $this->setState(7837);
                $this->match(self::USING);
                $this->setState(7838);
                $this->match(self::CHAR_STRING);
            }
            $this->setState(7844);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IDENTIFIED) {
                $this->setState(7841);
                $this->match(self::IDENTIFIED);
                $this->setState(7842);
                $this->match(self::BY);
                $this->setState(7843);
                $this->match(self::REGULAR_ID);
            }
            $this->setState(7847);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CHAR_STRING) {
                $this->setState(7846);
                $this->match(self::CHAR_STRING);
            }
            $this->setState(7853);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NO || $_la === self::SALT) {
                $this->setState(7850);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NO) {
                    $this->setState(7849);
                    $this->match(self::NO);
                }
                $this->setState(7852);
                $this->match(self::SALT);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tablespace(): Context\TablespaceContext
    {
        $localContext = new Context\TablespaceContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 836, self::RULE_tablespace);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7855);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function varray_item(): Context\Varray_itemContext
    {
        $localContext = new Context\Varray_itemContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 838, self::RULE_varray_item);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7860);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 997, $this->ctx)) {
                case 1:
                    $this->setState(7857);
                    $this->id_expression();
                    $this->setState(7858);
                    $this->match(self::PERIOD);
                    break;
            }
            $this->setState(7865);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 998, $this->ctx)) {
                case 1:
                    $this->setState(7862);
                    $this->id_expression();
                    $this->setState(7863);
                    $this->match(self::PERIOD);
                    break;
            }
            $this->setState(7867);
            $this->id_expression();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function column_properties(): Context\Column_propertiesContext
    {
        $localContext = new Context\Column_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 840, self::RULE_column_properties);

        try {
            $this->setState(7876);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::COLUMN:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(7869);
                    $this->object_type_col_properties();
                    break;

                case self::NESTED:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(7870);
                    $this->nested_table_col_properties();
                    break;

                case self::LOB:
                case self::VARRAY:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(7873);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::VARRAY:
                            $this->setState(7871);
                            $this->varray_col_properties();
                            break;

                        case self::LOB:
                            $this->setState(7872);
                            $this->lob_storage_clause();
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    break;

                case self::XMLTYPE:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(7875);
                    $this->xmltype_column_properties();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function period_definition(): Context\Period_definitionContext
    {
        $localContext = new Context\Period_definitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 842, self::RULE_period_definition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7878);

            if (!(isVersion12())) {
                throw new FailedPredicateException($this, "isVersion12()");
            }
            $this->setState(7879);
            $this->match(self::PERIOD);
            $this->setState(7880);
            $this->match(self::FOR);
            $this->setState(7881);
            $this->column_name();
            $this->setState(7888);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LEFT_PAREN) {
                $this->setState(7882);
                $this->match(self::LEFT_PAREN);
                $this->setState(7883);
                $this->start_time_column();
                $this->setState(7884);
                $this->match(self::COMMA);
                $this->setState(7885);
                $this->end_time_column();
                $this->setState(7886);
                $this->match(self::RIGHT_PAREN);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function start_time_column(): Context\Start_time_columnContext
    {
        $localContext = new Context\Start_time_columnContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 844, self::RULE_start_time_column);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7890);
            $this->column_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function end_time_column(): Context\End_time_columnContext
    {
        $localContext = new Context\End_time_columnContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 846, self::RULE_end_time_column);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7892);
            $this->column_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function column_definition(): Context\Column_definitionContext
    {
        $localContext = new Context\Column_definitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 848, self::RULE_column_definition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7894);
            $this->column_name();
            $this->setState(7897);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1002, $this->ctx)) {
                case 1:
                    $this->setState(7895);
                    $this->datatype();
                    break;

                case 2:
                    $this->setState(7896);
                    $this->type_name();
                    break;
            }
            $this->setState(7900);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::SORT) {
                $this->setState(7899);
                $this->match(self::SORT);
            }
            $this->setState(7904);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT) {
                $this->setState(7902);
                $this->match(self::DEFAULT);
                $this->setState(7903);
                $this->expression();
            }
            $this->setState(7925);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ENCRYPT) {
                $this->setState(7906);
                $this->match(self::ENCRYPT);
                $this->setState(7909);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::USING) {
                    $this->setState(7907);
                    $this->match(self::USING);
                    $this->setState(7908);
                    $this->match(self::CHAR_STRING);
                }
                $this->setState(7914);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::IDENTIFIED) {
                    $this->setState(7911);
                    $this->match(self::IDENTIFIED);
                    $this->setState(7912);
                    $this->match(self::BY);
                    $this->setState(7913);
                    $this->regular_id();
                }
                $this->setState(7917);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::CHAR_STRING) {
                    $this->setState(7916);
                    $this->match(self::CHAR_STRING);
                }
                $this->setState(7923);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NO || $_la === self::SALT) {
                    $this->setState(7920);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NO) {
                        $this->setState(7919);
                        $this->match(self::NO);
                    }
                    $this->setState(7922);
                    $this->match(self::SALT);
                }
            }
            $this->setState(7934);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1012, $this->ctx)) {
                case 1:
                    $this->setState(7930);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::CHECK || $_la === self::CONSTRAINT || $_la === self::NOT || $_la === self::NULL_ || $_la === self::PRIMARY || $_la === self::REFERENCES || $_la === self::UNIQUE) {
                        $this->setState(7927);
                        $this->inline_constraint();
                        $this->setState(7932);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;

                case 2:
                    $this->setState(7933);
                    $this->inline_ref_constraint();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function virtual_column_definition(): Context\Virtual_column_definitionContext
    {
        $localContext = new Context\Virtual_column_definitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 850, self::RULE_virtual_column_definition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7936);
            $this->column_name();
            $this->setState(7938);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ((((($_la - 108)) & ~0x3f) === 0 && ((1 << ($_la - 108)) & ((1 << (self::BFILE - 108)) | (1 << (self::BINARY_DOUBLE - 108)) | (1 << (self::BINARY_FLOAT - 108)) | (1 << (self::BINARY_INTEGER - 108)) | (1 << (self::BLOB - 108)) | (1 << (self::BOOLEAN - 108)))) !== 0) || (((($_la - 175)) & ~0x3f) === 0 && ((1 << ($_la - 175)) & ((1 << (self::CHARACTER - 175)) | (1 << (self::CHAR - 175)) | (1 << (self::CLOB - 175)))) !== 0) || (((($_la - 327)) & ~0x3f) === 0 && ((1 << ($_la - 327)) & ((1 << (self::DATE - 327)) | (1 << (self::DAY - 327)) | (1 << (self::DEC - 327)) | (1 << (self::DECIMAL - 327)))) !== 0) || $_la === self::DOUBLE || $_la === self::DSINTERVAL_UNCONSTRAINED || $_la === self::FLOAT || $_la === self::HOUR || (((($_la - 682)) & ~0x3f) === 0 && ((1 << ($_la - 682)) & ((1 << (self::INTEGER - 682)) | (1 << (self::INTERVAL - 682)) | (1 << (self::INT - 682)))) !== 0) || (((($_la - 788)) & ~0x3f) === 0 && ((1 << ($_la - 788)) & ((1 << (self::LONG - 788)) | (1 << (self::MINUTE - 788)) | (1 << (self::MLSLABEL - 788)))) !== 0) || (((($_la - 868)) & ~0x3f) === 0 && ((1 << ($_la - 868)) & ((1 << (self::MONTH - 868)) | (1 << (self::NATURAL - 868)) | (1 << (self::NATURALN - 868)) | (1 << (self::NCHAR - 868)) | (1 << (self::NCLOB - 868)))) !== 0) || (((($_la - 1099)) & ~0x3f) === 0 && ((1 << ($_la - 1099)) & ((1 << (self::NUMBER - 1099)) | (1 << (self::NUMERIC - 1099)) | (1 << (self::NVARCHAR2 - 1099)))) !== 0) || (((($_la - 1259)) & ~0x3f) === 0 && ((1 << ($_la - 1259)) & ((1 << (self::PLS_INTEGER - 1259)) | (1 << (self::POSITIVEN - 1259)) | (1 << (self::POSITIVE - 1259)))) !== 0) || $_la === self::RAW || $_la === self::REAL || $_la === self::ROWID || $_la === self::SECOND || (((($_la - 1528)) & ~0x3f) === 0 && ((1 << ($_la - 1528)) & ((1 << (self::SIGNTYPE - 1528)) | (1 << (self::SIMPLE_INTEGER - 1528)) | (1 << (self::SMALLINT - 1528)))) !== 0) || $_la === self::STRING || (((($_la - 1932)) & ~0x3f) === 0 && ((1 << ($_la - 1932)) & ((1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1932)) | (1 << (self::TIMESTAMP - 1932)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1932)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1932)) | (1 << (self::TIMEZONE_ABBR - 1932)) | (1 << (self::TIMEZONE_HOUR - 1932)) | (1 << (self::TIMEZONE_MINUTE - 1932)) | (1 << (self::TIMEZONE_REGION - 1932)))) !== 0) || (((($_la - 2032)) & ~0x3f) === 0 && ((1 << ($_la - 2032)) & ((1 << (self::UROWID - 2032)) | (1 << (self::VARCHAR2 - 2032)) | (1 << (self::VARCHAR - 2032)))) !== 0) || $_la === self::YEAR || $_la === self::YMINTERVAL_UNCONSTRAINED) {
                $this->setState(7937);
                $this->datatype();
            }
            $this->setState(7941);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::GENERATED) {
                $this->setState(7940);
                $this->autogenerated_sequence_definition();
            }
            $this->setState(7944);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::VIRTUAL) {
                $this->setState(7943);
                $this->match(self::VIRTUAL);
            }
            $this->setState(7949);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::CHECK || $_la === self::CONSTRAINT || $_la === self::NOT || $_la === self::NULL_ || $_la === self::PRIMARY || $_la === self::REFERENCES || $_la === self::UNIQUE) {
                $this->setState(7946);
                $this->inline_constraint();
                $this->setState(7951);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function autogenerated_sequence_definition(): Context\Autogenerated_sequence_definitionContext
    {
        $localContext = new Context\Autogenerated_sequence_definitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 852, self::RULE_autogenerated_sequence_definition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7952);
            $this->match(self::GENERATED);
            $this->setState(7960);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALWAYS:
                    $this->setState(7953);
                    $this->match(self::ALWAYS);
                    break;

                case self::BY:
                    $this->setState(7954);
                    $this->match(self::BY);
                    $this->setState(7955);
                    $this->match(self::DEFAULT);
                    $this->setState(7958);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ON) {
                        $this->setState(7956);
                        $this->match(self::ON);
                        $this->setState(7957);
                        $this->match(self::NULL_);
                    }
                    break;

                case self::AS:
                    break;

                default:
                    break;
            }
            $this->setState(7962);
            $this->match(self::AS);
            $this->setState(7963);
            $this->match(self::IDENTITY);
            $this->setState(7973);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LEFT_PAREN) {
                $this->setState(7964);
                $this->match(self::LEFT_PAREN);
                $this->setState(7969);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::CACHE || $_la === self::CYCLE || $_la === self::INCREMENT || $_la === self::MAXVALUE || $_la === self::MINVALUE || (((($_la - 946)) & ~0x3f) === 0 && ((1 << ($_la - 946)) & ((1 << (self::NOCACHE - 946)) | (1 << (self::NOCYCLE - 946)) | (1 << (self::NOMAXVALUE - 946)) | (1 << (self::NOMINVALUE - 946)))) !== 0) || $_la === self::NOORDER || $_la === self::ORDER || $_la === self::START) {
                    $this->setState(7967);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::START:
                            $this->setState(7965);
                            $this->sequence_start_clause();
                            break;

                        case self::CACHE:
                        case self::CYCLE:
                        case self::INCREMENT:
                        case self::MAXVALUE:
                        case self::MINVALUE:
                        case self::NOCACHE:
                        case self::NOCYCLE:
                        case self::NOMAXVALUE:
                        case self::NOMINVALUE:
                        case self::NOORDER:
                        case self::ORDER:
                            $this->setState(7966);
                            $this->sequence_spec();
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(7971);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
                $this->setState(7972);
                $this->match(self::RIGHT_PAREN);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function out_of_line_part_storage(): Context\Out_of_line_part_storageContext
    {
        $localContext = new Context\Out_of_line_part_storageContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 854, self::RULE_out_of_line_part_storage);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7975);
            $this->match(self::PARTITION);
            $this->setState(7976);
            $this->partition_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function nested_table_col_properties(): Context\Nested_table_col_propertiesContext
    {
        $localContext = new Context\Nested_table_col_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 856, self::RULE_nested_table_col_properties);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(7978);
            $this->match(self::NESTED);
            $this->setState(7979);
            $this->match(self::TABLE);
            $this->setState(7982);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1022, $this->ctx)) {
                case 1:
                    $this->setState(7980);
                    $this->nested_item();
                    break;

                case 2:
                    $this->setState(7981);
                    $this->match(self::COLUMN_VALUE);
                    break;
            }
            $this->setState(7985);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ELEMENT || $_la === self::IS || $_la === self::NOT || $_la === self::SUBSTITUTABLE) {
                $this->setState(7984);
                $this->substitutable_column_clause();
            }
            $this->setState(7988);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::GLOBAL || $_la === self::LOCAL) {
                $this->setState(7987);

                $_la = $this->input->LA(1);

                if (!($_la === self::GLOBAL || $_la === self::LOCAL)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(7990);
            $this->match(self::STORE);
            $this->setState(7991);
            $this->match(self::AS);
            $this->setState(7992);
            $this->tableview_name();
            $this->setState(8006);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1027, $this->ctx)) {
                case 1:
                    $this->setState(7993);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(8000);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(8000);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::LEFT_PAREN:
                                $this->setState(7994);
                                $this->match(self::LEFT_PAREN);
                                $this->setState(7995);
                                $this->object_properties();
                                $this->setState(7996);
                                $this->match(self::RIGHT_PAREN);
                                break;

                            case self::FILESYSTEM_LIKE_LOGGING:
                            case self::INITRANS:
                            case self::LOGGING:
                            case self::NOLOGGING:
                            case self::PCTFREE:
                            case self::PCTUSED:
                            case self::SEGMENT:
                            case self::STORAGE:
                            case self::TABLESPACE:
                                $this->setState(7998);
                                $this->physical_properties();
                                break;

                            case self::COLUMN:
                            case self::LOB:
                            case self::NESTED:
                            case self::VARRAY:
                            case self::XMLTYPE:
                                $this->setState(7999);
                                $this->column_properties();
                                break;

                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(8002);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::COLUMN || $_la === self::FILESYSTEM_LIKE_LOGGING || $_la === self::INITRANS || $_la === self::LOB || $_la === self::LOGGING || $_la === self::NESTED || $_la === self::NOLOGGING || $_la === self::PCTFREE || $_la === self::PCTUSED || $_la === self::SEGMENT || $_la === self::STORAGE || $_la === self::TABLESPACE || $_la === self::VARRAY || $_la === self::XMLTYPE || $_la === self::LEFT_PAREN);
                    $this->setState(8004);
                    $this->match(self::RIGHT_PAREN);
                    break;
            }
            $this->setState(8013);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::RETURN) {
                $this->setState(8008);
                $this->match(self::RETURN);
                $this->setState(8010);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::AS) {
                    $this->setState(8009);
                    $this->match(self::AS);
                }
                $this->setState(8012);

                $_la = $this->input->LA(1);

                if (!($_la === self::LOCATOR || $_la === self::VALUE)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function nested_item(): Context\Nested_itemContext
    {
        $localContext = new Context\Nested_itemContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 858, self::RULE_nested_item);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8015);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function substitutable_column_clause(): Context\Substitutable_column_clauseContext
    {
        $localContext = new Context\Substitutable_column_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 860, self::RULE_substitutable_column_clause);

        try {
            $this->setState(8036);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ELEMENT:
                case self::IS:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(8018);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ELEMENT) {
                        $this->setState(8017);
                        $this->match(self::ELEMENT);
                    }
                    $this->setState(8020);
                    $this->match(self::IS);
                    $this->setState(8021);
                    $this->match(self::OF);
                    $this->setState(8023);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::TYPE) {
                        $this->setState(8022);
                        $this->match(self::TYPE);
                    }
                    $this->setState(8025);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(8026);
                    $this->type_name();
                    $this->setState(8027);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case self::NOT:
                case self::SUBSTITUTABLE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(8030);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NOT) {
                        $this->setState(8029);
                        $this->match(self::NOT);
                    }
                    $this->setState(8032);
                    $this->match(self::SUBSTITUTABLE);
                    $this->setState(8033);
                    $this->match(self::AT);
                    $this->setState(8034);
                    $this->match(self::ALL);
                    $this->setState(8035);
                    $this->match(self::LEVELS);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partition_name(): Context\Partition_nameContext
    {
        $localContext = new Context\Partition_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 862, self::RULE_partition_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8038);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function supplemental_logging_props(): Context\Supplemental_logging_propsContext
    {
        $localContext = new Context\Supplemental_logging_propsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 864, self::RULE_supplemental_logging_props);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8040);
            $this->match(self::SUPPLEMENTAL);
            $this->setState(8041);
            $this->match(self::LOG);
            $this->setState(8044);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::GROUP:
                    $this->setState(8042);
                    $this->supplemental_log_grp_clause();
                    break;

                case self::DATA:
                    $this->setState(8043);
                    $this->supplemental_id_key_clause();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function column_or_attribute(): Context\Column_or_attributeContext
    {
        $localContext = new Context\Column_or_attributeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 866, self::RULE_column_or_attribute);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8046);
            $this->regular_id();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function object_type_col_properties(): Context\Object_type_col_propertiesContext
    {
        $localContext = new Context\Object_type_col_propertiesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 868, self::RULE_object_type_col_properties);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8048);
            $this->match(self::COLUMN);
            $this->setState(8049);
            $localContext->column = $this->regular_id();
            $this->setState(8050);
            $this->substitutable_column_clause();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function constraint_clauses(): Context\Constraint_clausesContext
    {
        $localContext = new Context\Constraint_clausesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 870, self::RULE_constraint_clauses);

        try {
            $this->setState(8108);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1043, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(8052);
                    $this->match(self::ADD);
                    $this->setState(8053);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(8061);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 1036, $this->ctx)) {
                        case 1:
                            $this->setState(8057);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            while ($_la === self::CHECK || $_la === self::CONSTRAINT || $_la === self::FOREIGN || $_la === self::PRIMARY || $_la === self::UNIQUE) {
                                $this->setState(8054);
                                $this->out_of_line_constraint();
                                $this->setState(8059);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            }
                            break;

                        case 2:
                            $this->setState(8060);
                            $this->out_of_line_ref_constraint();
                            break;
                    }
                    $this->setState(8063);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(8064);
                    $this->match(self::ADD);
                    $this->setState(8072);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 1038, $this->ctx)) {
                        case 1:
                            $this->setState(8068);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            while ($_la === self::CHECK || $_la === self::CONSTRAINT || $_la === self::FOREIGN || $_la === self::PRIMARY || $_la === self::UNIQUE) {
                                $this->setState(8065);
                                $this->out_of_line_constraint();
                                $this->setState(8070);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            }
                            break;

                        case 2:
                            $this->setState(8071);
                            $this->out_of_line_ref_constraint();
                            break;
                    }
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(8074);
                    $this->match(self::MODIFY);
                    $this->setState(8091);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CONSTRAINT:
                            $this->setState(8075);
                            $this->match(self::CONSTRAINT);
                            $this->setState(8076);
                            $this->constraint_name();
                            break;

                        case self::PRIMARY:
                            $this->setState(8077);
                            $this->match(self::PRIMARY);
                            $this->setState(8078);
                            $this->match(self::KEY);
                            break;

                        case self::UNIQUE:
                            $this->setState(8079);
                            $this->match(self::UNIQUE);
                            $this->setState(8080);
                            $this->match(self::LEFT_PAREN);
                            $this->setState(8081);
                            $this->column_name();
                            $this->setState(8086);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            while ($_la === self::COMMA) {
                                $this->setState(8082);
                                $this->match(self::COMMA);
                                $this->setState(8083);
                                $this->column_name();
                                $this->setState(8088);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            }
                            $this->setState(8089);
                            $this->match(self::RIGHT_PAREN);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(8093);
                    $this->constraint_state();
                    $this->setState(8095);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CASCADE) {
                        $this->setState(8094);
                        $this->match(self::CASCADE);
                    }
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(8097);
                    $this->match(self::RENAME);
                    $this->setState(8098);
                    $this->match(self::CONSTRAINT);
                    $this->setState(8099);
                    $this->old_constraint_name();
                    $this->setState(8100);
                    $this->match(self::TO);
                    $this->setState(8101);
                    $this->new_constraint_name();
                    break;

                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(8104);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(8103);
                        $this->drop_constraint_clause();
                        $this->setState(8106);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::DROP);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function old_constraint_name(): Context\Old_constraint_nameContext
    {
        $localContext = new Context\Old_constraint_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 872, self::RULE_old_constraint_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8110);
            $this->constraint_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function new_constraint_name(): Context\New_constraint_nameContext
    {
        $localContext = new Context\New_constraint_nameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 874, self::RULE_new_constraint_name);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8112);
            $this->constraint_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_constraint_clause(): Context\Drop_constraint_clauseContext
    {
        $localContext = new Context\Drop_constraint_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 876, self::RULE_drop_constraint_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8114);
            $this->match(self::DROP);
            $this->setState(8115);
            $this->drop_primary_key_or_unique_or_generic_clause();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_primary_key_or_unique_or_generic_clause(): Context\Drop_primary_key_or_unique_or_generic_clauseContext
    {
        $localContext = new Context\Drop_primary_key_or_unique_or_generic_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 878, self::RULE_drop_primary_key_or_unique_or_generic_clause);

        try {
            $this->setState(8144);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::PRIMARY:
                case self::UNIQUE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(8131);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::PRIMARY:
                            $this->setState(8117);
                            $this->match(self::PRIMARY);
                            $this->setState(8118);
                            $this->match(self::KEY);
                            break;

                        case self::UNIQUE:
                            $this->setState(8119);
                            $this->match(self::UNIQUE);
                            $this->setState(8120);
                            $this->match(self::LEFT_PAREN);
                            $this->setState(8121);
                            $this->column_name();
                            $this->setState(8126);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            while ($_la === self::COMMA) {
                                $this->setState(8122);
                                $this->match(self::COMMA);
                                $this->setState(8123);
                                $this->column_name();
                                $this->setState(8128);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            }
                            $this->setState(8129);
                            $this->match(self::RIGHT_PAREN);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(8134);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CASCADE) {
                        $this->setState(8133);
                        $this->match(self::CASCADE);
                    }
                    $this->setState(8137);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 1047, $this->ctx)) {
                        case 1:
                            $this->setState(8136);

                            $_la = $this->input->LA(1);

                            if (!($_la === self::DROP || $_la === self::KEEP)) {
                                $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    break;

                case self::CONSTRAINT:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(8139);
                    $this->match(self::CONSTRAINT);
                    $this->setState(8140);
                    $this->constraint_name();
                    $this->setState(8142);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CASCADE) {
                        $this->setState(8141);
                        $this->match(self::CASCADE);
                    }
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_constraint(): Context\Add_constraintContext
    {
        $localContext = new Context\Add_constraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 880, self::RULE_add_constraint);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8146);
            $this->match(self::ADD);
            $this->setState(8149);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CONSTRAINT) {
                $this->setState(8147);
                $this->match(self::CONSTRAINT);
                $this->setState(8148);
                $this->constraint_name();
            }
            $this->setState(8151);
            $this->add_constraint_clause();
            $this->setState(8158);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(8152);
                $this->match(self::COMMA);
                $this->setState(8155);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::CONSTRAINT) {
                    $this->setState(8153);
                    $this->match(self::CONSTRAINT);
                    $this->setState(8154);
                    $this->constraint_name();
                }
                $this->setState(8157);
                $this->add_constraint_clause();
                $this->setState(8160);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::COMMA);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function add_constraint_clause(): Context\Add_constraint_clauseContext
    {
        $localContext = new Context\Add_constraint_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 882, self::RULE_add_constraint_clause);

        try {
            $this->setState(8166);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::PRIMARY:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(8162);
                    $this->primary_key_clause();
                    break;

                case self::FOREIGN:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(8163);
                    $this->foreign_key_clause();
                    break;

                case self::UNIQUE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(8164);
                    $this->unique_key_clause();
                    break;

                case self::CHECK:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(8165);
                    $this->check_constraint();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function check_constraint(): Context\Check_constraintContext
    {
        $localContext = new Context\Check_constraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 884, self::RULE_check_constraint);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8168);
            $this->match(self::CHECK);
            $this->setState(8169);
            $this->match(self::LEFT_PAREN);
            $this->setState(8170);
            $this->condition();
            $this->setState(8171);
            $this->match(self::RIGHT_PAREN);
            $this->setState(8173);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1054, $this->ctx)) {
                case 1:
                    $this->setState(8172);
                    $this->match(self::DISABLE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function drop_constraint(): Context\Drop_constraintContext
    {
        $localContext = new Context\Drop_constraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 886, self::RULE_drop_constraint);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8175);
            $this->match(self::DROP);
            $this->setState(8176);
            $this->match(self::CONSTRAINT);
            $this->setState(8177);
            $this->constraint_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function enable_constraint(): Context\Enable_constraintContext
    {
        $localContext = new Context\Enable_constraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 888, self::RULE_enable_constraint);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8179);
            $this->match(self::ENABLE);
            $this->setState(8180);
            $this->match(self::CONSTRAINT);
            $this->setState(8181);
            $this->constraint_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function disable_constraint(): Context\Disable_constraintContext
    {
        $localContext = new Context\Disable_constraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 890, self::RULE_disable_constraint);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8183);
            $this->match(self::DISABLE);
            $this->setState(8184);
            $this->match(self::CONSTRAINT);
            $this->setState(8185);
            $this->constraint_name();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function foreign_key_clause(): Context\Foreign_key_clauseContext
    {
        $localContext = new Context\Foreign_key_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 892, self::RULE_foreign_key_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8187);
            $this->match(self::FOREIGN);
            $this->setState(8188);
            $this->match(self::KEY);
            $this->setState(8189);
            $this->paren_column_list();
            $this->setState(8190);
            $this->references_clause();
            $this->setState(8192);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ON) {
                $this->setState(8191);
                $this->on_delete_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function references_clause(): Context\References_clauseContext
    {
        $localContext = new Context\References_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 894, self::RULE_references_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8194);
            $this->match(self::REFERENCES);
            $this->setState(8195);
            $this->tableview_name();
            $this->setState(8196);
            $this->paren_column_list();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function on_delete_clause(): Context\On_delete_clauseContext
    {
        $localContext = new Context\On_delete_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 896, self::RULE_on_delete_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8198);
            $this->match(self::ON);
            $this->setState(8199);
            $this->match(self::DELETE);
            $this->setState(8203);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CASCADE:
                    $this->setState(8200);
                    $this->match(self::CASCADE);
                    break;

                case self::SET:
                    $this->setState(8201);
                    $this->match(self::SET);
                    $this->setState(8202);
                    $this->match(self::NULL_);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function unique_key_clause(): Context\Unique_key_clauseContext
    {
        $localContext = new Context\Unique_key_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 898, self::RULE_unique_key_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8205);
            $this->match(self::UNIQUE);
            $this->setState(8206);
            $this->paren_column_list();
            $this->setState(8208);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USING) {
                $this->setState(8207);
                $this->using_index_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function primary_key_clause(): Context\Primary_key_clauseContext
    {
        $localContext = new Context\Primary_key_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 900, self::RULE_primary_key_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8210);
            $this->match(self::PRIMARY);
            $this->setState(8211);
            $this->match(self::KEY);
            $this->setState(8212);
            $this->paren_column_list();
            $this->setState(8214);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USING) {
                $this->setState(8213);
                $this->using_index_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function anonymous_block(): Context\Anonymous_blockContext
    {
        $localContext = new Context\Anonymous_blockContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 902, self::RULE_anonymous_block);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8218);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DECLARE) {
                $this->setState(8216);
                $this->match(self::DECLARE);
                $this->setState(8217);
                $this->seq_of_declare_specs();
            }
            $this->setState(8220);
            $this->match(self::BEGIN);
            $this->setState(8221);
            $this->seq_of_statements();
            $this->setState(8228);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EXCEPTION) {
                $this->setState(8222);
                $this->match(self::EXCEPTION);
                $this->setState(8224);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(8223);
                    $this->exception_handler();
                    $this->setState(8226);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::WHEN);
            }
            $this->setState(8230);
            $this->match(self::END);
            $this->setState(8231);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function invoker_rights_clause(): Context\Invoker_rights_clauseContext
    {
        $localContext = new Context\Invoker_rights_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 904, self::RULE_invoker_rights_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8233);
            $this->match(self::AUTHID);
            $this->setState(8234);

            $_la = $this->input->LA(1);

            if (!($_la === self::CURRENT_USER || $_la === self::DEFINER)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function call_spec(): Context\Call_specContext
    {
        $localContext = new Context\Call_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 906, self::RULE_call_spec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8236);
            $this->match(self::LANGUAGE);
            $this->setState(8239);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::JAVA:
                    $this->setState(8237);
                    $this->java_spec();
                    break;

                case self::C_LETTER:
                    $this->setState(8238);
                    $this->c_spec();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function java_spec(): Context\Java_specContext
    {
        $localContext = new Context\Java_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 908, self::RULE_java_spec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8241);
            $this->match(self::JAVA);
            $this->setState(8242);
            $this->match(self::NAME);
            $this->setState(8243);
            $this->match(self::CHAR_STRING);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function c_spec(): Context\C_specContext
    {
        $localContext = new Context\C_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 910, self::RULE_c_spec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8245);
            $this->match(self::C_LETTER);
            $this->setState(8248);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NAME) {
                $this->setState(8246);
                $this->match(self::NAME);
                $this->setState(8247);
                $this->match(self::CHAR_STRING);
            }
            $this->setState(8250);
            $this->match(self::LIBRARY);
            $this->setState(8251);
            $this->identifier();
            $this->setState(8253);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AGENT) {
                $this->setState(8252);
                $this->c_agent_in_clause();
            }
            $this->setState(8257);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WITH) {
                $this->setState(8255);
                $this->match(self::WITH);
                $this->setState(8256);
                $this->match(self::CONTEXT);
            }
            $this->setState(8260);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARAMETERS) {
                $this->setState(8259);
                $this->c_parameters_clause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function c_agent_in_clause(): Context\C_agent_in_clauseContext
    {
        $localContext = new Context\C_agent_in_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 912, self::RULE_c_agent_in_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8262);
            $this->match(self::AGENT);
            $this->setState(8263);
            $this->match(self::IN);
            $this->setState(8264);
            $this->match(self::LEFT_PAREN);
            $this->setState(8265);
            $this->expressions();
            $this->setState(8266);
            $this->match(self::RIGHT_PAREN);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function c_parameters_clause(): Context\C_parameters_clauseContext
    {
        $localContext = new Context\C_parameters_clauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 914, self::RULE_c_parameters_clause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8268);
            $this->match(self::PARAMETERS);
            $this->setState(8269);
            $this->match(self::LEFT_PAREN);
            $this->setState(8274);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1067, $this->ctx)) {
                case 1:
                    $this->setState(8270);
                    $this->expressions();
                    break;

                case 2:
                    $this->setState(8271);
                    $this->match(self::PERIOD);
                    $this->setState(8272);
                    $this->match(self::PERIOD);
                    $this->setState(8273);
                    $this->match(self::PERIOD);
                    break;
            }
            $this->setState(8276);
            $this->match(self::RIGHT_PAREN);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function parameter(): Context\ParameterContext
    {
        $localContext = new Context\ParameterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 916, self::RULE_parameter);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8278);
            $this->parameter_name();
            $this->setState(8282);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 1068, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(8279);

                    $_la = $this->input->LA(1);

                    if (!($_la === self::IN || $_la === self::INOUT || $_la === self::NOCOPY || $_la === self::OUT)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                }

                $this->setState(8284);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 1068, $this->ctx);
            }
            $this->setState(8286);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ABORT) | (1 << self::ABS) | (1 << self::ACCESS) | (1 << self::ACCESSED) | (1 << self::ACCOUNT) | (1 << self::ACL) | (1 << self::ACOS) | (1 << self::ACTION) | (1 << self::ACTIONS) | (1 << self::ACTIVATE) | (1 << self::ACTIVE) | (1 << self::ACTIVE_COMPONENT) | (1 << self::ACTIVE_DATA) | (1 << self::ACTIVE_FUNCTION) | (1 << self::ACTIVE_TAG) | (1 << self::ACTIVITY) | (1 << self::ADAPTIVE_PLAN) | (1 << self::ADD) | (1 << self::ADD_COLUMN) | (1 << self::ADD_GROUP) | (1 << self::ADD_MONTHS) | (1 << self::ADJ_DATE) | (1 << self::ADMIN) | (1 << self::ADMINISTER) | (1 << self::ADMINISTRATOR) | (1 << self::ADVANCED) | (1 << self::ADVISE) | (1 << self::ADVISOR) | (1 << self::AFD_DISKSTRING) | (1 << self::AFTER) | (1 << self::AGENT) | (1 << self::AGGREGATE) | (1 << self::A_LETTER) | (1 << self::ALIAS) | (1 << self::ALLOCATE) | (1 << self::ALLOW) | (1 << self::ALL_ROWS) | (1 << self::ALWAYS) | (1 << self::ANALYZE) | (1 << self::ANCILLARY) | (1 << self::AND_EQUAL) | (1 << self::ANOMALY) | (1 << self::ANSI_REARCH) | (1 << self::ANTIJOIN) | (1 << self::ANYSCHEMA) | (1 << self::APPEND) | (1 << self::APPENDCHILDXML) | (1 << self::APPEND_VALUES) | (1 << self::APPLICATION) | (1 << self::APPLY) | (1 << self::APPROX_COUNT_DISTINCT) | (1 << self::ARCHIVAL) | (1 << self::ARCHIVE) | (1 << self::ARCHIVED) | (1 << self::ARCHIVELOG) | (1 << self::ARRAY) | (1 << self::ASCII))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::ASCIISTR - 64)) | (1 << (self::ASIN - 64)) | (1 << (self::ASIS - 64)) | (1 << (self::ASSEMBLY - 64)) | (1 << (self::ASSIGN - 64)) | (1 << (self::ASSOCIATE - 64)) | (1 << (self::ASYNC - 64)) | (1 << (self::ASYNCHRONOUS - 64)) | (1 << (self::ATAN2 - 64)) | (1 << (self::ATAN - 64)) | (1 << (self::AT - 64)) | (1 << (self::ATTRIBUTE - 64)) | (1 << (self::ATTRIBUTES - 64)) | (1 << (self::AUTHENTICATED - 64)) | (1 << (self::AUTHENTICATION - 64)) | (1 << (self::AUTHID - 64)) | (1 << (self::AUTHORIZATION - 64)) | (1 << (self::AUTOALLOCATE - 64)) | (1 << (self::AUTO - 64)) | (1 << (self::AUTOEXTEND - 64)) | (1 << (self::AUTO_LOGIN - 64)) | (1 << (self::AUTOMATIC - 64)) | (1 << (self::AUTONOMOUS_TRANSACTION - 64)) | (1 << (self::AUTO_REOPTIMIZE - 64)) | (1 << (self::AVAILABILITY - 64)) | (1 << (self::AVRO - 64)) | (1 << (self::BACKGROUND - 64)) | (1 << (self::BACKUP - 64)) | (1 << (self::BASIC - 64)) | (1 << (self::BASICFILE - 64)) | (1 << (self::BATCH - 64)) | (1 << (self::BATCHSIZE - 64)) | (1 << (self::BATCH_TABLE_ACCESS_BY_ROWID - 64)) | (1 << (self::BECOME - 64)) | (1 << (self::BEFORE - 64)) | (1 << (self::BEGIN - 64)) | (1 << (self::BEGINNING - 64)) | (1 << (self::BEGIN_OUTLINE_DATA - 64)) | (1 << (self::BEHALF - 64)) | (1 << (self::BEQUEATH - 64)) | (1 << (self::BFILE - 64)) | (1 << (self::BFILENAME - 64)) | (1 << (self::BIGFILE - 64)) | (1 << (self::BINARY - 64)) | (1 << (self::BINARY_DOUBLE - 64)) | (1 << (self::BINARY_DOUBLE_INFINITY - 64)) | (1 << (self::BINARY_DOUBLE_NAN - 64)) | (1 << (self::BINARY_FLOAT - 64)) | (1 << (self::BINARY_FLOAT_INFINITY - 64)) | (1 << (self::BINARY_FLOAT_NAN - 64)) | (1 << (self::BINARY_INTEGER - 64)) | (1 << (self::BIND_AWARE - 64)) | (1 << (self::BINDING - 64)) | (1 << (self::BIN_TO_NUM - 64)) | (1 << (self::BITAND - 64)) | (1 << (self::BITMAP_AND - 64)) | (1 << (self::BITMAP - 64)) | (1 << (self::BITMAPS - 64)) | (1 << (self::BITMAP_TREE - 64)) | (1 << (self::BITS - 64)))) !== 0) || (((($_la - 128)) & ~0x3f) === 0 && ((1 << ($_la - 128)) & ((1 << (self::BLOB - 128)) | (1 << (self::BLOCK - 128)) | (1 << (self::BLOCK_RANGE - 128)) | (1 << (self::BLOCKS - 128)) | (1 << (self::BLOCKSIZE - 128)) | (1 << (self::BODY - 128)) | (1 << (self::BOOLEAN - 128)) | (1 << (self::BOTH - 128)) | (1 << (self::BOUND - 128)) | (1 << (self::BRANCH - 128)) | (1 << (self::BREADTH - 128)) | (1 << (self::BROADCAST - 128)) | (1 << (self::BSON - 128)) | (1 << (self::BUFFER - 128)) | (1 << (self::BUFFER_CACHE - 128)) | (1 << (self::BUFFER_POOL - 128)) | (1 << (self::BUILD - 128)) | (1 << (self::BULK - 128)) | (1 << (self::BYPASS_RECURSIVE_CHECK - 128)) | (1 << (self::BYPASS_UJVC - 128)) | (1 << (self::BYTE - 128)) | (1 << (self::CACHE - 128)) | (1 << (self::CACHE_CB - 128)) | (1 << (self::CACHE_INSTANCES - 128)) | (1 << (self::CACHE_TEMP_TABLE - 128)) | (1 << (self::CACHING - 128)) | (1 << (self::CALCULATED - 128)) | (1 << (self::CALLBACK - 128)) | (1 << (self::CALL - 128)) | (1 << (self::CANCEL - 128)) | (1 << (self::CAPACITY - 128)) | (1 << (self::CARDINALITY - 128)) | (1 << (self::CASCADE - 128)) | (1 << (self::CASE - 128)) | (1 << (self::CAST - 128)) | (1 << (self::CATEGORY - 128)) | (1 << (self::CDBDEFAULT - 128)) | (1 << (self::CEIL - 128)) | (1 << (self::CELL_FLASH_CACHE - 128)) | (1 << (self::CERTIFICATE - 128)) | (1 << (self::CFILE - 128)) | (1 << (self::CHAINED - 128)) | (1 << (self::CHANGE - 128)) | (1 << (self::CHANGE_DUPKEY_ERROR_INDEX - 128)) | (1 << (self::CHARACTER - 128)) | (1 << (self::CHAR - 128)) | (1 << (self::CHAR_CS - 128)) | (1 << (self::CHARTOROWID - 128)) | (1 << (self::CHECK_ACL_REWRITE - 128)) | (1 << (self::CHECKPOINT - 128)) | (1 << (self::CHILD - 128)) | (1 << (self::CHOOSE - 128)) | (1 << (self::CHR - 128)) | (1 << (self::CHUNK - 128)) | (1 << (self::CLASS - 128)) | (1 << (self::CLASSIFIER - 128)) | (1 << (self::CLEANUP - 128)) | (1 << (self::CLEAR - 128)) | (1 << (self::C_LETTER - 128)) | (1 << (self::CLIENT - 128)))) !== 0) || (((($_la - 192)) & ~0x3f) === 0 && ((1 << ($_la - 192)) & ((1 << (self::CLOB - 192)) | (1 << (self::CLONE - 192)) | (1 << (self::CLOSE_CACHED_OPEN_CURSORS - 192)) | (1 << (self::CLOSE - 192)) | (1 << (self::CLUSTER_BY_ROWID - 192)) | (1 << (self::CLUSTER - 192)) | (1 << (self::CLUSTER_DETAILS - 192)) | (1 << (self::CLUSTER_DISTANCE - 192)) | (1 << (self::CLUSTER_ID - 192)) | (1 << (self::CLUSTERING - 192)) | (1 << (self::CLUSTERING_FACTOR - 192)) | (1 << (self::CLUSTER_PROBABILITY - 192)) | (1 << (self::CLUSTER_SET - 192)) | (1 << (self::COALESCE - 192)) | (1 << (self::COALESCE_SQ - 192)) | (1 << (self::COARSE - 192)) | (1 << (self::CO_AUTH_IND - 192)) | (1 << (self::COLD - 192)) | (1 << (self::COLLECT - 192)) | (1 << (self::COLUMNAR - 192)) | (1 << (self::COLUMN_AUTH_INDICATOR - 192)) | (1 << (self::COLUMN - 192)) | (1 << (self::COLUMNS - 192)) | (1 << (self::COLUMN_STATS - 192)) | (1 << (self::COLUMN_VALUE - 192)) | (1 << (self::COMMENT - 192)) | (1 << (self::COMMIT - 192)) | (1 << (self::COMMITTED - 192)) | (1 << (self::COMMON_DATA - 192)) | (1 << (self::COMPACT - 192)) | (1 << (self::COMPATIBILITY - 192)) | (1 << (self::COMPILE - 192)) | (1 << (self::COMPLETE - 192)) | (1 << (self::COMPLIANCE - 192)) | (1 << (self::COMPONENT - 192)) | (1 << (self::COMPONENTS - 192)) | (1 << (self::COMPOSE - 192)) | (1 << (self::COMPOSITE - 192)) | (1 << (self::COMPOSITE_LIMIT - 192)) | (1 << (self::COMPOUND - 192)) | (1 << (self::COMPUTE - 192)) | (1 << (self::CONCAT - 192)) | (1 << (self::CON_DBID_TO_ID - 192)) | (1 << (self::CONDITIONAL - 192)) | (1 << (self::CONDITION - 192)) | (1 << (self::CONFIRM - 192)) | (1 << (self::CONFORMING - 192)) | (1 << (self::CON_GUID_TO_ID - 192)) | (1 << (self::CON_ID - 192)) | (1 << (self::CON_NAME_TO_ID - 192)) | (1 << (self::CONNECT_BY_CB_WHR_ONLY - 192)) | (1 << (self::CONNECT_BY_COMBINE_SW - 192)) | (1 << (self::CONNECT_BY_COST_BASED - 192)) | (1 << (self::CONNECT_BY_ELIM_DUPS - 192)) | (1 << (self::CONNECT_BY_FILTERING - 192)) | (1 << (self::CONNECT_BY_ISCYCLE - 192)) | (1 << (self::CONNECT_BY_ISLEAF - 192)) | (1 << (self::CONNECT_BY_ROOT - 192)) | (1 << (self::CONNECT_TIME - 192)) | (1 << (self::CONSIDER - 192)) | (1 << (self::CONSISTENT - 192)) | (1 << (self::CONSTANT - 192)))) !== 0) || (((($_la - 256)) & ~0x3f) === 0 && ((1 << ($_la - 256)) & ((1 << (self::CONST - 256)) | (1 << (self::CONSTRAINT - 256)) | (1 << (self::CONSTRAINTS - 256)) | (1 << (self::CONSTRUCTOR - 256)) | (1 << (self::CONTAINER - 256)) | (1 << (self::CONTAINER_DATA - 256)) | (1 << (self::CONTAINERS - 256)) | (1 << (self::CONTENT - 256)) | (1 << (self::CONTENTS - 256)) | (1 << (self::CONTEXT - 256)) | (1 << (self::CONTINUE - 256)) | (1 << (self::CONTROLFILE - 256)) | (1 << (self::CON_UID_TO_ID - 256)) | (1 << (self::CONVERT - 256)) | (1 << (self::COOKIE - 256)) | (1 << (self::COPY - 256)) | (1 << (self::CORR_K - 256)) | (1 << (self::CORR_S - 256)) | (1 << (self::CORRUPTION - 256)) | (1 << (self::CORRUPT_XID_ALL - 256)) | (1 << (self::CORRUPT_XID - 256)) | (1 << (self::COS - 256)) | (1 << (self::COSH - 256)) | (1 << (self::COST - 256)) | (1 << (self::COST_XML_QUERY_REWRITE - 256)) | (1 << (self::COUNT - 256)) | (1 << (self::COVAR_POP - 256)) | (1 << (self::COVAR_SAMP - 256)) | (1 << (self::CPU_COSTING - 256)) | (1 << (self::CPU_PER_CALL - 256)) | (1 << (self::CPU_PER_SESSION - 256)) | (1 << (self::CRASH - 256)) | (1 << (self::CREATE_FILE_DEST - 256)) | (1 << (self::CREATE_STORED_OUTLINES - 256)) | (1 << (self::CREATION - 256)) | (1 << (self::CREDENTIAL - 256)) | (1 << (self::CRITICAL - 256)) | (1 << (self::CROSS - 256)) | (1 << (self::CROSSEDITION - 256)) | (1 << (self::CSCONVERT - 256)) | (1 << (self::CUBE_AJ - 256)) | (1 << (self::CUBE - 256)) | (1 << (self::CUBE_GB - 256)) | (1 << (self::CUBE_SJ - 256)) | (1 << (self::CUME_DISTM - 256)) | (1 << (self::CURRENT - 256)) | (1 << (self::CURRENT_DATE - 256)) | (1 << (self::CURRENT_SCHEMA - 256)) | (1 << (self::CURRENT_TIME - 256)) | (1 << (self::CURRENT_TIMESTAMP - 256)) | (1 << (self::CURRENT_USER - 256)) | (1 << (self::CURRENTV - 256)) | (1 << (self::CURSOR - 256)) | (1 << (self::CURSOR_SHARING_EXACT - 256)) | (1 << (self::CURSOR_SPECIFIC_SEGMENT - 256)) | (1 << (self::CUSTOMDATUM - 256)) | (1 << (self::CV - 256)) | (1 << (self::CYCLE - 256)) | (1 << (self::DANGLING - 256)) | (1 << (self::DATABASE - 256)) | (1 << (self::DATA - 256)) | (1 << (self::DATAFILE - 256)) | (1 << (self::DATAFILES - 256)))) !== 0) || (((($_la - 321)) & ~0x3f) === 0 && ((1 << ($_la - 321)) & ((1 << (self::DATAMOVEMENT - 321)) | (1 << (self::DATAOBJNO - 321)) | (1 << (self::DATAOBJ_TO_MAT_PARTITION - 321)) | (1 << (self::DATAOBJ_TO_PARTITION - 321)) | (1 << (self::DATAPUMP - 321)) | (1 << (self::DATA_SECURITY_REWRITE_LIMIT - 321)) | (1 << (self::DATE - 321)) | (1 << (self::DATE_MODE - 321)) | (1 << (self::DAY - 321)) | (1 << (self::DAYS - 321)) | (1 << (self::DBA - 321)) | (1 << (self::DBA_RECYCLEBIN - 321)) | (1 << (self::DBMS_STATS - 321)) | (1 << (self::DB_ROLE_CHANGE - 321)) | (1 << (self::DBTIMEZONE - 321)) | (1 << (self::DB_UNIQUE_NAME - 321)) | (1 << (self::DB_VERSION - 321)) | (1 << (self::DDL - 321)) | (1 << (self::DEALLOCATE - 321)) | (1 << (self::DEBUG - 321)) | (1 << (self::DEBUGGER - 321)) | (1 << (self::DEC - 321)) | (1 << (self::DECIMAL - 321)) | (1 << (self::DECLARE - 321)) | (1 << (self::DECOMPOSE - 321)) | (1 << (self::DECORRELATE - 321)) | (1 << (self::DECR - 321)) | (1 << (self::DECREMENT - 321)) | (1 << (self::DECRYPT - 321)) | (1 << (self::DEDUPLICATE - 321)) | (1 << (self::DEFAULTS - 321)) | (1 << (self::DEFERRABLE - 321)) | (1 << (self::DEFERRED - 321)) | (1 << (self::DEFINED - 321)) | (1 << (self::DEFINE - 321)) | (1 << (self::DEFINER - 321)) | (1 << (self::DEGREE - 321)) | (1 << (self::DELAY - 321)) | (1 << (self::DELEGATE - 321)) | (1 << (self::DELETE_ALL - 321)) | (1 << (self::DELETE - 321)) | (1 << (self::DELETEXML - 321)) | (1 << (self::DEMAND - 321)) | (1 << (self::DENSE_RANKM - 321)) | (1 << (self::DEPENDENT - 321)) | (1 << (self::DEPTH - 321)) | (1 << (self::DEQUEUE - 321)) | (1 << (self::DEREF - 321)) | (1 << (self::DEREF_NO_REWRITE - 321)) | (1 << (self::DESTROY - 321)) | (1 << (self::DETACHED - 321)) | (1 << (self::DETERMINES - 321)) | (1 << (self::DETERMINISTIC - 321)) | (1 << (self::DICTIONARY - 321)) | (1 << (self::DIMENSION - 321)) | (1 << (self::DIMENSIONS - 321)) | (1 << (self::DIRECT_LOAD - 321)) | (1 << (self::DIRECTORY - 321)) | (1 << (self::DIRECT_PATH - 321)) | (1 << (self::DISABLE_ALL - 321)) | (1 << (self::DISABLE - 321)) | (1 << (self::DISABLE_PARALLEL_DML - 321)))) !== 0) || (((($_la - 385)) & ~0x3f) === 0 && ((1 << ($_la - 385)) & ((1 << (self::DISABLE_PRESET - 385)) | (1 << (self::DISABLE_RPKE - 385)) | (1 << (self::DISALLOW - 385)) | (1 << (self::DISASSOCIATE - 385)) | (1 << (self::DISCARD - 385)) | (1 << (self::DISCONNECT - 385)) | (1 << (self::DISK - 385)) | (1 << (self::DISKGROUP - 385)) | (1 << (self::DISKS - 385)) | (1 << (self::DISMOUNT - 385)) | (1 << (self::DISTINGUISHED - 385)) | (1 << (self::DISTRIBUTED - 385)) | (1 << (self::DISTRIBUTE - 385)) | (1 << (self::DML - 385)) | (1 << (self::DML_UPDATE - 385)) | (1 << (self::DOCFIDELITY - 385)) | (1 << (self::DOCUMENT - 385)) | (1 << (self::DOMAIN_INDEX_FILTER - 385)) | (1 << (self::DOMAIN_INDEX_NO_SORT - 385)) | (1 << (self::DOMAIN_INDEX_SORT - 385)) | (1 << (self::DOUBLE - 385)) | (1 << (self::DOWNGRADE - 385)) | (1 << (self::DRIVING_SITE - 385)) | (1 << (self::DROP_COLUMN - 385)) | (1 << (self::DROP_GROUP - 385)) | (1 << (self::DSINTERVAL_UNCONSTRAINED - 385)) | (1 << (self::DST_UPGRADE_INSERT_CONV - 385)) | (1 << (self::DUMP - 385)) | (1 << (self::DUPLICATE - 385)) | (1 << (self::DV - 385)) | (1 << (self::DYNAMIC - 385)) | (1 << (self::DYNAMIC_SAMPLING - 385)) | (1 << (self::DYNAMIC_SAMPLING_EST_CDN - 385)) | (1 << (self::EACH - 385)) | (1 << (self::EDITIONABLE - 385)) | (1 << (self::EDITION - 385)) | (1 << (self::EDITIONING - 385)) | (1 << (self::EDITIONS - 385)) | (1 << (self::ELEMENT - 385)) | (1 << (self::ELIM_GROUPBY - 385)) | (1 << (self::ELIMINATE_JOIN - 385)) | (1 << (self::ELIMINATE_OBY - 385)) | (1 << (self::ELIMINATE_OUTER_JOIN - 385)) | (1 << (self::EM - 385)) | (1 << (self::EMPTY_BLOB - 385)) | (1 << (self::EMPTY_CLOB - 385)) | (1 << (self::EMPTY - 385)) | (1 << (self::ENABLE_ALL - 385)) | (1 << (self::ENABLE - 385)) | (1 << (self::ENABLE_PARALLEL_DML - 385)) | (1 << (self::ENABLE_PRESET - 385)) | (1 << (self::ENCODING - 385)) | (1 << (self::ENCRYPT - 385)) | (1 << (self::ENCRYPTION - 385)) | (1 << (self::END_OUTLINE_DATA - 385)) | (1 << (self::ENFORCED - 385)) | (1 << (self::ENFORCE - 385)))) !== 0) || (((($_la - 449)) & ~0x3f) === 0 && ((1 << ($_la - 449)) & ((1 << (self::ENQUEUE - 449)) | (1 << (self::ENTERPRISE - 449)) | (1 << (self::ENTITYESCAPING - 449)) | (1 << (self::ENTRY - 449)) | (1 << (self::EQUIPART - 449)) | (1 << (self::ERR - 449)) | (1 << (self::ERROR_ARGUMENT - 449)) | (1 << (self::ERROR - 449)) | (1 << (self::ERROR_ON_OVERLAP_TIME - 449)) | (1 << (self::ERRORS - 449)) | (1 << (self::ESCAPE - 449)) | (1 << (self::ESTIMATE - 449)) | (1 << (self::EVAL - 449)) | (1 << (self::EVALNAME - 449)) | (1 << (self::EVALUATE - 449)) | (1 << (self::EVALUATION - 449)) | (1 << (self::EVENTS - 449)) | (1 << (self::EVERY - 449)) | (1 << (self::EXCEPT - 449)) | (1 << (self::EXCEPTION - 449)) | (1 << (self::EXCEPTION_INIT - 449)) | (1 << (self::EXCEPTIONS - 449)) | (1 << (self::EXCHANGE - 449)) | (1 << (self::EXCLUDE - 449)) | (1 << (self::EXCLUDING - 449)) | (1 << (self::EXECUTE - 449)) | (1 << (self::EXEMPT - 449)) | (1 << (self::EXISTING - 449)) | (1 << (self::EXISTS - 449)) | (1 << (self::EXISTSNODE - 449)) | (1 << (self::EXIT - 449)) | (1 << (self::EXPAND_GSET_TO_UNION - 449)) | (1 << (self::EXPAND_TABLE - 449)) | (1 << (self::EXP - 449)) | (1 << (self::EXPIRE - 449)) | (1 << (self::EXPLAIN - 449)) | (1 << (self::EXPLOSION - 449)) | (1 << (self::EXPORT - 449)) | (1 << (self::EXPR_CORR_CHECK - 449)) | (1 << (self::EXPRESS - 449)) | (1 << (self::EXTENDS - 449)) | (1 << (self::EXTENT - 449)) | (1 << (self::EXTENTS - 449)) | (1 << (self::EXTERNAL - 449)) | (1 << (self::EXTERNALLY - 449)) | (1 << (self::EXTRACTCLOBXML - 449)) | (1 << (self::EXTRACT - 449)) | (1 << (self::EXTRACTVALUE - 449)) | (1 << (self::EXTRA - 449)) | (1 << (self::FACILITY - 449)) | (1 << (self::FACT - 449)) | (1 << (self::FACTOR - 449)) | (1 << (self::FACTORIZE_JOIN - 449)) | (1 << (self::FAILED - 449)) | (1 << (self::FAILED_LOGIN_ATTEMPTS - 449)) | (1 << (self::FAILGROUP - 449)) | (1 << (self::FAILOVER - 449)) | (1 << (self::FAILURE - 449)) | (1 << (self::FALSE - 449)) | (1 << (self::FAMILY - 449)) | (1 << (self::FAR - 449)) | (1 << (self::FAST - 449)) | (1 << (self::FASTSTART - 449)))) !== 0) || (((($_la - 513)) & ~0x3f) === 0 && ((1 << ($_la - 513)) & ((1 << (self::FBTSCAN - 513)) | (1 << (self::FEATURE_DETAILS - 513)) | (1 << (self::FEATURE_ID - 513)) | (1 << (self::FEATURE_SET - 513)) | (1 << (self::FEATURE_VALUE - 513)) | (1 << (self::FETCH - 513)) | (1 << (self::FILE - 513)) | (1 << (self::FILE_NAME_CONVERT - 513)) | (1 << (self::FILESYSTEM_LIKE_LOGGING - 513)) | (1 << (self::FILTER - 513)) | (1 << (self::FINAL - 513)) | (1 << (self::FINE - 513)) | (1 << (self::FINISH - 513)) | (1 << (self::FIRST - 513)) | (1 << (self::FIRSTM - 513)) | (1 << (self::FIRST_ROWS - 513)) | (1 << (self::FIRST_VALUE - 513)) | (1 << (self::FIXED_VIEW_DATA - 513)) | (1 << (self::FLAGGER - 513)) | (1 << (self::FLASHBACK - 513)) | (1 << (self::FLASH_CACHE - 513)) | (1 << (self::FLOAT - 513)) | (1 << (self::FLOB - 513)) | (1 << (self::FLOOR - 513)) | (1 << (self::FLUSH - 513)) | (1 << (self::FOLDER - 513)) | (1 << (self::FOLLOWING - 513)) | (1 << (self::FOLLOWS - 513)) | (1 << (self::FORALL - 513)) | (1 << (self::FORCE - 513)) | (1 << (self::FORCE_XML_QUERY_REWRITE - 513)) | (1 << (self::FOREIGN - 513)) | (1 << (self::FOREVER - 513)) | (1 << (self::FORMAT - 513)) | (1 << (self::FORWARD - 513)) | (1 << (self::FRAGMENT_NUMBER - 513)) | (1 << (self::FREELIST - 513)) | (1 << (self::FREELISTS - 513)) | (1 << (self::FREEPOOLS - 513)) | (1 << (self::FRESH - 513)) | (1 << (self::FROM_TZ - 513)) | (1 << (self::FULL - 513)) | (1 << (self::FULL_OUTER_JOIN_TO_OUTER - 513)) | (1 << (self::FUNCTION - 513)) | (1 << (self::FUNCTIONS - 513)) | (1 << (self::GATHER_OPTIMIZER_STATISTICS - 513)) | (1 << (self::GATHER_PLAN_STATISTICS - 513)) | (1 << (self::GBY_CONC_ROLLUP - 513)) | (1 << (self::GBY_PUSHDOWN - 513)) | (1 << (self::GENERATED - 513)) | (1 << (self::GET - 513)) | (1 << (self::GLOBAL - 513)) | (1 << (self::GLOBALLY - 513)) | (1 << (self::GLOBAL_NAME - 513)) | (1 << (self::GLOBAL_TOPIC_ENABLED - 513)) | (1 << (self::GROUP_BY - 513)) | (1 << (self::GROUP_ID - 513)) | (1 << (self::GROUPING - 513)) | (1 << (self::GROUPING_ID - 513)))) !== 0) || (((($_la - 577)) & ~0x3f) === 0 && ((1 << ($_la - 577)) & ((1 << (self::GROUPS - 577)) | (1 << (self::GUARANTEED - 577)) | (1 << (self::GUARANTEE - 577)) | (1 << (self::GUARD - 577)) | (1 << (self::HASH_AJ - 577)) | (1 << (self::HASH - 577)) | (1 << (self::HASHKEYS - 577)) | (1 << (self::HASH_SJ - 577)) | (1 << (self::HEADER - 577)) | (1 << (self::HEAP - 577)) | (1 << (self::HELP - 577)) | (1 << (self::HEXTORAW - 577)) | (1 << (self::HEXTOREF - 577)) | (1 << (self::HIDDEN_KEYWORD - 577)) | (1 << (self::HIDE - 577)) | (1 << (self::HIERARCHY - 577)) | (1 << (self::HIGH - 577)) | (1 << (self::HINTSET_BEGIN - 577)) | (1 << (self::HINTSET_END - 577)) | (1 << (self::HOT - 577)) | (1 << (self::HOUR - 577)) | (1 << (self::HWM_BROKERED - 577)) | (1 << (self::HYBRID - 577)) | (1 << (self::IDENTIFIER - 577)) | (1 << (self::IDENTITY - 577)) | (1 << (self::IDGENERATORS - 577)) | (1 << (self::ID - 577)) | (1 << (self::IDLE_TIME - 577)) | (1 << (self::IF - 577)) | (1 << (self::IGNORE - 577)) | (1 << (self::IGNORE_OPTIM_EMBEDDED_HINTS - 577)) | (1 << (self::IGNORE_ROW_ON_DUPKEY_INDEX - 577)) | (1 << (self::IGNORE_WHERE_CLAUSE - 577)) | (1 << (self::ILM - 577)) | (1 << (self::IMMEDIATE - 577)) | (1 << (self::IMPACT - 577)) | (1 << (self::IMPORT - 577)) | (1 << (self::INACTIVE - 577)) | (1 << (self::INCLUDE - 577)) | (1 << (self::INCLUDE_VERSION - 577)) | (1 << (self::INCLUDING - 577)) | (1 << (self::INCREMENTAL - 577)) | (1 << (self::INCREMENT - 577)) | (1 << (self::INCR - 577)) | (1 << (self::INDENT - 577)) | (1 << (self::INDEX_ASC - 577)) | (1 << (self::INDEX_COMBINE - 577)) | (1 << (self::INDEX_DESC - 577)) | (1 << (self::INDEXED - 577)) | (1 << (self::INDEXES - 577)) | (1 << (self::INDEX_FFS - 577)) | (1 << (self::INDEX_FILTER - 577)) | (1 << (self::INDEXING - 577)) | (1 << (self::INDEX_JOIN - 577)) | (1 << (self::INDEX_ROWS - 577)) | (1 << (self::INDEX_RRS - 577)) | (1 << (self::INDEX_RS_ASC - 577)) | (1 << (self::INDEX_RS_DESC - 577)) | (1 << (self::INDEX_RS - 577)) | (1 << (self::INDEX_SCAN - 577)) | (1 << (self::INDEX_SKIP_SCAN - 577)))) !== 0) || (((($_la - 641)) & ~0x3f) === 0 && ((1 << ($_la - 641)) & ((1 << (self::INDEX_SS_ASC - 641)) | (1 << (self::INDEX_SS_DESC - 641)) | (1 << (self::INDEX_SS - 641)) | (1 << (self::INDEX_STATS - 641)) | (1 << (self::INDEXTYPE - 641)) | (1 << (self::INDEXTYPES - 641)) | (1 << (self::INDICATOR - 641)) | (1 << (self::INDICES - 641)) | (1 << (self::INFINITE - 641)) | (1 << (self::INFORMATIONAL - 641)) | (1 << (self::INHERIT - 641)) | (1 << (self::INITCAP - 641)) | (1 << (self::INITIAL - 641)) | (1 << (self::INITIALIZED - 641)) | (1 << (self::INITIALLY - 641)) | (1 << (self::INITRANS - 641)) | (1 << (self::INLINE - 641)) | (1 << (self::INLINE_XMLTYPE_NT - 641)) | (1 << (self::INMEMORY - 641)) | (1 << (self::IN_MEMORY_METADATA - 641)) | (1 << (self::INMEMORY_PRUNING - 641)) | (1 << (self::INNER - 641)) | (1 << (self::INOUT - 641)) | (1 << (self::INPLACE - 641)) | (1 << (self::INSERTCHILDXMLAFTER - 641)) | (1 << (self::INSERTCHILDXMLBEFORE - 641)) | (1 << (self::INSERTCHILDXML - 641)) | (1 << (self::INSERTXMLAFTER - 641)) | (1 << (self::INSERTXMLBEFORE - 641)) | (1 << (self::INSTANCE - 641)) | (1 << (self::INSTANCES - 641)) | (1 << (self::INSTANTIABLE - 641)) | (1 << (self::INSTANTLY - 641)) | (1 << (self::INSTEAD - 641)) | (1 << (self::INSTR2 - 641)) | (1 << (self::INSTR4 - 641)) | (1 << (self::INSTRB - 641)) | (1 << (self::INSTRC - 641)) | (1 << (self::INSTR - 641)) | (1 << (self::INTEGER - 641)) | (1 << (self::INTERLEAVED - 641)) | (1 << (self::INTERMEDIATE - 641)) | (1 << (self::INTERNAL_CONVERT - 641)) | (1 << (self::INTERNAL_USE - 641)) | (1 << (self::INTERPRETED - 641)) | (1 << (self::INTERVAL - 641)) | (1 << (self::INT - 641)) | (1 << (self::INVALIDATE - 641)) | (1 << (self::INVISIBLE - 641)) | (1 << (self::IN_XQUERY - 641)) | (1 << (self::ISOLATION - 641)) | (1 << (self::ISOLATION_LEVEL - 641)) | (1 << (self::ITERATE - 641)) | (1 << (self::ITERATION_NUMBER - 641)) | (1 << (self::JAVA - 641)) | (1 << (self::JOB - 641)) | (1 << (self::JOIN - 641)) | (1 << (self::JSON_ARRAYAGG - 641)) | (1 << (self::JSON_ARRAY - 641)))) !== 0) || (((($_la - 705)) & ~0x3f) === 0 && ((1 << ($_la - 705)) & ((1 << (self::JSON_EQUAL - 705)) | (1 << (self::JSON_EXISTS2 - 705)) | (1 << (self::JSON_EXISTS - 705)) | (1 << (self::JSONGET - 705)) | (1 << (self::JSON - 705)) | (1 << (self::JSON_OBJECTAGG - 705)) | (1 << (self::JSON_OBJECT - 705)) | (1 << (self::JSONPARSE - 705)) | (1 << (self::JSON_QUERY - 705)) | (1 << (self::JSON_SERIALIZE - 705)) | (1 << (self::JSON_TABLE - 705)) | (1 << (self::JSON_TEXTCONTAINS2 - 705)) | (1 << (self::JSON_TEXTCONTAINS - 705)) | (1 << (self::JSON_VALUE - 705)) | (1 << (self::KEEP_DUPLICATES - 705)) | (1 << (self::KEEP - 705)) | (1 << (self::KERBEROS - 705)) | (1 << (self::KEY - 705)) | (1 << (self::KEY_LENGTH - 705)) | (1 << (self::KEYSIZE - 705)) | (1 << (self::KEYS - 705)) | (1 << (self::KEYSTORE - 705)) | (1 << (self::KILL - 705)) | (1 << (self::LABEL - 705)) | (1 << (self::LANGUAGE - 705)) | (1 << (self::LAST_DAY - 705)) | (1 << (self::LAST - 705)) | (1 << (self::LAST_VALUE - 705)) | (1 << (self::LATERAL - 705)) | (1 << (self::LAX - 705)) | (1 << (self::LAYER - 705)) | (1 << (self::LDAP_REGISTRATION_ENABLED - 705)) | (1 << (self::LDAP_REGISTRATION - 705)) | (1 << (self::LDAP_REG_SYNC_INTERVAL - 705)) | (1 << (self::LEADING - 705)) | (1 << (self::LEFT - 705)) | (1 << (self::LENGTH2 - 705)) | (1 << (self::LENGTH4 - 705)) | (1 << (self::LENGTHB - 705)) | (1 << (self::LENGTHC - 705)) | (1 << (self::LENGTH - 705)) | (1 << (self::LESS - 705)) | (1 << (self::LEVEL - 705)) | (1 << (self::LEVELS - 705)) | (1 << (self::LIBRARY - 705)) | (1 << (self::LIFECYCLE - 705)) | (1 << (self::LIFE - 705)) | (1 << (self::LIFETIME - 705)) | (1 << (self::LIKE2 - 705)) | (1 << (self::LIKE4 - 705)) | (1 << (self::LIKEC - 705)) | (1 << (self::LIKE_EXPAND - 705)) | (1 << (self::LIMIT - 705)) | (1 << (self::LINEAR - 705)) | (1 << (self::LINK - 705)) | (1 << (self::LIST - 705)) | (1 << (self::LN - 705)) | (1 << (self::LNNVL - 705)) | (1 << (self::LOAD - 705)) | (1 << (self::LOB - 705)) | (1 << (self::LOBNVL - 705)) | (1 << (self::LOBS - 705)) | (1 << (self::LOCAL_INDEXES - 705)))) !== 0) || (((($_la - 769)) & ~0x3f) === 0 && ((1 << ($_la - 769)) & ((1 << (self::LOCAL - 769)) | (1 << (self::LOCALTIME - 769)) | (1 << (self::LOCALTIMESTAMP - 769)) | (1 << (self::LOCATION - 769)) | (1 << (self::LOCATOR - 769)) | (1 << (self::LOCKED - 769)) | (1 << (self::LOCKING - 769)) | (1 << (self::LOGFILE - 769)) | (1 << (self::LOGFILES - 769)) | (1 << (self::LOGGING - 769)) | (1 << (self::LOGICAL - 769)) | (1 << (self::LOGICAL_READS_PER_CALL - 769)) | (1 << (self::LOGICAL_READS_PER_SESSION - 769)) | (1 << (self::LOG - 769)) | (1 << (self::LOGMINING - 769)) | (1 << (self::LOGOFF - 769)) | (1 << (self::LOGON - 769)) | (1 << (self::LOG_READ_ONLY_VIOLATIONS - 769)) | (1 << (self::LONG - 769)) | (1 << (self::LOOP - 769)) | (1 << (self::LOWER - 769)) | (1 << (self::LOW - 769)) | (1 << (self::LPAD - 769)) | (1 << (self::LTRIM - 769)) | (1 << (self::MAIN - 769)) | (1 << (self::MAKE_REF - 769)) | (1 << (self::MANAGED - 769)) | (1 << (self::MANAGE - 769)) | (1 << (self::MANAGEMENT - 769)) | (1 << (self::MANAGER - 769)) | (1 << (self::MANUAL - 769)) | (1 << (self::MAP - 769)) | (1 << (self::MAPPING - 769)) | (1 << (self::MASTER - 769)) | (1 << (self::MATCHED - 769)) | (1 << (self::MATCHES - 769)) | (1 << (self::MATCH - 769)) | (1 << (self::MATCH_NUMBER - 769)) | (1 << (self::MATCH_RECOGNIZE - 769)) | (1 << (self::MATERIALIZED - 769)) | (1 << (self::MATERIALIZE - 769)) | (1 << (self::MAXARCHLOGS - 769)) | (1 << (self::MAXDATAFILES - 769)) | (1 << (self::MAXEXTENTS - 769)) | (1 << (self::MAXIMIZE - 769)) | (1 << (self::MAXINSTANCES - 769)) | (1 << (self::MAXLOGFILES - 769)) | (1 << (self::MAXLOGHISTORY - 769)) | (1 << (self::MAXLOGMEMBERS - 769)) | (1 << (self::MAX_SHARED_TEMP_SIZE - 769)) | (1 << (self::MAXSIZE - 769)) | (1 << (self::MAXTRANS - 769)) | (1 << (self::MAXVALUE - 769)) | (1 << (self::MEASURE - 769)) | (1 << (self::MEASURES - 769)) | (1 << (self::MEDIUM - 769)) | (1 << (self::MEMBER - 769)) | (1 << (self::MEMCOMPRESS - 769)) | (1 << (self::MEMORY - 769)) | (1 << (self::MERGEACTIONS - 769)) | (1 << (self::MERGE_AJ - 769)) | (1 << (self::MERGE_CONST_ON - 769)) | (1 << (self::MERGE - 769)))) !== 0) || (((($_la - 833)) & ~0x3f) === 0 && ((1 << ($_la - 833)) & ((1 << (self::MERGE_SJ - 833)) | (1 << (self::METADATA - 833)) | (1 << (self::METHOD - 833)) | (1 << (self::MIGRATE - 833)) | (1 << (self::MIGRATION - 833)) | (1 << (self::MINEXTENTS - 833)) | (1 << (self::MINIMIZE - 833)) | (1 << (self::MINIMUM - 833)) | (1 << (self::MINING - 833)) | (1 << (self::MINUS_NULL - 833)) | (1 << (self::MINUTE - 833)) | (1 << (self::MINVALUE - 833)) | (1 << (self::MIRRORCOLD - 833)) | (1 << (self::MIRRORHOT - 833)) | (1 << (self::MIRROR - 833)) | (1 << (self::MLSLABEL - 833)) | (1 << (self::MODEL_COMPILE_SUBQUERY - 833)) | (1 << (self::MODEL_DONTVERIFY_UNIQUENESS - 833)) | (1 << (self::MODEL_DYNAMIC_SUBQUERY - 833)) | (1 << (self::MODEL_MIN_ANALYSIS - 833)) | (1 << (self::MODEL - 833)) | (1 << (self::MODEL_NB - 833)) | (1 << (self::MODEL_NO_ANALYSIS - 833)) | (1 << (self::MODEL_PBY - 833)) | (1 << (self::MODEL_PUSH_REF - 833)) | (1 << (self::MODEL_SV - 833)) | (1 << (self::MODIFICATION - 833)) | (1 << (self::MODIFY_COLUMN_TYPE - 833)) | (1 << (self::MODIFY - 833)) | (1 << (self::MOD - 833)) | (1 << (self::MODULE - 833)) | (1 << (self::MONITORING - 833)) | (1 << (self::MONITOR - 833)) | (1 << (self::MONTH - 833)) | (1 << (self::MONTHS_BETWEEN - 833)) | (1 << (self::MONTHS - 833)) | (1 << (self::MOUNT - 833)) | (1 << (self::MOUNTPATH - 833)) | (1 << (self::MOVEMENT - 833)) | (1 << (self::MOVE - 833)) | (1 << (self::MULTIDIMENSIONAL - 833)) | (1 << (self::MULTISET - 833)) | (1 << (self::MV_MERGE - 833)) | (1 << (self::NAMED - 833)) | (1 << (self::NAME - 833)) | (1 << (self::NAMESPACE - 833)) | (1 << (self::NAN - 833)) | (1 << (self::NANVL - 833)) | (1 << (self::NATIONAL - 833)) | (1 << (self::NATIVE_FULL_OUTER_JOIN - 833)) | (1 << (self::NATIVE - 833)) | (1 << (self::NATURAL - 833)) | (1 << (self::NATURALN - 833)) | (1 << (self::NAV - 833)) | (1 << (self::NCHAR_CS - 833)) | (1 << (self::NCHAR - 833)) | (1 << (self::NCHR - 833)) | (1 << (self::NCLOB - 833)) | (1 << (self::NEEDED - 833)) | (1 << (self::NEG - 833)) | (1 << (self::NESTED - 833)) | (1 << (self::NESTED_TABLE_FAST_INSERT - 833)))) !== 0) || (((($_la - 897)) & ~0x3f) === 0 && ((1 << ($_la - 897)) & ((1 << (self::NESTED_TABLE_GET_REFS - 897)) | (1 << (self::NESTED_TABLE_ID - 897)) | (1 << (self::NESTED_TABLE_SET_REFS - 897)) | (1 << (self::NESTED_TABLE_SET_SETID - 897)) | (1 << (self::NETWORK - 897)) | (1 << (self::NEVER - 897)) | (1 << (self::NEW - 897)) | (1 << (self::NEW_TIME - 897)) | (1 << (self::NEXT_DAY - 897)) | (1 << (self::NEXT - 897)) | (1 << (self::NL_AJ - 897)) | (1 << (self::NLJ_BATCHING - 897)) | (1 << (self::NLJ_INDEX_FILTER - 897)) | (1 << (self::NLJ_INDEX_SCAN - 897)) | (1 << (self::NLJ_PREFETCH - 897)) | (1 << (self::NLS_CALENDAR - 897)) | (1 << (self::NLS_CHARACTERSET - 897)) | (1 << (self::NLS_CHARSET_DECL_LEN - 897)) | (1 << (self::NLS_CHARSET_ID - 897)) | (1 << (self::NLS_CHARSET_NAME - 897)) | (1 << (self::NLS_COMP - 897)) | (1 << (self::NLS_CURRENCY - 897)) | (1 << (self::NLS_DATE_FORMAT - 897)) | (1 << (self::NLS_DATE_LANGUAGE - 897)) | (1 << (self::NLS_INITCAP - 897)) | (1 << (self::NLS_ISO_CURRENCY - 897)) | (1 << (self::NL_SJ - 897)) | (1 << (self::NLS_LANG - 897)) | (1 << (self::NLS_LANGUAGE - 897)) | (1 << (self::NLS_LENGTH_SEMANTICS - 897)) | (1 << (self::NLS_LOWER - 897)) | (1 << (self::NLS_NCHAR_CONV_EXCP - 897)) | (1 << (self::NLS_NUMERIC_CHARACTERS - 897)) | (1 << (self::NLS_SORT - 897)) | (1 << (self::NLSSORT - 897)) | (1 << (self::NLS_SPECIAL_CHARS - 897)) | (1 << (self::NLS_TERRITORY - 897)) | (1 << (self::NLS_UPPER - 897)) | (1 << (self::NO_ACCESS - 897)) | (1 << (self::NO_ADAPTIVE_PLAN - 897)) | (1 << (self::NO_ANSI_REARCH - 897)) | (1 << (self::NOAPPEND - 897)) | (1 << (self::NOARCHIVELOG - 897)) | (1 << (self::NOAUDIT - 897)) | (1 << (self::NO_AUTO_REOPTIMIZE - 897)) | (1 << (self::NO_BASETABLE_MULTIMV_REWRITE - 897)) | (1 << (self::NO_BATCH_TABLE_ACCESS_BY_ROWID - 897)) | (1 << (self::NO_BIND_AWARE - 897)) | (1 << (self::NO_BUFFER - 897)) | (1 << (self::NOCACHE - 897)) | (1 << (self::NO_CARTESIAN - 897)) | (1 << (self::NO_CHECK_ACL_REWRITE - 897)) | (1 << (self::NO_CLUSTER_BY_ROWID - 897)) | (1 << (self::NO_CLUSTERING - 897)) | (1 << (self::NO_COALESCE_SQ - 897)) | (1 << (self::NO_COMMON_DATA - 897)) | (1 << (self::NO_CONNECT_BY_CB_WHR_ONLY - 897)) | (1 << (self::NO_CONNECT_BY_COMBINE_SW - 897)) | (1 << (self::NO_CONNECT_BY_COST_BASED - 897)) | (1 << (self::NO_CONNECT_BY_ELIM_DUPS - 897)) | (1 << (self::NO_CONNECT_BY_FILTERING - 897)) | (1 << (self::NOCOPY - 897)) | (1 << (self::NO_COST_XML_QUERY_REWRITE - 897)))) !== 0) || (((($_la - 961)) & ~0x3f) === 0 && ((1 << ($_la - 961)) & ((1 << (self::NO_CPU_COSTING - 961)) | (1 << (self::NOCPU_COSTING - 961)) | (1 << (self::NOCYCLE - 961)) | (1 << (self::NO_DATA_SECURITY_REWRITE - 961)) | (1 << (self::NO_DECORRELATE - 961)) | (1 << (self::NODELAY - 961)) | (1 << (self::NO_DOMAIN_INDEX_FILTER - 961)) | (1 << (self::NO_DST_UPGRADE_INSERT_CONV - 961)) | (1 << (self::NO_ELIM_GROUPBY - 961)) | (1 << (self::NO_ELIMINATE_JOIN - 961)) | (1 << (self::NO_ELIMINATE_OBY - 961)) | (1 << (self::NO_ELIMINATE_OUTER_JOIN - 961)) | (1 << (self::NOENTITYESCAPING - 961)) | (1 << (self::NO_EXPAND_GSET_TO_UNION - 961)) | (1 << (self::NO_EXPAND - 961)) | (1 << (self::NO_EXPAND_TABLE - 961)) | (1 << (self::NO_FACT - 961)) | (1 << (self::NO_FACTORIZE_JOIN - 961)) | (1 << (self::NO_FILTERING - 961)) | (1 << (self::NOFORCE - 961)) | (1 << (self::NO_FULL_OUTER_JOIN_TO_OUTER - 961)) | (1 << (self::NO_GATHER_OPTIMIZER_STATISTICS - 961)) | (1 << (self::NO_GBY_PUSHDOWN - 961)) | (1 << (self::NOGUARANTEE - 961)) | (1 << (self::NO_INDEX_FFS - 961)) | (1 << (self::NO_INDEX - 961)) | (1 << (self::NO_INDEX_SS - 961)) | (1 << (self::NO_INMEMORY - 961)) | (1 << (self::NO_INMEMORY_PRUNING - 961)) | (1 << (self::NOKEEP - 961)) | (1 << (self::NO_LOAD - 961)) | (1 << (self::NOLOCAL - 961)) | (1 << (self::NOLOGGING - 961)) | (1 << (self::NOMAPPING - 961)) | (1 << (self::NOMAXVALUE - 961)) | (1 << (self::NO_MERGE - 961)) | (1 << (self::NOMINIMIZE - 961)) | (1 << (self::NOMINVALUE - 961)) | (1 << (self::NO_MODEL_PUSH_REF - 961)) | (1 << (self::NO_MONITORING - 961)) | (1 << (self::NOMONITORING - 961)) | (1 << (self::NO_MONITOR - 961)) | (1 << (self::NO_MULTIMV_REWRITE - 961)) | (1 << (self::NO_NATIVE_FULL_OUTER_JOIN - 961)) | (1 << (self::NONBLOCKING - 961)) | (1 << (self::NONEDITIONABLE - 961)) | (1 << (self::NONE - 961)) | (1 << (self::NO_NLJ_BATCHING - 961)) | (1 << (self::NO_NLJ_PREFETCH - 961)) | (1 << (self::NO - 961)) | (1 << (self::NONSCHEMA - 961)) | (1 << (self::NO_OBJECT_LINK - 961)) | (1 << (self::NOORDER - 961)) | (1 << (self::NO_ORDER_ROLLUPS - 961)) | (1 << (self::NO_OUTER_JOIN_TO_ANTI - 961)) | (1 << (self::NO_OUTER_JOIN_TO_INNER - 961)) | (1 << (self::NOOVERRIDE - 961)) | (1 << (self::NO_PARALLEL_INDEX - 961)) | (1 << (self::NOPARALLEL_INDEX - 961)) | (1 << (self::NO_PARALLEL - 961)) | (1 << (self::NOPARALLEL - 961)) | (1 << (self::NO_PARTIAL_COMMIT - 961)) | (1 << (self::NO_PARTIAL_JOIN - 961)) | (1 << (self::NO_PARTIAL_ROLLUP_PUSHDOWN - 961)))) !== 0) || (((($_la - 1025)) & ~0x3f) === 0 && ((1 << ($_la - 1025)) & ((1 << (self::NOPARTITION - 1025)) | (1 << (self::NO_PLACE_DISTINCT - 1025)) | (1 << (self::NO_PLACE_GROUP_BY - 1025)) | (1 << (self::NO_PQ_CONCURRENT_UNION - 1025)) | (1 << (self::NO_PQ_MAP - 1025)) | (1 << (self::NO_PQ_REPLICATE - 1025)) | (1 << (self::NO_PQ_SKEW - 1025)) | (1 << (self::NO_PRUNE_GSETS - 1025)) | (1 << (self::NO_PULL_PRED - 1025)) | (1 << (self::NO_PUSH_PRED - 1025)) | (1 << (self::NO_PUSH_SUBQ - 1025)) | (1 << (self::NO_PX_FAULT_TOLERANCE - 1025)) | (1 << (self::NO_PX_JOIN_FILTER - 1025)) | (1 << (self::NO_QKN_BUFF - 1025)) | (1 << (self::NO_QUERY_TRANSFORMATION - 1025)) | (1 << (self::NO_REF_CASCADE - 1025)) | (1 << (self::NORELOCATE - 1025)) | (1 << (self::NORELY - 1025)) | (1 << (self::NOREPAIR - 1025)) | (1 << (self::NOREPLAY - 1025)) | (1 << (self::NORESETLOGS - 1025)) | (1 << (self::NO_RESULT_CACHE - 1025)) | (1 << (self::NOREVERSE - 1025)) | (1 << (self::NO_REWRITE - 1025)) | (1 << (self::NOREWRITE - 1025)) | (1 << (self::NORMAL - 1025)) | (1 << (self::NO_ROOT_SW_FOR_LOCAL - 1025)) | (1 << (self::NOROWDEPENDENCIES - 1025)) | (1 << (self::NOSCHEMACHECK - 1025)) | (1 << (self::NOSEGMENT - 1025)) | (1 << (self::NO_SEMIJOIN - 1025)) | (1 << (self::NO_SEMI_TO_INNER - 1025)) | (1 << (self::NO_SET_TO_JOIN - 1025)) | (1 << (self::NOSORT - 1025)) | (1 << (self::NO_SQL_TRANSLATION - 1025)) | (1 << (self::NO_SQL_TUNE - 1025)) | (1 << (self::NO_STAR_TRANSFORMATION - 1025)) | (1 << (self::NO_STATEMENT_QUEUING - 1025)) | (1 << (self::NO_STATS_GSETS - 1025)) | (1 << (self::NOSTRICT - 1025)) | (1 << (self::NO_SUBQUERY_PRUNING - 1025)) | (1 << (self::NO_SUBSTRB_PAD - 1025)) | (1 << (self::NO_SWAP_JOIN_INPUTS - 1025)) | (1 << (self::NOSWITCH - 1025)) | (1 << (self::NO_TABLE_LOOKUP_BY_NL - 1025)) | (1 << (self::NO_TEMP_TABLE - 1025)) | (1 << (self::NOTHING - 1025)) | (1 << (self::NOTIFICATION - 1025)) | (1 << (self::NO_TRANSFORM_DISTINCT_AGG - 1025)) | (1 << (self::NO_UNNEST - 1025)) | (1 << (self::NO_USE_CUBE - 1025)) | (1 << (self::NO_USE_HASH_AGGREGATION - 1025)) | (1 << (self::NO_USE_HASH_GBY_FOR_PUSHDOWN - 1025)) | (1 << (self::NO_USE_HASH - 1025)) | (1 << (self::NO_USE_INVISIBLE_INDEXES - 1025)) | (1 << (self::NO_USE_MERGE - 1025)) | (1 << (self::NO_USE_NL - 1025)) | (1 << (self::NO_USE_VECTOR_AGGREGATION - 1025)) | (1 << (self::NOVALIDATE - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_DIMS - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_FACT - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM - 1025)))) !== 0) || (((($_la - 1089)) & ~0x3f) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::NO_XDB_FASTPATH_INSERT - 1089)) | (1 << (self::NO_XML_DML_REWRITE - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE_IN_SELECT - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE - 1089)) | (1 << (self::NO_XML_QUERY_REWRITE - 1089)) | (1 << (self::NO_ZONEMAP - 1089)) | (1 << (self::NTH_VALUE - 1089)) | (1 << (self::NULLIF - 1089)) | (1 << (self::NULLS - 1089)) | (1 << (self::NUMBER - 1089)) | (1 << (self::NUMERIC - 1089)) | (1 << (self::NUM_INDEX_KEYS - 1089)) | (1 << (self::NUMTODSINTERVAL - 1089)) | (1 << (self::NUMTOYMINTERVAL - 1089)) | (1 << (self::NVARCHAR2 - 1089)) | (1 << (self::NVL2 - 1089)) | (1 << (self::OBJECT2XML - 1089)) | (1 << (self::OBJECT - 1089)) | (1 << (self::OBJ_ID - 1089)) | (1 << (self::OBJNO - 1089)) | (1 << (self::OBJNO_REUSE - 1089)) | (1 << (self::OCCURENCES - 1089)) | (1 << (self::OFFLINE - 1089)) | (1 << (self::OFF - 1089)) | (1 << (self::OFFSET - 1089)) | (1 << (self::OIDINDEX - 1089)) | (1 << (self::OID - 1089)) | (1 << (self::OLAP - 1089)) | (1 << (self::OLD - 1089)) | (1 << (self::OLD_PUSH_PRED - 1089)) | (1 << (self::OLS - 1089)) | (1 << (self::OLTP - 1089)) | (1 << (self::OMIT - 1089)) | (1 << (self::ONE - 1089)) | (1 << (self::ONLINE - 1089)) | (1 << (self::ONLY - 1089)) | (1 << (self::OPAQUE - 1089)) | (1 << (self::OPAQUE_TRANSFORM - 1089)) | (1 << (self::OPAQUE_XCANONICAL - 1089)) | (1 << (self::OPCODE - 1089)) | (1 << (self::OPEN - 1089)) | (1 << (self::OPERATIONS - 1089)) | (1 << (self::OPERATOR - 1089)) | (1 << (self::OPT_ESTIMATE - 1089)) | (1 << (self::OPTIMAL - 1089)) | (1 << (self::OPTIMIZE - 1089)) | (1 << (self::OPTIMIZER_FEATURES_ENABLE - 1089)) | (1 << (self::OPTIMIZER_GOAL - 1089)) | (1 << (self::OPT_PARAM - 1089)) | (1 << (self::ORA_BRANCH - 1089)) | (1 << (self::ORA_CHECK_ACL - 1089)) | (1 << (self::ORA_CHECK_PRIVILEGE - 1089)) | (1 << (self::ORA_CLUSTERING - 1089)) | (1 << (self::ORADATA - 1089)) | (1 << (self::ORADEBUG - 1089)) | (1 << (self::ORA_DST_AFFECTED - 1089)) | (1 << (self::ORA_DST_CONVERT - 1089)) | (1 << (self::ORA_DST_ERROR - 1089)) | (1 << (self::ORA_GET_ACLIDS - 1089)))) !== 0) || (((($_la - 1153)) & ~0x3f) === 0 && ((1 << ($_la - 1153)) & ((1 << (self::ORA_GET_PRIVILEGES - 1153)) | (1 << (self::ORA_HASH - 1153)) | (1 << (self::ORA_INVOKING_USERID - 1153)) | (1 << (self::ORA_INVOKING_USER - 1153)) | (1 << (self::ORA_INVOKING_XS_USER_GUID - 1153)) | (1 << (self::ORA_INVOKING_XS_USER - 1153)) | (1 << (self::ORA_RAWCOMPARE - 1153)) | (1 << (self::ORA_RAWCONCAT - 1153)) | (1 << (self::ORA_ROWSCN - 1153)) | (1 << (self::ORA_ROWSCN_RAW - 1153)) | (1 << (self::ORA_ROWVERSION - 1153)) | (1 << (self::ORA_TABVERSION - 1153)) | (1 << (self::ORA_WRITE_TIME - 1153)) | (1 << (self::ORDERED - 1153)) | (1 << (self::ORDERED_PREDICATES - 1153)) | (1 << (self::ORDINALITY - 1153)) | (1 << (self::OR_EXPAND - 1153)) | (1 << (self::ORGANIZATION - 1153)) | (1 << (self::OR_PREDICATES - 1153)) | (1 << (self::OSERROR - 1153)) | (1 << (self::OTHER - 1153)) | (1 << (self::OUTER_JOIN_TO_ANTI - 1153)) | (1 << (self::OUTER_JOIN_TO_INNER - 1153)) | (1 << (self::OUTER - 1153)) | (1 << (self::OUTLINE_LEAF - 1153)) | (1 << (self::OUTLINE - 1153)) | (1 << (self::OUT_OF_LINE - 1153)) | (1 << (self::OUT - 1153)) | (1 << (self::OVERFLOW_NOMOVE - 1153)) | (1 << (self::OVERFLOW - 1153)) | (1 << (self::OVERLAPS - 1153)) | (1 << (self::OVER - 1153)) | (1 << (self::OVERRIDING - 1153)) | (1 << (self::OWNER - 1153)) | (1 << (self::OWNERSHIP - 1153)) | (1 << (self::OWN - 1153)) | (1 << (self::PACKAGE - 1153)) | (1 << (self::PACKAGES - 1153)) | (1 << (self::PARALLEL_ENABLE - 1153)) | (1 << (self::PARALLEL_INDEX - 1153)) | (1 << (self::PARALLEL - 1153)) | (1 << (self::PARAMETERS - 1153)) | (1 << (self::PARAM - 1153)) | (1 << (self::PARENT - 1153)) | (1 << (self::PARITY - 1153)) | (1 << (self::PARTIAL_JOIN - 1153)) | (1 << (self::PARTIALLY - 1153)) | (1 << (self::PARTIAL - 1153)) | (1 << (self::PARTIAL_ROLLUP_PUSHDOWN - 1153)) | (1 << (self::PARTITION_HASH - 1153)) | (1 << (self::PARTITION_LIST - 1153)) | (1 << (self::PARTITION - 1153)) | (1 << (self::PARTITION_RANGE - 1153)) | (1 << (self::PARTITIONS - 1153)) | (1 << (self::PARTNUMINST - 1153)) | (1 << (self::PASSING - 1153)) | (1 << (self::PASSWORD_GRACE_TIME - 1153)) | (1 << (self::PASSWORD_LIFE_TIME - 1153)) | (1 << (self::PASSWORD_LOCK_TIME - 1153)) | (1 << (self::PASSWORD - 1153)) | (1 << (self::PASSWORD_REUSE_MAX - 1153)))) !== 0) || (((($_la - 1217)) & ~0x3f) === 0 && ((1 << ($_la - 1217)) & ((1 << (self::PASSWORD_REUSE_TIME - 1217)) | (1 << (self::PASSWORD_VERIFY_FUNCTION - 1217)) | (1 << (self::PAST - 1217)) | (1 << (self::PATCH - 1217)) | (1 << (self::PATH - 1217)) | (1 << (self::PATH_PREFIX - 1217)) | (1 << (self::PATHS - 1217)) | (1 << (self::PATTERN - 1217)) | (1 << (self::PBL_HS_BEGIN - 1217)) | (1 << (self::PBL_HS_END - 1217)) | (1 << (self::PCTINCREASE - 1217)) | (1 << (self::PCTTHRESHOLD - 1217)) | (1 << (self::PCTUSED - 1217)) | (1 << (self::PCTVERSION - 1217)) | (1 << (self::PENDING - 1217)) | (1 << (self::PERCENT_KEYWORD - 1217)) | (1 << (self::PERCENT_RANKM - 1217)) | (1 << (self::PERFORMANCE - 1217)) | (1 << (self::PERIOD_KEYWORD - 1217)) | (1 << (self::PERMANENT - 1217)) | (1 << (self::PERMISSION - 1217)) | (1 << (self::PERMUTE - 1217)) | (1 << (self::PER - 1217)) | (1 << (self::PFILE - 1217)) | (1 << (self::PHYSICAL - 1217)) | (1 << (self::PIKEY - 1217)) | (1 << (self::PIPELINED - 1217)) | (1 << (self::PIV_GB - 1217)) | (1 << (self::PIVOT - 1217)) | (1 << (self::PIV_SSF - 1217)) | (1 << (self::PLACE_DISTINCT - 1217)) | (1 << (self::PLACE_GROUP_BY - 1217)) | (1 << (self::PLAN - 1217)) | (1 << (self::PLSCOPE_SETTINGS - 1217)) | (1 << (self::PLS_INTEGER - 1217)) | (1 << (self::PLSQL_CCFLAGS - 1217)) | (1 << (self::PLSQL_CODE_TYPE - 1217)) | (1 << (self::PLSQL_DEBUG - 1217)) | (1 << (self::PLSQL_OPTIMIZE_LEVEL - 1217)) | (1 << (self::PLSQL_WARNINGS - 1217)) | (1 << (self::PLUGGABLE - 1217)) | (1 << (self::POINT - 1217)) | (1 << (self::POLICY - 1217)) | (1 << (self::POOL_16K - 1217)) | (1 << (self::POOL_2K - 1217)) | (1 << (self::POOL_32K - 1217)) | (1 << (self::POOL_4K - 1217)) | (1 << (self::POOL_8K - 1217)) | (1 << (self::POSITIVEN - 1217)) | (1 << (self::POSITIVE - 1217)) | (1 << (self::POST_TRANSACTION - 1217)) | (1 << (self::POWERMULTISET_BY_CARDINALITY - 1217)) | (1 << (self::POWERMULTISET - 1217)) | (1 << (self::POWER - 1217)) | (1 << (self::PQ_CONCURRENT_UNION - 1217)) | (1 << (self::PQ_DISTRIBUTE - 1217)))) !== 0) || (((($_la - 1281)) & ~0x3f) === 0 && ((1 << ($_la - 1281)) & ((1 << (self::PQ_DISTRIBUTE_WINDOW - 1281)) | (1 << (self::PQ_FILTER - 1281)) | (1 << (self::PQ_MAP - 1281)) | (1 << (self::PQ_NOMAP - 1281)) | (1 << (self::PQ_REPLICATE - 1281)) | (1 << (self::PQ_SKEW - 1281)) | (1 << (self::PRAGMA - 1281)) | (1 << (self::PREBUILT - 1281)) | (1 << (self::PRECEDES - 1281)) | (1 << (self::PRECEDING - 1281)) | (1 << (self::PRECISION - 1281)) | (1 << (self::PRECOMPUTE_SUBQUERY - 1281)) | (1 << (self::PREDICATE_REORDERS - 1281)) | (1 << (self::PRELOAD - 1281)) | (1 << (self::PREPARE - 1281)) | (1 << (self::PRESENTNNV - 1281)) | (1 << (self::PRESENT - 1281)) | (1 << (self::PRESENTV - 1281)) | (1 << (self::PRESERVE_OID - 1281)) | (1 << (self::PRESERVE - 1281)) | (1 << (self::PRETTY - 1281)) | (1 << (self::PREVIOUS - 1281)) | (1 << (self::PREV - 1281)) | (1 << (self::PRIMARY - 1281)) | (1 << (self::PRINTBLOBTOCLOB - 1281)) | (1 << (self::PRIORITY - 1281)) | (1 << (self::PRIVATE - 1281)) | (1 << (self::PRIVATE_SGA - 1281)) | (1 << (self::PRIVILEGED - 1281)) | (1 << (self::PRIVILEGE - 1281)) | (1 << (self::PRIVILEGES - 1281)) | (1 << (self::PROCEDURAL - 1281)) | (1 << (self::PROCEDURE - 1281)) | (1 << (self::PROCESS - 1281)) | (1 << (self::PROFILE - 1281)) | (1 << (self::PROGRAM - 1281)) | (1 << (self::PROJECT - 1281)) | (1 << (self::PROPAGATE - 1281)) | (1 << (self::PROTECTED - 1281)) | (1 << (self::PROTECTION - 1281)) | (1 << (self::PROXY - 1281)) | (1 << (self::PRUNING - 1281)) | (1 << (self::PULL_PRED - 1281)) | (1 << (self::PURGE - 1281)) | (1 << (self::PUSH_PRED - 1281)) | (1 << (self::PUSH_SUBQ - 1281)) | (1 << (self::PX_FAULT_TOLERANCE - 1281)) | (1 << (self::PX_GRANULE - 1281)) | (1 << (self::PX_JOIN_FILTER - 1281)) | (1 << (self::QB_NAME - 1281)) | (1 << (self::QUERY_BLOCK - 1281)) | (1 << (self::QUERY - 1281)) | (1 << (self::QUEUE_CURR - 1281)) | (1 << (self::QUEUE - 1281)) | (1 << (self::QUEUE_ROWP - 1281)) | (1 << (self::QUIESCE - 1281)) | (1 << (self::QUORUM - 1281)) | (1 << (self::QUOTA - 1281)) | (1 << (self::RAISE - 1281)) | (1 << (self::RANDOM_LOCAL - 1281)) | (1 << (self::RANDOM - 1281)) | (1 << (self::RANGE - 1281)))) !== 0) || (((($_la - 1345)) & ~0x3f) === 0 && ((1 << ($_la - 1345)) & ((1 << (self::RANKM - 1345)) | (1 << (self::RAPIDLY - 1345)) | (1 << (self::RAW - 1345)) | (1 << (self::RAWTOHEX - 1345)) | (1 << (self::RAWTONHEX - 1345)) | (1 << (self::RBA - 1345)) | (1 << (self::RBO_OUTLINE - 1345)) | (1 << (self::RDBA - 1345)) | (1 << (self::READ - 1345)) | (1 << (self::READS - 1345)) | (1 << (self::REALM - 1345)) | (1 << (self::REAL - 1345)) | (1 << (self::REBALANCE - 1345)) | (1 << (self::REBUILD - 1345)) | (1 << (self::RECORD - 1345)) | (1 << (self::RECORDS_PER_BLOCK - 1345)) | (1 << (self::RECOVERABLE - 1345)) | (1 << (self::RECOVER - 1345)) | (1 << (self::RECOVERY - 1345)) | (1 << (self::RECYCLEBIN - 1345)) | (1 << (self::RECYCLE - 1345)) | (1 << (self::REDACTION - 1345)) | (1 << (self::REDEFINE - 1345)) | (1 << (self::REDO - 1345)) | (1 << (self::REDUCED - 1345)) | (1 << (self::REDUNDANCY - 1345)) | (1 << (self::REF_CASCADE_CURSOR - 1345)) | (1 << (self::REFERENCED - 1345)) | (1 << (self::REFERENCE - 1345)) | (1 << (self::REFERENCES - 1345)) | (1 << (self::REFERENCING - 1345)) | (1 << (self::REF - 1345)) | (1 << (self::REFRESH - 1345)) | (1 << (self::REFTOHEX - 1345)) | (1 << (self::REGEXP_COUNT - 1345)) | (1 << (self::REGEXP_INSTR - 1345)) | (1 << (self::REGEXP_LIKE - 1345)) | (1 << (self::REGEXP_REPLACE - 1345)) | (1 << (self::REGEXP_SUBSTR - 1345)) | (1 << (self::REGISTER - 1345)) | (1 << (self::REGR_AVGX - 1345)) | (1 << (self::REGR_AVGY - 1345)) | (1 << (self::REGR_COUNT - 1345)) | (1 << (self::REGR_INTERCEPT - 1345)) | (1 << (self::REGR_R2 - 1345)) | (1 << (self::REGR_SLOPE - 1345)) | (1 << (self::REGR_SXX - 1345)) | (1 << (self::REGR_SXY - 1345)) | (1 << (self::REGR_SYY - 1345)) | (1 << (self::REGULAR - 1345)) | (1 << (self::REJECT - 1345)) | (1 << (self::REKEY - 1345)) | (1 << (self::RELATIONAL - 1345)) | (1 << (self::RELOCATE - 1345)) | (1 << (self::RELY - 1345)) | (1 << (self::REMAINDER - 1345)) | (1 << (self::REMOTE_MAPPED - 1345)) | (1 << (self::REMOVE - 1345)) | (1 << (self::RENAME - 1345)) | (1 << (self::REPAIR - 1345)) | (1 << (self::REPEAT - 1345)) | (1 << (self::REPLACE - 1345)) | (1 << (self::REPLICATION - 1345)))) !== 0) || (((($_la - 1409)) & ~0x3f) === 0 && ((1 << ($_la - 1409)) & ((1 << (self::REQUIRED - 1409)) | (1 << (self::RESETLOGS - 1409)) | (1 << (self::RESET - 1409)) | (1 << (self::RESIZE - 1409)) | (1 << (self::RESOLVE - 1409)) | (1 << (self::RESOLVER - 1409)) | (1 << (self::RESPECT - 1409)) | (1 << (self::RESTART - 1409)) | (1 << (self::RESTORE_AS_INTERVALS - 1409)) | (1 << (self::RESTORE - 1409)) | (1 << (self::RESTRICT_ALL_REF_CONS - 1409)) | (1 << (self::RESTRICTED - 1409)) | (1 << (self::RESTRICT_REFERENCES - 1409)) | (1 << (self::RESTRICT - 1409)) | (1 << (self::RESULT_CACHE - 1409)) | (1 << (self::RESULT - 1409)) | (1 << (self::RESUMABLE - 1409)) | (1 << (self::RESUME - 1409)) | (1 << (self::RETENTION - 1409)) | (1 << (self::RETRY_ON_ROW_CHANGE - 1409)) | (1 << (self::RETURNING - 1409)) | (1 << (self::RETURN - 1409)) | (1 << (self::REUSE - 1409)) | (1 << (self::REVERSE - 1409)) | (1 << (self::REWRITE_OR_ERROR - 1409)) | (1 << (self::REWRITE - 1409)) | (1 << (self::RIGHT - 1409)) | (1 << (self::ROLE - 1409)) | (1 << (self::ROLESET - 1409)) | (1 << (self::ROLES - 1409)) | (1 << (self::ROLLBACK - 1409)) | (1 << (self::ROLLING - 1409)) | (1 << (self::ROLLUP - 1409)) | (1 << (self::ROWDEPENDENCIES - 1409)) | (1 << (self::ROWID_MAPPING_TABLE - 1409)) | (1 << (self::ROWID - 1409)) | (1 << (self::ROWIDTOCHAR - 1409)) | (1 << (self::ROWIDTONCHAR - 1409)) | (1 << (self::ROW_LENGTH - 1409)) | (1 << (self::ROWNUM - 1409)) | (1 << (self::ROW - 1409)) | (1 << (self::ROWS - 1409)) | (1 << (self::RPAD - 1409)) | (1 << (self::RTRIM - 1409)) | (1 << (self::RULE - 1409)) | (1 << (self::RULES - 1409)) | (1 << (self::RUNNING - 1409)) | (1 << (self::SALT - 1409)) | (1 << (self::SAMPLE - 1409)) | (1 << (self::SAVE_AS_INTERVALS - 1409)) | (1 << (self::SAVEPOINT - 1409)) | (1 << (self::SAVE - 1409)) | (1 << (self::SB4 - 1409)) | (1 << (self::SCALE_ROWS - 1409)) | (1 << (self::SCALE - 1409)) | (1 << (self::SCAN_INSTANCES - 1409)) | (1 << (self::SCAN - 1409)) | (1 << (self::SCHEDULER - 1409)) | (1 << (self::SCHEMACHECK - 1409)) | (1 << (self::SCHEMA - 1409)) | (1 << (self::SCN_ASCENDING - 1409)) | (1 << (self::SCN - 1409)))) !== 0) || (((($_la - 1473)) & ~0x3f) === 0 && ((1 << ($_la - 1473)) & ((1 << (self::SCOPE - 1473)) | (1 << (self::SCRUB - 1473)) | (1 << (self::SD_ALL - 1473)) | (1 << (self::SD_INHIBIT - 1473)) | (1 << (self::SDO_GEOM_MBR - 1473)) | (1 << (self::SD_SHOW - 1473)) | (1 << (self::SEARCH - 1473)) | (1 << (self::SECOND - 1473)) | (1 << (self::SECRET - 1473)) | (1 << (self::SECUREFILE_DBA - 1473)) | (1 << (self::SECUREFILE - 1473)) | (1 << (self::SECURITY - 1473)) | (1 << (self::SEED - 1473)) | (1 << (self::SEG_BLOCK - 1473)) | (1 << (self::SEG_FILE - 1473)) | (1 << (self::SEGMENT - 1473)) | (1 << (self::SELECTIVITY - 1473)) | (1 << (self::SELF - 1473)) | (1 << (self::SEMIJOIN_DRIVER - 1473)) | (1 << (self::SEMIJOIN - 1473)) | (1 << (self::SEMI_TO_INNER - 1473)) | (1 << (self::SEQUENCED - 1473)) | (1 << (self::SEQUENCE - 1473)) | (1 << (self::SEQUENTIAL - 1473)) | (1 << (self::SERIALIZABLE - 1473)) | (1 << (self::SERIALLY_REUSABLE - 1473)) | (1 << (self::SERIAL - 1473)) | (1 << (self::SERVERERROR - 1473)) | (1 << (self::SERVICE_NAME_CONVERT - 1473)) | (1 << (self::SERVICES - 1473)) | (1 << (self::SESSION_CACHED_CURSORS - 1473)) | (1 << (self::SESSION - 1473)) | (1 << (self::SESSIONS_PER_USER - 1473)) | (1 << (self::SESSIONTIMEZONE - 1473)) | (1 << (self::SESSIONTZNAME - 1473)) | (1 << (self::SET - 1473)) | (1 << (self::SETS - 1473)) | (1 << (self::SETTINGS - 1473)) | (1 << (self::SET_TO_JOIN - 1473)) | (1 << (self::SEVERE - 1473)) | (1 << (self::SHARED_POOL - 1473)) | (1 << (self::SHARED - 1473)) | (1 << (self::SHARING - 1473)) | (1 << (self::SHELFLIFE - 1473)) | (1 << (self::SHOW - 1473)) | (1 << (self::SHRINK - 1473)) | (1 << (self::SHUTDOWN - 1473)) | (1 << (self::SIBLINGS - 1473)) | (1 << (self::SID - 1473)) | (1 << (self::SIGNAL_COMPONENT - 1473)) | (1 << (self::SIGNAL_FUNCTION - 1473)) | (1 << (self::SIGN - 1473)) | (1 << (self::SIGNTYPE - 1473)) | (1 << (self::SIMPLE_INTEGER - 1473)) | (1 << (self::SIMPLE - 1473)) | (1 << (self::SINGLE - 1473)) | (1 << (self::SINGLETASK - 1473)) | (1 << (self::SINH - 1473)) | (1 << (self::SIN - 1473)) | (1 << (self::SKIP_EXT_OPTIMIZER - 1473)))) !== 0) || (((($_la - 1537)) & ~0x3f) === 0 && ((1 << ($_la - 1537)) & ((1 << (self::SKIP_ - 1537)) | (1 << (self::SKIP_UNQ_UNUSABLE_IDX - 1537)) | (1 << (self::SKIP_UNUSABLE_INDEXES - 1537)) | (1 << (self::SMALLFILE - 1537)) | (1 << (self::SMALLINT - 1537)) | (1 << (self::SNAPSHOT - 1537)) | (1 << (self::SOME - 1537)) | (1 << (self::SORT - 1537)) | (1 << (self::SOUNDEX - 1537)) | (1 << (self::SOURCE_FILE_DIRECTORY - 1537)) | (1 << (self::SOURCE_FILE_NAME_CONVERT - 1537)) | (1 << (self::SOURCE - 1537)) | (1 << (self::SPACE_KEYWORD - 1537)) | (1 << (self::SPECIFICATION - 1537)) | (1 << (self::SPFILE - 1537)) | (1 << (self::SPLIT - 1537)) | (1 << (self::SPREADSHEET - 1537)) | (1 << (self::SQLDATA - 1537)) | (1 << (self::SQLERROR - 1537)) | (1 << (self::SQLLDR - 1537)) | (1 << (self::SQL - 1537)) | (1 << (self::SQL_TRACE - 1537)) | (1 << (self::SQL_TRANSLATION_PROFILE - 1537)) | (1 << (self::SQRT - 1537)) | (1 << (self::STALE - 1537)) | (1 << (self::STANDALONE - 1537)) | (1 << (self::STANDARD_HASH - 1537)) | (1 << (self::STANDBY_MAX_DATA_DELAY - 1537)) | (1 << (self::STANDBYS - 1537)) | (1 << (self::STANDBY - 1537)) | (1 << (self::STAR - 1537)) | (1 << (self::STAR_TRANSFORMATION - 1537)) | (1 << (self::STARTUP - 1537)) | (1 << (self::STATEMENT_ID - 1537)) | (1 << (self::STATEMENT_QUEUING - 1537)) | (1 << (self::STATEMENTS - 1537)) | (1 << (self::STATEMENT - 1537)) | (1 << (self::STATE - 1537)) | (1 << (self::STATIC - 1537)) | (1 << (self::STATISTICS - 1537)) | (1 << (self::STATS_BINOMIAL_TEST - 1537)) | (1 << (self::STATS_CROSSTAB - 1537)) | (1 << (self::STATS_F_TEST - 1537)) | (1 << (self::STATS_KS_TEST - 1537)) | (1 << (self::STATS_MODE - 1537)) | (1 << (self::STATS_MW_TEST - 1537)) | (1 << (self::STATS_ONE_WAY_ANOVA - 1537)) | (1 << (self::STATS_T_TEST_INDEP - 1537)) | (1 << (self::STATS_T_TEST_INDEPU - 1537)) | (1 << (self::STATS_T_TEST_ONE - 1537)) | (1 << (self::STATS_T_TEST_PAIRED - 1537)) | (1 << (self::STATS_WSR_TEST - 1537)) | (1 << (self::STDDEV_POP - 1537)) | (1 << (self::STDDEV_SAMP - 1537)) | (1 << (self::STOP - 1537)) | (1 << (self::STORAGE - 1537)) | (1 << (self::STORE - 1537)) | (1 << (self::STREAMS - 1537)) | (1 << (self::STREAM - 1537)) | (1 << (self::STRICT - 1537)) | (1 << (self::STRING - 1537)) | (1 << (self::STRIPE_COLUMNS - 1537)) | (1 << (self::STRIPE_WIDTH - 1537)))) !== 0) || (((($_la - 1601)) & ~0x3f) === 0 && ((1 << ($_la - 1601)) & ((1 << (self::STRIP - 1601)) | (1 << (self::STRUCTURE - 1601)) | (1 << (self::SUBMULTISET - 1601)) | (1 << (self::SUBPARTITION_REL - 1601)) | (1 << (self::SUBPARTITIONS - 1601)) | (1 << (self::SUBPARTITION - 1601)) | (1 << (self::SUBQUERIES - 1601)) | (1 << (self::SUBQUERY_PRUNING - 1601)) | (1 << (self::SUBSCRIBE - 1601)) | (1 << (self::SUBSET - 1601)) | (1 << (self::SUBSTITUTABLE - 1601)) | (1 << (self::SUBSTR2 - 1601)) | (1 << (self::SUBSTR4 - 1601)) | (1 << (self::SUBSTRB - 1601)) | (1 << (self::SUBSTRC - 1601)) | (1 << (self::SUBTYPE - 1601)) | (1 << (self::SUCCESSFUL - 1601)) | (1 << (self::SUCCESS - 1601)) | (1 << (self::SUMMARY - 1601)) | (1 << (self::SUPPLEMENTAL - 1601)) | (1 << (self::SUSPEND - 1601)) | (1 << (self::SWAP_JOIN_INPUTS - 1601)) | (1 << (self::SWITCHOVER - 1601)) | (1 << (self::SWITCH - 1601)) | (1 << (self::SYNCHRONOUS - 1601)) | (1 << (self::SYNC - 1601)) | (1 << (self::SYSASM - 1601)) | (1 << (self::SYS_AUDIT - 1601)) | (1 << (self::SYSAUX - 1601)) | (1 << (self::SYSBACKUP - 1601)) | (1 << (self::SYS_CHECKACL - 1601)) | (1 << (self::SYS_CHECK_PRIVILEGE - 1601)) | (1 << (self::SYS_CONNECT_BY_PATH - 1601)) | (1 << (self::SYS_CONTEXT - 1601)) | (1 << (self::SYSDATE - 1601)) | (1 << (self::SYSDBA - 1601)) | (1 << (self::SYS_DBURIGEN - 1601)) | (1 << (self::SYSDG - 1601)) | (1 << (self::SYS_DL_CURSOR - 1601)) | (1 << (self::SYS_DM_RXFORM_CHR - 1601)) | (1 << (self::SYS_DM_RXFORM_NUM - 1601)) | (1 << (self::SYS_DOM_COMPARE - 1601)) | (1 << (self::SYS_DST_PRIM2SEC - 1601)) | (1 << (self::SYS_DST_SEC2PRIM - 1601)) | (1 << (self::SYS_ET_BFILE_TO_RAW - 1601)) | (1 << (self::SYS_ET_BLOB_TO_IMAGE - 1601)) | (1 << (self::SYS_ET_IMAGE_TO_BLOB - 1601)) | (1 << (self::SYS_ET_RAW_TO_BFILE - 1601)) | (1 << (self::SYS_EXTPDTXT - 1601)) | (1 << (self::SYS_EXTRACT_UTC - 1601)) | (1 << (self::SYS_FBT_INSDEL - 1601)) | (1 << (self::SYS_FILTER_ACLS - 1601)) | (1 << (self::SYS_FNMATCHES - 1601)) | (1 << (self::SYS_FNREPLACE - 1601)) | (1 << (self::SYS_GET_ACLIDS - 1601)) | (1 << (self::SYS_GET_COL_ACLIDS - 1601)) | (1 << (self::SYS_GET_PRIVILEGES - 1601)) | (1 << (self::SYS_GETTOKENID - 1601)) | (1 << (self::SYS_GETXTIVAL - 1601)) | (1 << (self::SYS_GUID - 1601)) | (1 << (self::SYSGUID - 1601)) | (1 << (self::SYSKM - 1601)) | (1 << (self::SYS_MAKE_XMLNODEID - 1601)))) !== 0) || (((($_la - 1665)) & ~0x3f) === 0 && ((1 << ($_la - 1665)) & ((1 << (self::SYS_MAKEXML - 1665)) | (1 << (self::SYS_MKXMLATTR - 1665)) | (1 << (self::SYS_MKXTI - 1665)) | (1 << (self::SYSOBJ - 1665)) | (1 << (self::SYS_OP_ADT2BIN - 1665)) | (1 << (self::SYS_OP_ADTCONS - 1665)) | (1 << (self::SYS_OP_ALSCRVAL - 1665)) | (1 << (self::SYS_OP_ATG - 1665)) | (1 << (self::SYS_OP_BIN2ADT - 1665)) | (1 << (self::SYS_OP_BITVEC - 1665)) | (1 << (self::SYS_OP_BL2R - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER - 1665)) | (1 << (self::SYS_OP_C2C - 1665)) | (1 << (self::SYS_OP_CAST - 1665)) | (1 << (self::SYS_OP_CEG - 1665)) | (1 << (self::SYS_OP_CL2C - 1665)) | (1 << (self::SYS_OP_COMBINED_HASH - 1665)) | (1 << (self::SYS_OP_COMP - 1665)) | (1 << (self::SYS_OP_CONVERT - 1665)) | (1 << (self::SYS_OP_COUNTCHG - 1665)) | (1 << (self::SYS_OP_CSCONV - 1665)) | (1 << (self::SYS_OP_CSCONVTEST - 1665)) | (1 << (self::SYS_OP_CSR - 1665)) | (1 << (self::SYS_OP_CSX_PATCH - 1665)) | (1 << (self::SYS_OP_CYCLED_SEQ - 1665)) | (1 << (self::SYS_OP_DECOMP - 1665)) | (1 << (self::SYS_OP_DESCEND - 1665)) | (1 << (self::SYS_OP_DISTINCT - 1665)) | (1 << (self::SYS_OP_DRA - 1665)) | (1 << (self::SYS_OP_DUMP - 1665)) | (1 << (self::SYS_OP_DV_CHECK - 1665)) | (1 << (self::SYS_OP_ENFORCE_NOT_NULL - 1665)) | (1 << (self::SYSOPER - 1665)) | (1 << (self::SYS_OP_EXTRACT - 1665)) | (1 << (self::SYS_OP_GROUPING - 1665)) | (1 << (self::SYS_OP_GUID - 1665)) | (1 << (self::SYS_OP_HASH - 1665)) | (1 << (self::SYS_OP_IIX - 1665)) | (1 << (self::SYS_OP_ITR - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_CREATE - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_SUCCEEDED - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_USE - 1665)) | (1 << (self::SYS_OP_LBID - 1665)) | (1 << (self::SYS_OP_LOBLOC2BLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2CLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2ID - 1665)) | (1 << (self::SYS_OP_LOBLOC2NCLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2TYP - 1665)) | (1 << (self::SYS_OP_LSVI - 1665)) | (1 << (self::SYS_OP_LVL - 1665)) | (1 << (self::SYS_OP_MAKEOID - 1665)) | (1 << (self::SYS_OP_MAP_NONNULL - 1665)) | (1 << (self::SYS_OP_MSR - 1665)) | (1 << (self::SYS_OP_NICOMBINE - 1665)) | (1 << (self::SYS_OP_NIEXTRACT - 1665)) | (1 << (self::SYS_OP_NII - 1665)) | (1 << (self::SYS_OP_NIX - 1665)) | (1 << (self::SYS_OP_NOEXPAND - 1665)) | (1 << (self::SYS_OP_NTCIMG - 1665)) | (1 << (self::SYS_OP_NUMTORAW - 1665)) | (1 << (self::SYS_OP_OIDVALUE - 1665)))) !== 0) || (((($_la - 1729)) & ~0x3f) === 0 && ((1 << ($_la - 1729)) & ((1 << (self::SYS_OP_OPNSIZE - 1729)) | (1 << (self::SYS_OP_PAR_1 - 1729)) | (1 << (self::SYS_OP_PARGID_1 - 1729)) | (1 << (self::SYS_OP_PARGID - 1729)) | (1 << (self::SYS_OP_PAR - 1729)) | (1 << (self::SYS_OP_PART_ID - 1729)) | (1 << (self::SYS_OP_PIVOT - 1729)) | (1 << (self::SYS_OP_R2O - 1729)) | (1 << (self::SYS_OP_RAWTONUM - 1729)) | (1 << (self::SYS_OP_RDTM - 1729)) | (1 << (self::SYS_OP_REF - 1729)) | (1 << (self::SYS_OP_RMTD - 1729)) | (1 << (self::SYS_OP_ROWIDTOOBJ - 1729)) | (1 << (self::SYS_OP_RPB - 1729)) | (1 << (self::SYS_OPTLOBPRBSC - 1729)) | (1 << (self::SYS_OP_TOSETID - 1729)) | (1 << (self::SYS_OP_TPR - 1729)) | (1 << (self::SYS_OP_TRTB - 1729)) | (1 << (self::SYS_OPTXICMP - 1729)) | (1 << (self::SYS_OPTXQCASTASNQ - 1729)) | (1 << (self::SYS_OP_UNDESCEND - 1729)) | (1 << (self::SYS_OP_VECAND - 1729)) | (1 << (self::SYS_OP_VECBIT - 1729)) | (1 << (self::SYS_OP_VECOR - 1729)) | (1 << (self::SYS_OP_VECXOR - 1729)) | (1 << (self::SYS_OP_VERSION - 1729)) | (1 << (self::SYS_OP_VREF - 1729)) | (1 << (self::SYS_OP_VVD - 1729)) | (1 << (self::SYS_OP_XMLCONS_FOR_CSX - 1729)) | (1 << (self::SYS_OP_XPTHATG - 1729)) | (1 << (self::SYS_OP_XPTHIDX - 1729)) | (1 << (self::SYS_OP_XPTHOP - 1729)) | (1 << (self::SYS_OP_XTXT2SQLT - 1729)) | (1 << (self::SYS_OP_ZONE_ID - 1729)) | (1 << (self::SYS_ORDERKEY_DEPTH - 1729)) | (1 << (self::SYS_ORDERKEY_MAXCHILD - 1729)) | (1 << (self::SYS_ORDERKEY_PARENT - 1729)) | (1 << (self::SYS_PARALLEL_TXN - 1729)) | (1 << (self::SYS_PATHID_IS_ATTR - 1729)) | (1 << (self::SYS_PATHID_IS_NMSPC - 1729)) | (1 << (self::SYS_PATHID_LASTNAME - 1729)) | (1 << (self::SYS_PATHID_LASTNMSPC - 1729)) | (1 << (self::SYS_PATH_REVERSE - 1729)) | (1 << (self::SYS_PXQEXTRACT - 1729)) | (1 << (self::SYS_RAW_TO_XSID - 1729)) | (1 << (self::SYS_RID_ORDER - 1729)) | (1 << (self::SYS_ROW_DELTA - 1729)) | (1 << (self::SYS_SC_2_XMLT - 1729)) | (1 << (self::SYS_SYNRCIREDO - 1729)) | (1 << (self::SYSTEM_DEFINED - 1729)) | (1 << (self::SYSTEM - 1729)) | (1 << (self::SYSTIMESTAMP - 1729)) | (1 << (self::SYS_TYPEID - 1729)) | (1 << (self::SYS_UMAKEXML - 1729)) | (1 << (self::SYS_XMLANALYZE - 1729)) | (1 << (self::SYS_XMLCONTAINS - 1729)) | (1 << (self::SYS_XMLCONV - 1729)) | (1 << (self::SYS_XMLEXNSURI - 1729)) | (1 << (self::SYS_XMLGEN - 1729)) | (1 << (self::SYS_XMLI_LOC_ISNODE - 1729)) | (1 << (self::SYS_XMLI_LOC_ISTEXT - 1729)) | (1 << (self::SYS_XMLINSTR - 1729)) | (1 << (self::SYS_XMLLOCATOR_GETSVAL - 1729)) | (1 << (self::SYS_XMLNODEID_GETCID - 1729)))) !== 0) || (((($_la - 1793)) & ~0x3f) === 0 && ((1 << ($_la - 1793)) & ((1 << (self::SYS_XMLNODEID_GETLOCATOR - 1793)) | (1 << (self::SYS_XMLNODEID_GETOKEY - 1793)) | (1 << (self::SYS_XMLNODEID_GETPATHID - 1793)) | (1 << (self::SYS_XMLNODEID_GETPTRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETSVAL - 1793)) | (1 << (self::SYS_XMLNODEID_GETTID - 1793)) | (1 << (self::SYS_XMLNODEID - 1793)) | (1 << (self::SYS_XMLT_2_SC - 1793)) | (1 << (self::SYS_XMLTRANSLATE - 1793)) | (1 << (self::SYS_XMLTYPE2SQL - 1793)) | (1 << (self::SYS_XQ_ASQLCNV - 1793)) | (1 << (self::SYS_XQ_ATOMCNVCHK - 1793)) | (1 << (self::SYS_XQBASEURI - 1793)) | (1 << (self::SYS_XQCASTABLEERRH - 1793)) | (1 << (self::SYS_XQCODEP2STR - 1793)) | (1 << (self::SYS_XQCODEPEQ - 1793)) | (1 << (self::SYS_XQCON2SEQ - 1793)) | (1 << (self::SYS_XQCONCAT - 1793)) | (1 << (self::SYS_XQDELETE - 1793)) | (1 << (self::SYS_XQDFLTCOLATION - 1793)) | (1 << (self::SYS_XQDOC - 1793)) | (1 << (self::SYS_XQDOCURI - 1793)) | (1 << (self::SYS_XQDURDIV - 1793)) | (1 << (self::SYS_XQED4URI - 1793)) | (1 << (self::SYS_XQENDSWITH - 1793)) | (1 << (self::SYS_XQERRH - 1793)) | (1 << (self::SYS_XQERR - 1793)) | (1 << (self::SYS_XQESHTMLURI - 1793)) | (1 << (self::SYS_XQEXLOBVAL - 1793)) | (1 << (self::SYS_XQEXSTWRP - 1793)) | (1 << (self::SYS_XQEXTRACT - 1793)) | (1 << (self::SYS_XQEXTRREF - 1793)) | (1 << (self::SYS_XQEXVAL - 1793)) | (1 << (self::SYS_XQFB2STR - 1793)) | (1 << (self::SYS_XQFNBOOL - 1793)) | (1 << (self::SYS_XQFNCMP - 1793)) | (1 << (self::SYS_XQFNDATIM - 1793)) | (1 << (self::SYS_XQFNLNAME - 1793)) | (1 << (self::SYS_XQFNNM - 1793)) | (1 << (self::SYS_XQFNNSURI - 1793)) | (1 << (self::SYS_XQFNPREDTRUTH - 1793)) | (1 << (self::SYS_XQFNQNM - 1793)) | (1 << (self::SYS_XQFNROOT - 1793)) | (1 << (self::SYS_XQFORMATNUM - 1793)) | (1 << (self::SYS_XQFTCONTAIN - 1793)) | (1 << (self::SYS_XQFUNCR - 1793)) | (1 << (self::SYS_XQGETCONTENT - 1793)) | (1 << (self::SYS_XQINDXOF - 1793)) | (1 << (self::SYS_XQINSERT - 1793)) | (1 << (self::SYS_XQINSPFX - 1793)) | (1 << (self::SYS_XQIRI2URI - 1793)) | (1 << (self::SYS_XQLANG - 1793)) | (1 << (self::SYS_XQLLNMFRMQNM - 1793)) | (1 << (self::SYS_XQMKNODEREF - 1793)) | (1 << (self::SYS_XQNILLED - 1793)) | (1 << (self::SYS_XQNODENAME - 1793)) | (1 << (self::SYS_XQNORMSPACE - 1793)) | (1 << (self::SYS_XQNORMUCODE - 1793)) | (1 << (self::SYS_XQ_NRNG - 1793)) | (1 << (self::SYS_XQNSP4PFX - 1793)) | (1 << (self::SYS_XQNSPFRMQNM - 1793)) | (1 << (self::SYS_XQPFXFRMQNM - 1793)) | (1 << (self::SYS_XQ_PKSQL2XML - 1793)))) !== 0) || (((($_la - 1857)) & ~0x3f) === 0 && ((1 << ($_la - 1857)) & ((1 << (self::SYS_XQPOLYABS - 1857)) | (1 << (self::SYS_XQPOLYADD - 1857)) | (1 << (self::SYS_XQPOLYCEL - 1857)) | (1 << (self::SYS_XQPOLYCSTBL - 1857)) | (1 << (self::SYS_XQPOLYCST - 1857)) | (1 << (self::SYS_XQPOLYDIV - 1857)) | (1 << (self::SYS_XQPOLYFLR - 1857)) | (1 << (self::SYS_XQPOLYMOD - 1857)) | (1 << (self::SYS_XQPOLYMUL - 1857)) | (1 << (self::SYS_XQPOLYRND - 1857)) | (1 << (self::SYS_XQPOLYSQRT - 1857)) | (1 << (self::SYS_XQPOLYSUB - 1857)) | (1 << (self::SYS_XQPOLYUMUS - 1857)) | (1 << (self::SYS_XQPOLYUPLS - 1857)) | (1 << (self::SYS_XQPOLYVEQ - 1857)) | (1 << (self::SYS_XQPOLYVGE - 1857)) | (1 << (self::SYS_XQPOLYVGT - 1857)) | (1 << (self::SYS_XQPOLYVLE - 1857)) | (1 << (self::SYS_XQPOLYVLT - 1857)) | (1 << (self::SYS_XQPOLYVNE - 1857)) | (1 << (self::SYS_XQREF2VAL - 1857)) | (1 << (self::SYS_XQRENAME - 1857)) | (1 << (self::SYS_XQREPLACE - 1857)) | (1 << (self::SYS_XQRESVURI - 1857)) | (1 << (self::SYS_XQRNDHALF2EVN - 1857)) | (1 << (self::SYS_XQRSLVQNM - 1857)) | (1 << (self::SYS_XQRYENVPGET - 1857)) | (1 << (self::SYS_XQRYVARGET - 1857)) | (1 << (self::SYS_XQRYWRP - 1857)) | (1 << (self::SYS_XQSEQ2CON4XC - 1857)) | (1 << (self::SYS_XQSEQ2CON - 1857)) | (1 << (self::SYS_XQSEQDEEPEQ - 1857)) | (1 << (self::SYS_XQSEQINSB - 1857)) | (1 << (self::SYS_XQSEQRM - 1857)) | (1 << (self::SYS_XQSEQRVS - 1857)) | (1 << (self::SYS_XQSEQSUB - 1857)) | (1 << (self::SYS_XQSEQTYPMATCH - 1857)) | (1 << (self::SYS_XQSTARTSWITH - 1857)) | (1 << (self::SYS_XQSTATBURI - 1857)) | (1 << (self::SYS_XQSTR2CODEP - 1857)) | (1 << (self::SYS_XQSTRJOIN - 1857)) | (1 << (self::SYS_XQSUBSTRAFT - 1857)) | (1 << (self::SYS_XQSUBSTRBEF - 1857)) | (1 << (self::SYS_XQTOKENIZE - 1857)) | (1 << (self::SYS_XQTREATAS - 1857)) | (1 << (self::SYS_XQ_UPKXML2SQL - 1857)) | (1 << (self::SYS_XQXFORM - 1857)) | (1 << (self::SYS_XSID_TO_RAW - 1857)) | (1 << (self::SYS_ZMAP_FILTER - 1857)) | (1 << (self::SYS_ZMAP_REFRESH - 1857)) | (1 << (self::TABLE_LOOKUP_BY_NL - 1857)) | (1 << (self::TABLESPACE_NO - 1857)) | (1 << (self::TABLESPACE - 1857)) | (1 << (self::TABLES - 1857)) | (1 << (self::TABLE_STATS - 1857)) | (1 << (self::TABLE - 1857)) | (1 << (self::TABNO - 1857)) | (1 << (self::TAG - 1857)) | (1 << (self::TANH - 1857)) | (1 << (self::TAN - 1857)) | (1 << (self::TBLORIDXPARTNUM - 1857)) | (1 << (self::TEMPFILE - 1857)) | (1 << (self::TEMPLATE - 1857)) | (1 << (self::TEMPORARY - 1857)))) !== 0) || (((($_la - 1921)) & ~0x3f) === 0 && ((1 << ($_la - 1921)) & ((1 << (self::TEMP_TABLE - 1921)) | (1 << (self::TEST - 1921)) | (1 << (self::TEXT - 1921)) | (1 << (self::THAN - 1921)) | (1 << (self::THEN - 1921)) | (1 << (self::THE - 1921)) | (1 << (self::THREAD - 1921)) | (1 << (self::THROUGH - 1921)) | (1 << (self::TIER - 1921)) | (1 << (self::TIES - 1921)) | (1 << (self::TIMEOUT - 1921)) | (1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP - 1921)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1921)) | (1 << (self::TIMES - 1921)) | (1 << (self::TIME - 1921)) | (1 << (self::TIMEZONE_ABBR - 1921)) | (1 << (self::TIMEZONE_HOUR - 1921)) | (1 << (self::TIMEZONE_MINUTE - 1921)) | (1 << (self::TIMEZONE_OFFSET - 1921)) | (1 << (self::TIMEZONE_REGION - 1921)) | (1 << (self::TIME_ZONE - 1921)) | (1 << (self::TIV_GB - 1921)) | (1 << (self::TIV_SSF - 1921)) | (1 << (self::TO_ACLID - 1921)) | (1 << (self::TO_BINARY_DOUBLE - 1921)) | (1 << (self::TO_BINARY_FLOAT - 1921)) | (1 << (self::TO_BLOB - 1921)) | (1 << (self::TO_CLOB - 1921)) | (1 << (self::TO_DSINTERVAL - 1921)) | (1 << (self::TO_LOB - 1921)) | (1 << (self::TO_MULTI_BYTE - 1921)) | (1 << (self::TO_NCHAR - 1921)) | (1 << (self::TO_NCLOB - 1921)) | (1 << (self::TO_NUMBER - 1921)) | (1 << (self::TOPLEVEL - 1921)) | (1 << (self::TO_SINGLE_BYTE - 1921)) | (1 << (self::TO_TIMESTAMP - 1921)) | (1 << (self::TO_TIMESTAMP_TZ - 1921)) | (1 << (self::TO_TIME - 1921)) | (1 << (self::TO_TIME_TZ - 1921)) | (1 << (self::TO_YMINTERVAL - 1921)) | (1 << (self::TRACE - 1921)) | (1 << (self::TRACING - 1921)) | (1 << (self::TRACKING - 1921)) | (1 << (self::TRAILING - 1921)) | (1 << (self::TRANSACTION - 1921)) | (1 << (self::TRANSFORM_DISTINCT_AGG - 1921)) | (1 << (self::TRANSITIONAL - 1921)) | (1 << (self::TRANSITION - 1921)) | (1 << (self::TRANSLATE - 1921)) | (1 << (self::TRANSLATION - 1921)) | (1 << (self::TREAT - 1921)) | (1 << (self::TRIGGERS - 1921)) | (1 << (self::TRIGGER - 1921)) | (1 << (self::TRUE - 1921)) | (1 << (self::TRUNCATE - 1921)) | (1 << (self::TRUNC - 1921)) | (1 << (self::TRUSTED - 1921)) | (1 << (self::TRUST - 1921)) | (1 << (self::TUNING - 1921)))) !== 0) || (((($_la - 1985)) & ~0x3f) === 0 && ((1 << ($_la - 1985)) & ((1 << (self::TX - 1985)) | (1 << (self::TYPES - 1985)) | (1 << (self::TYPE - 1985)) | (1 << (self::TZ_OFFSET - 1985)) | (1 << (self::UB2 - 1985)) | (1 << (self::UBA - 1985)) | (1 << (self::UCS2 - 1985)) | (1 << (self::UID - 1985)) | (1 << (self::UNARCHIVED - 1985)) | (1 << (self::UNBOUNDED - 1985)) | (1 << (self::UNBOUND - 1985)) | (1 << (self::UNCONDITIONAL - 1985)) | (1 << (self::UNDER - 1985)) | (1 << (self::UNDO - 1985)) | (1 << (self::UNDROP - 1985)) | (1 << (self::UNIFORM - 1985)) | (1 << (self::UNISTR - 1985)) | (1 << (self::UNLIMITED - 1985)) | (1 << (self::UNLOAD - 1985)) | (1 << (self::UNLOCK - 1985)) | (1 << (self::UNMATCHED - 1985)) | (1 << (self::UNNEST_INNERJ_DISTINCT_VIEW - 1985)) | (1 << (self::UNNEST_NOSEMIJ_NODISTINCTVIEW - 1985)) | (1 << (self::UNNEST_SEMIJ_VIEW - 1985)) | (1 << (self::UNNEST - 1985)) | (1 << (self::UNPACKED - 1985)) | (1 << (self::UNPIVOT - 1985)) | (1 << (self::UNPLUG - 1985)) | (1 << (self::UNPROTECTED - 1985)) | (1 << (self::UNQUIESCE - 1985)) | (1 << (self::UNRECOVERABLE - 1985)) | (1 << (self::UNRESTRICTED - 1985)) | (1 << (self::UNSUBSCRIBE - 1985)) | (1 << (self::UNTIL - 1985)) | (1 << (self::UNUSABLE - 1985)) | (1 << (self::UNUSED - 1985)) | (1 << (self::UPDATABLE - 1985)) | (1 << (self::UPDATED - 1985)) | (1 << (self::UPDATEXML - 1985)) | (1 << (self::UPD_INDEXES - 1985)) | (1 << (self::UPD_JOININDEX - 1985)) | (1 << (self::UPGRADE - 1985)) | (1 << (self::UPPER - 1985)) | (1 << (self::UPSERT - 1985)) | (1 << (self::UROWID - 1985)) | (1 << (self::USABLE - 1985)) | (1 << (self::USAGE - 1985)) | (1 << (self::USE_ANTI - 1985)) | (1 << (self::USE_CONCAT - 1985)) | (1 << (self::USE_CUBE - 1985)) | (1 << (self::USE_HASH_AGGREGATION - 1985)) | (1 << (self::USE_HASH_GBY_FOR_PUSHDOWN - 1985)) | (1 << (self::USE_HASH - 1985)) | (1 << (self::USE_HIDDEN_PARTITIONS - 1985)) | (1 << (self::USE_INVISIBLE_INDEXES - 1985)) | (1 << (self::USE_MERGE_CARTESIAN - 1985)) | (1 << (self::USE_MERGE - 1985)) | (1 << (self::USE_NL - 1985)) | (1 << (self::USE_NL_WITH_INDEX - 1985)) | (1 << (self::USE_PRIVATE_OUTLINES - 1985)) | (1 << (self::USER_DATA - 1985)))) !== 0) || (((($_la - 2049)) & ~0x3f) === 0 && ((1 << ($_la - 2049)) & ((1 << (self::USER_DEFINED - 2049)) | (1 << (self::USERENV - 2049)) | (1 << (self::USERGROUP - 2049)) | (1 << (self::USER_RECYCLEBIN - 2049)) | (1 << (self::USERS - 2049)) | (1 << (self::USER_TABLESPACES - 2049)) | (1 << (self::USER - 2049)) | (1 << (self::USE_SEMI - 2049)) | (1 << (self::USE_STORED_OUTLINES - 2049)) | (1 << (self::USE_TTT_FOR_GSETS - 2049)) | (1 << (self::USE - 2049)) | (1 << (self::USE_VECTOR_AGGREGATION - 2049)) | (1 << (self::USE_WEAK_NAME_RESL - 2049)) | (1 << (self::USING_NO_EXPAND - 2049)) | (1 << (self::USING - 2049)) | (1 << (self::UTF16BE - 2049)) | (1 << (self::UTF16LE - 2049)) | (1 << (self::UTF32 - 2049)) | (1 << (self::UTF8 - 2049)) | (1 << (self::V1 - 2049)) | (1 << (self::V2 - 2049)) | (1 << (self::VALIDATE - 2049)) | (1 << (self::VALIDATION - 2049)) | (1 << (self::VALID_TIME_END - 2049)) | (1 << (self::VALUE - 2049)) | (1 << (self::VARCHAR2 - 2049)) | (1 << (self::VARCHAR - 2049)) | (1 << (self::VARIABLE - 2049)) | (1 << (self::VAR_POP - 2049)) | (1 << (self::VARRAYS - 2049)) | (1 << (self::VARRAY - 2049)) | (1 << (self::VAR_SAMP - 2049)) | (1 << (self::VARYING - 2049)) | (1 << (self::VECTOR_READ_TRACE - 2049)) | (1 << (self::VECTOR_READ - 2049)) | (1 << (self::VECTOR_TRANSFORM_DIMS - 2049)) | (1 << (self::VECTOR_TRANSFORM_FACT - 2049)) | (1 << (self::VECTOR_TRANSFORM - 2049)) | (1 << (self::VERIFIER - 2049)) | (1 << (self::VERIFY - 2049)) | (1 << (self::VERSIONING - 2049)) | (1 << (self::VERSIONS_ENDSCN - 2049)) | (1 << (self::VERSIONS_ENDTIME - 2049)) | (1 << (self::VERSIONS_OPERATION - 2049)) | (1 << (self::VERSIONS_STARTSCN - 2049)) | (1 << (self::VERSIONS_STARTTIME - 2049)) | (1 << (self::VERSIONS - 2049)) | (1 << (self::VERSIONS_XID - 2049)) | (1 << (self::VERSION - 2049)) | (1 << (self::VIOLATION - 2049)) | (1 << (self::VIRTUAL - 2049)) | (1 << (self::VISIBILITY - 2049)) | (1 << (self::VISIBLE - 2049)) | (1 << (self::VOLUME - 2049)) | (1 << (self::VSIZE - 2049)) | (1 << (self::WAIT - 2049)) | (1 << (self::WALLET - 2049)) | (1 << (self::WARNING - 2049)) | (1 << (self::WEEKS - 2049)) | (1 << (self::WEEK - 2049)) | (1 << (self::WELLFORMED - 2049)) | (1 << (self::WHENEVER - 2049)))) !== 0) || (((($_la - 2113)) & ~0x3f) === 0 && ((1 << ($_la - 2113)) & ((1 << (self::WHEN - 2113)) | (1 << (self::WHILE - 2113)) | (1 << (self::WHITESPACE - 2113)) | (1 << (self::WIDTH_BUCKET - 2113)) | (1 << (self::WITHIN - 2113)) | (1 << (self::WITHOUT - 2113)) | (1 << (self::WITH_PLSQL - 2113)) | (1 << (self::WORK - 2113)) | (1 << (self::WRAPPED - 2113)) | (1 << (self::WRAPPER - 2113)) | (1 << (self::WRITE - 2113)) | (1 << (self::XDB_FASTPATH_INSERT - 2113)) | (1 << (self::X_DYN_PRUNE - 2113)) | (1 << (self::XID - 2113)) | (1 << (self::XML2OBJECT - 2113)) | (1 << (self::XMLAGG - 2113)) | (1 << (self::XMLATTRIBUTES - 2113)) | (1 << (self::XMLCAST - 2113)) | (1 << (self::XMLCDATA - 2113)) | (1 << (self::XMLCOLATTVAL - 2113)) | (1 << (self::XMLCOMMENT - 2113)) | (1 << (self::XMLCONCAT - 2113)) | (1 << (self::XMLDIFF - 2113)) | (1 << (self::XML_DML_RWT_STMT - 2113)) | (1 << (self::XMLELEMENT - 2113)) | (1 << (self::XMLEXISTS2 - 2113)) | (1 << (self::XMLEXISTS - 2113)) | (1 << (self::XMLFOREST - 2113)) | (1 << (self::XMLINDEX_REWRITE_IN_SELECT - 2113)) | (1 << (self::XMLINDEX_REWRITE - 2113)) | (1 << (self::XMLINDEX_SEL_IDX_TBL - 2113)) | (1 << (self::XMLISNODE - 2113)) | (1 << (self::XMLISVALID - 2113)) | (1 << (self::XMLNAMESPACES - 2113)) | (1 << (self::XMLPARSE - 2113)) | (1 << (self::XMLPATCH - 2113)) | (1 << (self::XMLPI - 2113)) | (1 << (self::XMLQUERYVAL - 2113)) | (1 << (self::XMLQUERY - 2113)) | (1 << (self::XMLROOT - 2113)) | (1 << (self::XMLSCHEMA - 2113)) | (1 << (self::XMLSERIALIZE - 2113)) | (1 << (self::XMLTABLE - 2113)) | (1 << (self::XMLTRANSFORMBLOB - 2113)) | (1 << (self::XMLTRANSFORM - 2113)) | (1 << (self::XMLTYPE - 2113)) | (1 << (self::XML - 2113)) | (1 << (self::XPATHTABLE - 2113)) | (1 << (self::XS_SYS_CONTEXT - 2113)) | (1 << (self::XS - 2113)) | (1 << (self::YEARS - 2113)) | (1 << (self::YEAR - 2113)) | (1 << (self::YES - 2113)) | (1 << (self::YMINTERVAL_UNCONSTRAINED - 2113)) | (1 << (self::ZONEMAP - 2113)) | (1 << (self::ZONE - 2113)) | (1 << (self::PREDICTION - 2113)) | (1 << (self::PREDICTION_BOUNDS - 2113)) | (1 << (self::PREDICTION_COST - 2113)))) !== 0) || (((($_la - 2177)) & ~0x3f) === 0 && ((1 << ($_la - 2177)) & ((1 << (self::PREDICTION_DETAILS - 2177)) | (1 << (self::PREDICTION_PROBABILITY - 2177)) | (1 << (self::PREDICTION_SET - 2177)) | (1 << (self::CUME_DIST - 2177)) | (1 << (self::DENSE_RANK - 2177)) | (1 << (self::LISTAGG - 2177)) | (1 << (self::PERCENT_RANK - 2177)) | (1 << (self::PERCENTILE_CONT - 2177)) | (1 << (self::PERCENTILE_DISC - 2177)) | (1 << (self::RANK - 2177)) | (1 << (self::AVG - 2177)) | (1 << (self::CORR - 2177)) | (1 << (self::COVAR_ - 2177)) | (1 << (self::LAG - 2177)) | (1 << (self::LEAD - 2177)) | (1 << (self::MAX - 2177)) | (1 << (self::MEDIAN - 2177)) | (1 << (self::MIN - 2177)) | (1 << (self::NTILE - 2177)) | (1 << (self::NVL - 2177)) | (1 << (self::RATIO_TO_REPORT - 2177)) | (1 << (self::REGR_ - 2177)) | (1 << (self::ROUND - 2177)) | (1 << (self::ROW_NUMBER - 2177)) | (1 << (self::SUBSTR - 2177)) | (1 << (self::TO_CHAR - 2177)) | (1 << (self::TRIM - 2177)) | (1 << (self::SUM - 2177)) | (1 << (self::STDDEV - 2177)) | (1 << (self::VAR_ - 2177)) | (1 << (self::VARIANCE - 2177)) | (1 << (self::LEAST - 2177)) | (1 << (self::GREATEST - 2177)) | (1 << (self::TO_DATE - 2177)) | (1 << (self::PERIOD - 2177)) | (1 << (self::DELIMITED_ID - 2177)))) !== 0) || $_la === self::REGULAR_ID) {
                $this->setState(8285);
                $this->type_spec();
            }
            $this->setState(8289);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT || $_la === self::ASSIGN_OP) {
                $this->setState(8288);
                $this->default_value_part();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function default_value_part(): Context\Default_value_partContext
    {
        $localContext = new Context\Default_value_partContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 918, self::RULE_default_value_part);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8291);

            $_la = $this->input->LA(1);

            if (!($_la === self::DEFAULT || $_la === self::ASSIGN_OP)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(8292);
            $this->expression();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function seq_of_declare_specs(): Context\Seq_of_declare_specsContext
    {
        $localContext = new Context\Seq_of_declare_specsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 920, self::RULE_seq_of_declare_specs);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8295);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(8294);
                        $this->declare_spec();
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(8297);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 1071, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function declare_spec(): Context\Declare_specContext
    {
        $localContext = new Context\Declare_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 922, self::RULE_declare_spec);

        try {
            $this->setState(8309);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1072, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(8299);
                    $this->pragma_declaration();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(8300);
                    $this->variable_declaration();
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(8301);
                    $this->subtype_declaration();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(8302);
                    $this->cursor_declaration();
                    break;

                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(8303);
                    $this->exception_declaration();
                    break;

                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(8304);
                    $this->type_declaration();
                    break;

                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(8305);
                    $this->procedure_spec();
                    break;

                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(8306);
                    $this->function_spec();
                    break;

                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(8307);
                    $this->procedure_body();
                    break;

                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(8308);
                    $this->function_body();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function variable_declaration(): Context\Variable_declarationContext
    {
        $localContext = new Context\Variable_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 924, self::RULE_variable_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8311);
            $this->identifier();
            $this->setState(8313);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1073, $this->ctx)) {
                case 1:
                    $this->setState(8312);
                    $this->match(self::CONSTANT);
                    break;
            }
            $this->setState(8315);
            $this->type_spec();
            $this->setState(8318);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(8316);
                $this->match(self::NOT);
                $this->setState(8317);
                $this->match(self::NULL_);
            }
            $this->setState(8321);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT || $_la === self::ASSIGN_OP) {
                $this->setState(8320);
                $this->default_value_part();
            }
            $this->setState(8323);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function subtype_declaration(): Context\Subtype_declarationContext
    {
        $localContext = new Context\Subtype_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 926, self::RULE_subtype_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8325);
            $this->match(self::SUBTYPE);
            $this->setState(8326);
            $this->identifier();
            $this->setState(8327);
            $this->match(self::IS);
            $this->setState(8328);
            $this->type_spec();
            $this->setState(8334);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::RANGE) {
                $this->setState(8329);
                $this->match(self::RANGE);
                $this->setState(8330);
                $this->expression();
                $this->setState(8331);
                $this->match(self::DOUBLE_PERIOD);
                $this->setState(8332);
                $this->expression();
            }
            $this->setState(8338);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(8336);
                $this->match(self::NOT);
                $this->setState(8337);
                $this->match(self::NULL_);
            }
            $this->setState(8340);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function cursor_declaration(): Context\Cursor_declarationContext
    {
        $localContext = new Context\Cursor_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 928, self::RULE_cursor_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8342);
            $this->match(self::CURSOR);
            $this->setState(8343);
            $this->identifier();
            $this->setState(8355);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LEFT_PAREN) {
                $this->setState(8344);
                $this->match(self::LEFT_PAREN);
                $this->setState(8345);
                $this->parameter_spec();
                $this->setState(8350);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::COMMA) {
                    $this->setState(8346);
                    $this->match(self::COMMA);
                    $this->setState(8347);
                    $this->parameter_spec();
                    $this->setState(8352);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
                $this->setState(8353);
                $this->match(self::RIGHT_PAREN);
            }
            $this->setState(8359);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::RETURN) {
                $this->setState(8357);
                $this->match(self::RETURN);
                $this->setState(8358);
                $this->type_spec();
            }
            $this->setState(8363);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IS) {
                $this->setState(8361);
                $this->match(self::IS);
                $this->setState(8362);
                $this->select_statement();
            }
            $this->setState(8365);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function parameter_spec(): Context\Parameter_specContext
    {
        $localContext = new Context\Parameter_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 930, self::RULE_parameter_spec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8367);
            $this->parameter_name();
            $this->setState(8372);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ABORT) | (1 << self::ABS) | (1 << self::ACCESS) | (1 << self::ACCESSED) | (1 << self::ACCOUNT) | (1 << self::ACL) | (1 << self::ACOS) | (1 << self::ACTION) | (1 << self::ACTIONS) | (1 << self::ACTIVATE) | (1 << self::ACTIVE) | (1 << self::ACTIVE_COMPONENT) | (1 << self::ACTIVE_DATA) | (1 << self::ACTIVE_FUNCTION) | (1 << self::ACTIVE_TAG) | (1 << self::ACTIVITY) | (1 << self::ADAPTIVE_PLAN) | (1 << self::ADD) | (1 << self::ADD_COLUMN) | (1 << self::ADD_GROUP) | (1 << self::ADD_MONTHS) | (1 << self::ADJ_DATE) | (1 << self::ADMIN) | (1 << self::ADMINISTER) | (1 << self::ADMINISTRATOR) | (1 << self::ADVANCED) | (1 << self::ADVISE) | (1 << self::ADVISOR) | (1 << self::AFD_DISKSTRING) | (1 << self::AFTER) | (1 << self::AGENT) | (1 << self::AGGREGATE) | (1 << self::A_LETTER) | (1 << self::ALIAS) | (1 << self::ALLOCATE) | (1 << self::ALLOW) | (1 << self::ALL_ROWS) | (1 << self::ALWAYS) | (1 << self::ANALYZE) | (1 << self::ANCILLARY) | (1 << self::AND_EQUAL) | (1 << self::ANOMALY) | (1 << self::ANSI_REARCH) | (1 << self::ANTIJOIN) | (1 << self::ANYSCHEMA) | (1 << self::APPEND) | (1 << self::APPENDCHILDXML) | (1 << self::APPEND_VALUES) | (1 << self::APPLICATION) | (1 << self::APPLY) | (1 << self::APPROX_COUNT_DISTINCT) | (1 << self::ARCHIVAL) | (1 << self::ARCHIVE) | (1 << self::ARCHIVED) | (1 << self::ARCHIVELOG) | (1 << self::ARRAY) | (1 << self::ASCII))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::ASCIISTR - 64)) | (1 << (self::ASIN - 64)) | (1 << (self::ASIS - 64)) | (1 << (self::ASSEMBLY - 64)) | (1 << (self::ASSIGN - 64)) | (1 << (self::ASSOCIATE - 64)) | (1 << (self::ASYNC - 64)) | (1 << (self::ASYNCHRONOUS - 64)) | (1 << (self::ATAN2 - 64)) | (1 << (self::ATAN - 64)) | (1 << (self::AT - 64)) | (1 << (self::ATTRIBUTE - 64)) | (1 << (self::ATTRIBUTES - 64)) | (1 << (self::AUTHENTICATED - 64)) | (1 << (self::AUTHENTICATION - 64)) | (1 << (self::AUTHID - 64)) | (1 << (self::AUTHORIZATION - 64)) | (1 << (self::AUTOALLOCATE - 64)) | (1 << (self::AUTO - 64)) | (1 << (self::AUTOEXTEND - 64)) | (1 << (self::AUTO_LOGIN - 64)) | (1 << (self::AUTOMATIC - 64)) | (1 << (self::AUTONOMOUS_TRANSACTION - 64)) | (1 << (self::AUTO_REOPTIMIZE - 64)) | (1 << (self::AVAILABILITY - 64)) | (1 << (self::AVRO - 64)) | (1 << (self::BACKGROUND - 64)) | (1 << (self::BACKUP - 64)) | (1 << (self::BASIC - 64)) | (1 << (self::BASICFILE - 64)) | (1 << (self::BATCH - 64)) | (1 << (self::BATCHSIZE - 64)) | (1 << (self::BATCH_TABLE_ACCESS_BY_ROWID - 64)) | (1 << (self::BECOME - 64)) | (1 << (self::BEFORE - 64)) | (1 << (self::BEGIN - 64)) | (1 << (self::BEGINNING - 64)) | (1 << (self::BEGIN_OUTLINE_DATA - 64)) | (1 << (self::BEHALF - 64)) | (1 << (self::BEQUEATH - 64)) | (1 << (self::BFILE - 64)) | (1 << (self::BFILENAME - 64)) | (1 << (self::BIGFILE - 64)) | (1 << (self::BINARY - 64)) | (1 << (self::BINARY_DOUBLE - 64)) | (1 << (self::BINARY_DOUBLE_INFINITY - 64)) | (1 << (self::BINARY_DOUBLE_NAN - 64)) | (1 << (self::BINARY_FLOAT - 64)) | (1 << (self::BINARY_FLOAT_INFINITY - 64)) | (1 << (self::BINARY_FLOAT_NAN - 64)) | (1 << (self::BINARY_INTEGER - 64)) | (1 << (self::BIND_AWARE - 64)) | (1 << (self::BINDING - 64)) | (1 << (self::BIN_TO_NUM - 64)) | (1 << (self::BITAND - 64)) | (1 << (self::BITMAP_AND - 64)) | (1 << (self::BITMAP - 64)) | (1 << (self::BITMAPS - 64)) | (1 << (self::BITMAP_TREE - 64)) | (1 << (self::BITS - 64)))) !== 0) || (((($_la - 128)) & ~0x3f) === 0 && ((1 << ($_la - 128)) & ((1 << (self::BLOB - 128)) | (1 << (self::BLOCK - 128)) | (1 << (self::BLOCK_RANGE - 128)) | (1 << (self::BLOCKS - 128)) | (1 << (self::BLOCKSIZE - 128)) | (1 << (self::BODY - 128)) | (1 << (self::BOOLEAN - 128)) | (1 << (self::BOTH - 128)) | (1 << (self::BOUND - 128)) | (1 << (self::BRANCH - 128)) | (1 << (self::BREADTH - 128)) | (1 << (self::BROADCAST - 128)) | (1 << (self::BSON - 128)) | (1 << (self::BUFFER - 128)) | (1 << (self::BUFFER_CACHE - 128)) | (1 << (self::BUFFER_POOL - 128)) | (1 << (self::BUILD - 128)) | (1 << (self::BULK - 128)) | (1 << (self::BYPASS_RECURSIVE_CHECK - 128)) | (1 << (self::BYPASS_UJVC - 128)) | (1 << (self::BYTE - 128)) | (1 << (self::CACHE - 128)) | (1 << (self::CACHE_CB - 128)) | (1 << (self::CACHE_INSTANCES - 128)) | (1 << (self::CACHE_TEMP_TABLE - 128)) | (1 << (self::CACHING - 128)) | (1 << (self::CALCULATED - 128)) | (1 << (self::CALLBACK - 128)) | (1 << (self::CALL - 128)) | (1 << (self::CANCEL - 128)) | (1 << (self::CAPACITY - 128)) | (1 << (self::CARDINALITY - 128)) | (1 << (self::CASCADE - 128)) | (1 << (self::CASE - 128)) | (1 << (self::CAST - 128)) | (1 << (self::CATEGORY - 128)) | (1 << (self::CDBDEFAULT - 128)) | (1 << (self::CEIL - 128)) | (1 << (self::CELL_FLASH_CACHE - 128)) | (1 << (self::CERTIFICATE - 128)) | (1 << (self::CFILE - 128)) | (1 << (self::CHAINED - 128)) | (1 << (self::CHANGE - 128)) | (1 << (self::CHANGE_DUPKEY_ERROR_INDEX - 128)) | (1 << (self::CHARACTER - 128)) | (1 << (self::CHAR - 128)) | (1 << (self::CHAR_CS - 128)) | (1 << (self::CHARTOROWID - 128)) | (1 << (self::CHECK_ACL_REWRITE - 128)) | (1 << (self::CHECKPOINT - 128)) | (1 << (self::CHILD - 128)) | (1 << (self::CHOOSE - 128)) | (1 << (self::CHR - 128)) | (1 << (self::CHUNK - 128)) | (1 << (self::CLASS - 128)) | (1 << (self::CLASSIFIER - 128)) | (1 << (self::CLEANUP - 128)) | (1 << (self::CLEAR - 128)) | (1 << (self::C_LETTER - 128)) | (1 << (self::CLIENT - 128)))) !== 0) || (((($_la - 192)) & ~0x3f) === 0 && ((1 << ($_la - 192)) & ((1 << (self::CLOB - 192)) | (1 << (self::CLONE - 192)) | (1 << (self::CLOSE_CACHED_OPEN_CURSORS - 192)) | (1 << (self::CLOSE - 192)) | (1 << (self::CLUSTER_BY_ROWID - 192)) | (1 << (self::CLUSTER - 192)) | (1 << (self::CLUSTER_DETAILS - 192)) | (1 << (self::CLUSTER_DISTANCE - 192)) | (1 << (self::CLUSTER_ID - 192)) | (1 << (self::CLUSTERING - 192)) | (1 << (self::CLUSTERING_FACTOR - 192)) | (1 << (self::CLUSTER_PROBABILITY - 192)) | (1 << (self::CLUSTER_SET - 192)) | (1 << (self::COALESCE - 192)) | (1 << (self::COALESCE_SQ - 192)) | (1 << (self::COARSE - 192)) | (1 << (self::CO_AUTH_IND - 192)) | (1 << (self::COLD - 192)) | (1 << (self::COLLECT - 192)) | (1 << (self::COLUMNAR - 192)) | (1 << (self::COLUMN_AUTH_INDICATOR - 192)) | (1 << (self::COLUMN - 192)) | (1 << (self::COLUMNS - 192)) | (1 << (self::COLUMN_STATS - 192)) | (1 << (self::COLUMN_VALUE - 192)) | (1 << (self::COMMENT - 192)) | (1 << (self::COMMIT - 192)) | (1 << (self::COMMITTED - 192)) | (1 << (self::COMMON_DATA - 192)) | (1 << (self::COMPACT - 192)) | (1 << (self::COMPATIBILITY - 192)) | (1 << (self::COMPILE - 192)) | (1 << (self::COMPLETE - 192)) | (1 << (self::COMPLIANCE - 192)) | (1 << (self::COMPONENT - 192)) | (1 << (self::COMPONENTS - 192)) | (1 << (self::COMPOSE - 192)) | (1 << (self::COMPOSITE - 192)) | (1 << (self::COMPOSITE_LIMIT - 192)) | (1 << (self::COMPOUND - 192)) | (1 << (self::COMPUTE - 192)) | (1 << (self::CONCAT - 192)) | (1 << (self::CON_DBID_TO_ID - 192)) | (1 << (self::CONDITIONAL - 192)) | (1 << (self::CONDITION - 192)) | (1 << (self::CONFIRM - 192)) | (1 << (self::CONFORMING - 192)) | (1 << (self::CON_GUID_TO_ID - 192)) | (1 << (self::CON_ID - 192)) | (1 << (self::CON_NAME_TO_ID - 192)) | (1 << (self::CONNECT_BY_CB_WHR_ONLY - 192)) | (1 << (self::CONNECT_BY_COMBINE_SW - 192)) | (1 << (self::CONNECT_BY_COST_BASED - 192)) | (1 << (self::CONNECT_BY_ELIM_DUPS - 192)) | (1 << (self::CONNECT_BY_FILTERING - 192)) | (1 << (self::CONNECT_BY_ISCYCLE - 192)) | (1 << (self::CONNECT_BY_ISLEAF - 192)) | (1 << (self::CONNECT_BY_ROOT - 192)) | (1 << (self::CONNECT_TIME - 192)) | (1 << (self::CONSIDER - 192)) | (1 << (self::CONSISTENT - 192)) | (1 << (self::CONSTANT - 192)))) !== 0) || (((($_la - 256)) & ~0x3f) === 0 && ((1 << ($_la - 256)) & ((1 << (self::CONST - 256)) | (1 << (self::CONSTRAINT - 256)) | (1 << (self::CONSTRAINTS - 256)) | (1 << (self::CONSTRUCTOR - 256)) | (1 << (self::CONTAINER - 256)) | (1 << (self::CONTAINER_DATA - 256)) | (1 << (self::CONTAINERS - 256)) | (1 << (self::CONTENT - 256)) | (1 << (self::CONTENTS - 256)) | (1 << (self::CONTEXT - 256)) | (1 << (self::CONTINUE - 256)) | (1 << (self::CONTROLFILE - 256)) | (1 << (self::CON_UID_TO_ID - 256)) | (1 << (self::CONVERT - 256)) | (1 << (self::COOKIE - 256)) | (1 << (self::COPY - 256)) | (1 << (self::CORR_K - 256)) | (1 << (self::CORR_S - 256)) | (1 << (self::CORRUPTION - 256)) | (1 << (self::CORRUPT_XID_ALL - 256)) | (1 << (self::CORRUPT_XID - 256)) | (1 << (self::COS - 256)) | (1 << (self::COSH - 256)) | (1 << (self::COST - 256)) | (1 << (self::COST_XML_QUERY_REWRITE - 256)) | (1 << (self::COUNT - 256)) | (1 << (self::COVAR_POP - 256)) | (1 << (self::COVAR_SAMP - 256)) | (1 << (self::CPU_COSTING - 256)) | (1 << (self::CPU_PER_CALL - 256)) | (1 << (self::CPU_PER_SESSION - 256)) | (1 << (self::CRASH - 256)) | (1 << (self::CREATE_FILE_DEST - 256)) | (1 << (self::CREATE_STORED_OUTLINES - 256)) | (1 << (self::CREATION - 256)) | (1 << (self::CREDENTIAL - 256)) | (1 << (self::CRITICAL - 256)) | (1 << (self::CROSS - 256)) | (1 << (self::CROSSEDITION - 256)) | (1 << (self::CSCONVERT - 256)) | (1 << (self::CUBE_AJ - 256)) | (1 << (self::CUBE - 256)) | (1 << (self::CUBE_GB - 256)) | (1 << (self::CUBE_SJ - 256)) | (1 << (self::CUME_DISTM - 256)) | (1 << (self::CURRENT - 256)) | (1 << (self::CURRENT_DATE - 256)) | (1 << (self::CURRENT_SCHEMA - 256)) | (1 << (self::CURRENT_TIME - 256)) | (1 << (self::CURRENT_TIMESTAMP - 256)) | (1 << (self::CURRENT_USER - 256)) | (1 << (self::CURRENTV - 256)) | (1 << (self::CURSOR - 256)) | (1 << (self::CURSOR_SHARING_EXACT - 256)) | (1 << (self::CURSOR_SPECIFIC_SEGMENT - 256)) | (1 << (self::CUSTOMDATUM - 256)) | (1 << (self::CV - 256)) | (1 << (self::CYCLE - 256)) | (1 << (self::DANGLING - 256)) | (1 << (self::DATABASE - 256)) | (1 << (self::DATA - 256)) | (1 << (self::DATAFILE - 256)) | (1 << (self::DATAFILES - 256)))) !== 0) || (((($_la - 321)) & ~0x3f) === 0 && ((1 << ($_la - 321)) & ((1 << (self::DATAMOVEMENT - 321)) | (1 << (self::DATAOBJNO - 321)) | (1 << (self::DATAOBJ_TO_MAT_PARTITION - 321)) | (1 << (self::DATAOBJ_TO_PARTITION - 321)) | (1 << (self::DATAPUMP - 321)) | (1 << (self::DATA_SECURITY_REWRITE_LIMIT - 321)) | (1 << (self::DATE - 321)) | (1 << (self::DATE_MODE - 321)) | (1 << (self::DAY - 321)) | (1 << (self::DAYS - 321)) | (1 << (self::DBA - 321)) | (1 << (self::DBA_RECYCLEBIN - 321)) | (1 << (self::DBMS_STATS - 321)) | (1 << (self::DB_ROLE_CHANGE - 321)) | (1 << (self::DBTIMEZONE - 321)) | (1 << (self::DB_UNIQUE_NAME - 321)) | (1 << (self::DB_VERSION - 321)) | (1 << (self::DDL - 321)) | (1 << (self::DEALLOCATE - 321)) | (1 << (self::DEBUG - 321)) | (1 << (self::DEBUGGER - 321)) | (1 << (self::DEC - 321)) | (1 << (self::DECIMAL - 321)) | (1 << (self::DECLARE - 321)) | (1 << (self::DECOMPOSE - 321)) | (1 << (self::DECORRELATE - 321)) | (1 << (self::DECR - 321)) | (1 << (self::DECREMENT - 321)) | (1 << (self::DECRYPT - 321)) | (1 << (self::DEDUPLICATE - 321)) | (1 << (self::DEFAULTS - 321)) | (1 << (self::DEFERRABLE - 321)) | (1 << (self::DEFERRED - 321)) | (1 << (self::DEFINED - 321)) | (1 << (self::DEFINE - 321)) | (1 << (self::DEFINER - 321)) | (1 << (self::DEGREE - 321)) | (1 << (self::DELAY - 321)) | (1 << (self::DELEGATE - 321)) | (1 << (self::DELETE_ALL - 321)) | (1 << (self::DELETE - 321)) | (1 << (self::DELETEXML - 321)) | (1 << (self::DEMAND - 321)) | (1 << (self::DENSE_RANKM - 321)) | (1 << (self::DEPENDENT - 321)) | (1 << (self::DEPTH - 321)) | (1 << (self::DEQUEUE - 321)) | (1 << (self::DEREF - 321)) | (1 << (self::DEREF_NO_REWRITE - 321)) | (1 << (self::DESTROY - 321)) | (1 << (self::DETACHED - 321)) | (1 << (self::DETERMINES - 321)) | (1 << (self::DETERMINISTIC - 321)) | (1 << (self::DICTIONARY - 321)) | (1 << (self::DIMENSION - 321)) | (1 << (self::DIMENSIONS - 321)) | (1 << (self::DIRECT_LOAD - 321)) | (1 << (self::DIRECTORY - 321)) | (1 << (self::DIRECT_PATH - 321)) | (1 << (self::DISABLE_ALL - 321)) | (1 << (self::DISABLE - 321)) | (1 << (self::DISABLE_PARALLEL_DML - 321)))) !== 0) || (((($_la - 385)) & ~0x3f) === 0 && ((1 << ($_la - 385)) & ((1 << (self::DISABLE_PRESET - 385)) | (1 << (self::DISABLE_RPKE - 385)) | (1 << (self::DISALLOW - 385)) | (1 << (self::DISASSOCIATE - 385)) | (1 << (self::DISCARD - 385)) | (1 << (self::DISCONNECT - 385)) | (1 << (self::DISK - 385)) | (1 << (self::DISKGROUP - 385)) | (1 << (self::DISKS - 385)) | (1 << (self::DISMOUNT - 385)) | (1 << (self::DISTINGUISHED - 385)) | (1 << (self::DISTRIBUTED - 385)) | (1 << (self::DISTRIBUTE - 385)) | (1 << (self::DML - 385)) | (1 << (self::DML_UPDATE - 385)) | (1 << (self::DOCFIDELITY - 385)) | (1 << (self::DOCUMENT - 385)) | (1 << (self::DOMAIN_INDEX_FILTER - 385)) | (1 << (self::DOMAIN_INDEX_NO_SORT - 385)) | (1 << (self::DOMAIN_INDEX_SORT - 385)) | (1 << (self::DOUBLE - 385)) | (1 << (self::DOWNGRADE - 385)) | (1 << (self::DRIVING_SITE - 385)) | (1 << (self::DROP_COLUMN - 385)) | (1 << (self::DROP_GROUP - 385)) | (1 << (self::DSINTERVAL_UNCONSTRAINED - 385)) | (1 << (self::DST_UPGRADE_INSERT_CONV - 385)) | (1 << (self::DUMP - 385)) | (1 << (self::DUPLICATE - 385)) | (1 << (self::DV - 385)) | (1 << (self::DYNAMIC - 385)) | (1 << (self::DYNAMIC_SAMPLING - 385)) | (1 << (self::DYNAMIC_SAMPLING_EST_CDN - 385)) | (1 << (self::EACH - 385)) | (1 << (self::EDITIONABLE - 385)) | (1 << (self::EDITION - 385)) | (1 << (self::EDITIONING - 385)) | (1 << (self::EDITIONS - 385)) | (1 << (self::ELEMENT - 385)) | (1 << (self::ELIM_GROUPBY - 385)) | (1 << (self::ELIMINATE_JOIN - 385)) | (1 << (self::ELIMINATE_OBY - 385)) | (1 << (self::ELIMINATE_OUTER_JOIN - 385)) | (1 << (self::EM - 385)) | (1 << (self::EMPTY_BLOB - 385)) | (1 << (self::EMPTY_CLOB - 385)) | (1 << (self::EMPTY - 385)) | (1 << (self::ENABLE_ALL - 385)) | (1 << (self::ENABLE - 385)) | (1 << (self::ENABLE_PARALLEL_DML - 385)) | (1 << (self::ENABLE_PRESET - 385)) | (1 << (self::ENCODING - 385)) | (1 << (self::ENCRYPT - 385)) | (1 << (self::ENCRYPTION - 385)) | (1 << (self::END_OUTLINE_DATA - 385)) | (1 << (self::ENFORCED - 385)) | (1 << (self::ENFORCE - 385)))) !== 0) || (((($_la - 449)) & ~0x3f) === 0 && ((1 << ($_la - 449)) & ((1 << (self::ENQUEUE - 449)) | (1 << (self::ENTERPRISE - 449)) | (1 << (self::ENTITYESCAPING - 449)) | (1 << (self::ENTRY - 449)) | (1 << (self::EQUIPART - 449)) | (1 << (self::ERR - 449)) | (1 << (self::ERROR_ARGUMENT - 449)) | (1 << (self::ERROR - 449)) | (1 << (self::ERROR_ON_OVERLAP_TIME - 449)) | (1 << (self::ERRORS - 449)) | (1 << (self::ESCAPE - 449)) | (1 << (self::ESTIMATE - 449)) | (1 << (self::EVAL - 449)) | (1 << (self::EVALNAME - 449)) | (1 << (self::EVALUATE - 449)) | (1 << (self::EVALUATION - 449)) | (1 << (self::EVENTS - 449)) | (1 << (self::EVERY - 449)) | (1 << (self::EXCEPT - 449)) | (1 << (self::EXCEPTION - 449)) | (1 << (self::EXCEPTION_INIT - 449)) | (1 << (self::EXCEPTIONS - 449)) | (1 << (self::EXCHANGE - 449)) | (1 << (self::EXCLUDE - 449)) | (1 << (self::EXCLUDING - 449)) | (1 << (self::EXECUTE - 449)) | (1 << (self::EXEMPT - 449)) | (1 << (self::EXISTING - 449)) | (1 << (self::EXISTS - 449)) | (1 << (self::EXISTSNODE - 449)) | (1 << (self::EXIT - 449)) | (1 << (self::EXPAND_GSET_TO_UNION - 449)) | (1 << (self::EXPAND_TABLE - 449)) | (1 << (self::EXP - 449)) | (1 << (self::EXPIRE - 449)) | (1 << (self::EXPLAIN - 449)) | (1 << (self::EXPLOSION - 449)) | (1 << (self::EXPORT - 449)) | (1 << (self::EXPR_CORR_CHECK - 449)) | (1 << (self::EXPRESS - 449)) | (1 << (self::EXTENDS - 449)) | (1 << (self::EXTENT - 449)) | (1 << (self::EXTENTS - 449)) | (1 << (self::EXTERNAL - 449)) | (1 << (self::EXTERNALLY - 449)) | (1 << (self::EXTRACTCLOBXML - 449)) | (1 << (self::EXTRACT - 449)) | (1 << (self::EXTRACTVALUE - 449)) | (1 << (self::EXTRA - 449)) | (1 << (self::FACILITY - 449)) | (1 << (self::FACT - 449)) | (1 << (self::FACTOR - 449)) | (1 << (self::FACTORIZE_JOIN - 449)) | (1 << (self::FAILED - 449)) | (1 << (self::FAILED_LOGIN_ATTEMPTS - 449)) | (1 << (self::FAILGROUP - 449)) | (1 << (self::FAILOVER - 449)) | (1 << (self::FAILURE - 449)) | (1 << (self::FALSE - 449)) | (1 << (self::FAMILY - 449)) | (1 << (self::FAR - 449)) | (1 << (self::FAST - 449)) | (1 << (self::FASTSTART - 449)))) !== 0) || (((($_la - 513)) & ~0x3f) === 0 && ((1 << ($_la - 513)) & ((1 << (self::FBTSCAN - 513)) | (1 << (self::FEATURE_DETAILS - 513)) | (1 << (self::FEATURE_ID - 513)) | (1 << (self::FEATURE_SET - 513)) | (1 << (self::FEATURE_VALUE - 513)) | (1 << (self::FETCH - 513)) | (1 << (self::FILE - 513)) | (1 << (self::FILE_NAME_CONVERT - 513)) | (1 << (self::FILESYSTEM_LIKE_LOGGING - 513)) | (1 << (self::FILTER - 513)) | (1 << (self::FINAL - 513)) | (1 << (self::FINE - 513)) | (1 << (self::FINISH - 513)) | (1 << (self::FIRST - 513)) | (1 << (self::FIRSTM - 513)) | (1 << (self::FIRST_ROWS - 513)) | (1 << (self::FIRST_VALUE - 513)) | (1 << (self::FIXED_VIEW_DATA - 513)) | (1 << (self::FLAGGER - 513)) | (1 << (self::FLASHBACK - 513)) | (1 << (self::FLASH_CACHE - 513)) | (1 << (self::FLOAT - 513)) | (1 << (self::FLOB - 513)) | (1 << (self::FLOOR - 513)) | (1 << (self::FLUSH - 513)) | (1 << (self::FOLDER - 513)) | (1 << (self::FOLLOWING - 513)) | (1 << (self::FOLLOWS - 513)) | (1 << (self::FORALL - 513)) | (1 << (self::FORCE - 513)) | (1 << (self::FORCE_XML_QUERY_REWRITE - 513)) | (1 << (self::FOREIGN - 513)) | (1 << (self::FOREVER - 513)) | (1 << (self::FORMAT - 513)) | (1 << (self::FORWARD - 513)) | (1 << (self::FRAGMENT_NUMBER - 513)) | (1 << (self::FREELIST - 513)) | (1 << (self::FREELISTS - 513)) | (1 << (self::FREEPOOLS - 513)) | (1 << (self::FRESH - 513)) | (1 << (self::FROM_TZ - 513)) | (1 << (self::FULL - 513)) | (1 << (self::FULL_OUTER_JOIN_TO_OUTER - 513)) | (1 << (self::FUNCTION - 513)) | (1 << (self::FUNCTIONS - 513)) | (1 << (self::GATHER_OPTIMIZER_STATISTICS - 513)) | (1 << (self::GATHER_PLAN_STATISTICS - 513)) | (1 << (self::GBY_CONC_ROLLUP - 513)) | (1 << (self::GBY_PUSHDOWN - 513)) | (1 << (self::GENERATED - 513)) | (1 << (self::GET - 513)) | (1 << (self::GLOBAL - 513)) | (1 << (self::GLOBALLY - 513)) | (1 << (self::GLOBAL_NAME - 513)) | (1 << (self::GLOBAL_TOPIC_ENABLED - 513)) | (1 << (self::GROUP_BY - 513)) | (1 << (self::GROUP_ID - 513)) | (1 << (self::GROUPING - 513)) | (1 << (self::GROUPING_ID - 513)))) !== 0) || (((($_la - 577)) & ~0x3f) === 0 && ((1 << ($_la - 577)) & ((1 << (self::GROUPS - 577)) | (1 << (self::GUARANTEED - 577)) | (1 << (self::GUARANTEE - 577)) | (1 << (self::GUARD - 577)) | (1 << (self::HASH_AJ - 577)) | (1 << (self::HASH - 577)) | (1 << (self::HASHKEYS - 577)) | (1 << (self::HASH_SJ - 577)) | (1 << (self::HEADER - 577)) | (1 << (self::HEAP - 577)) | (1 << (self::HELP - 577)) | (1 << (self::HEXTORAW - 577)) | (1 << (self::HEXTOREF - 577)) | (1 << (self::HIDDEN_KEYWORD - 577)) | (1 << (self::HIDE - 577)) | (1 << (self::HIERARCHY - 577)) | (1 << (self::HIGH - 577)) | (1 << (self::HINTSET_BEGIN - 577)) | (1 << (self::HINTSET_END - 577)) | (1 << (self::HOT - 577)) | (1 << (self::HOUR - 577)) | (1 << (self::HWM_BROKERED - 577)) | (1 << (self::HYBRID - 577)) | (1 << (self::IDENTIFIER - 577)) | (1 << (self::IDENTITY - 577)) | (1 << (self::IDGENERATORS - 577)) | (1 << (self::ID - 577)) | (1 << (self::IDLE_TIME - 577)) | (1 << (self::IF - 577)) | (1 << (self::IGNORE - 577)) | (1 << (self::IGNORE_OPTIM_EMBEDDED_HINTS - 577)) | (1 << (self::IGNORE_ROW_ON_DUPKEY_INDEX - 577)) | (1 << (self::IGNORE_WHERE_CLAUSE - 577)) | (1 << (self::ILM - 577)) | (1 << (self::IMMEDIATE - 577)) | (1 << (self::IMPACT - 577)) | (1 << (self::IMPORT - 577)) | (1 << (self::INACTIVE - 577)) | (1 << (self::INCLUDE - 577)) | (1 << (self::INCLUDE_VERSION - 577)) | (1 << (self::INCLUDING - 577)) | (1 << (self::INCREMENTAL - 577)) | (1 << (self::INCREMENT - 577)) | (1 << (self::INCR - 577)) | (1 << (self::INDENT - 577)) | (1 << (self::INDEX_ASC - 577)) | (1 << (self::INDEX_COMBINE - 577)) | (1 << (self::INDEX_DESC - 577)) | (1 << (self::INDEXED - 577)) | (1 << (self::INDEXES - 577)) | (1 << (self::INDEX_FFS - 577)) | (1 << (self::INDEX_FILTER - 577)) | (1 << (self::INDEXING - 577)) | (1 << (self::INDEX_JOIN - 577)) | (1 << (self::INDEX_ROWS - 577)) | (1 << (self::INDEX_RRS - 577)) | (1 << (self::INDEX_RS_ASC - 577)) | (1 << (self::INDEX_RS_DESC - 577)) | (1 << (self::INDEX_RS - 577)) | (1 << (self::INDEX_SCAN - 577)) | (1 << (self::INDEX_SKIP_SCAN - 577)))) !== 0) || (((($_la - 641)) & ~0x3f) === 0 && ((1 << ($_la - 641)) & ((1 << (self::INDEX_SS_ASC - 641)) | (1 << (self::INDEX_SS_DESC - 641)) | (1 << (self::INDEX_SS - 641)) | (1 << (self::INDEX_STATS - 641)) | (1 << (self::INDEXTYPE - 641)) | (1 << (self::INDEXTYPES - 641)) | (1 << (self::INDICATOR - 641)) | (1 << (self::INDICES - 641)) | (1 << (self::INFINITE - 641)) | (1 << (self::INFORMATIONAL - 641)) | (1 << (self::INHERIT - 641)) | (1 << (self::IN - 641)) | (1 << (self::INITCAP - 641)) | (1 << (self::INITIAL - 641)) | (1 << (self::INITIALIZED - 641)) | (1 << (self::INITIALLY - 641)) | (1 << (self::INITRANS - 641)) | (1 << (self::INLINE - 641)) | (1 << (self::INLINE_XMLTYPE_NT - 641)) | (1 << (self::INMEMORY - 641)) | (1 << (self::IN_MEMORY_METADATA - 641)) | (1 << (self::INMEMORY_PRUNING - 641)) | (1 << (self::INNER - 641)) | (1 << (self::INOUT - 641)) | (1 << (self::INPLACE - 641)) | (1 << (self::INSERTCHILDXMLAFTER - 641)) | (1 << (self::INSERTCHILDXMLBEFORE - 641)) | (1 << (self::INSERTCHILDXML - 641)) | (1 << (self::INSERTXMLAFTER - 641)) | (1 << (self::INSERTXMLBEFORE - 641)) | (1 << (self::INSTANCE - 641)) | (1 << (self::INSTANCES - 641)) | (1 << (self::INSTANTIABLE - 641)) | (1 << (self::INSTANTLY - 641)) | (1 << (self::INSTEAD - 641)) | (1 << (self::INSTR2 - 641)) | (1 << (self::INSTR4 - 641)) | (1 << (self::INSTRB - 641)) | (1 << (self::INSTRC - 641)) | (1 << (self::INSTR - 641)) | (1 << (self::INTEGER - 641)) | (1 << (self::INTERLEAVED - 641)) | (1 << (self::INTERMEDIATE - 641)) | (1 << (self::INTERNAL_CONVERT - 641)) | (1 << (self::INTERNAL_USE - 641)) | (1 << (self::INTERPRETED - 641)) | (1 << (self::INTERVAL - 641)) | (1 << (self::INT - 641)) | (1 << (self::INVALIDATE - 641)) | (1 << (self::INVISIBLE - 641)) | (1 << (self::IN_XQUERY - 641)) | (1 << (self::ISOLATION - 641)) | (1 << (self::ISOLATION_LEVEL - 641)) | (1 << (self::ITERATE - 641)) | (1 << (self::ITERATION_NUMBER - 641)) | (1 << (self::JAVA - 641)) | (1 << (self::JOB - 641)) | (1 << (self::JOIN - 641)) | (1 << (self::JSON_ARRAYAGG - 641)) | (1 << (self::JSON_ARRAY - 641)))) !== 0) || (((($_la - 705)) & ~0x3f) === 0 && ((1 << ($_la - 705)) & ((1 << (self::JSON_EQUAL - 705)) | (1 << (self::JSON_EXISTS2 - 705)) | (1 << (self::JSON_EXISTS - 705)) | (1 << (self::JSONGET - 705)) | (1 << (self::JSON - 705)) | (1 << (self::JSON_OBJECTAGG - 705)) | (1 << (self::JSON_OBJECT - 705)) | (1 << (self::JSONPARSE - 705)) | (1 << (self::JSON_QUERY - 705)) | (1 << (self::JSON_SERIALIZE - 705)) | (1 << (self::JSON_TABLE - 705)) | (1 << (self::JSON_TEXTCONTAINS2 - 705)) | (1 << (self::JSON_TEXTCONTAINS - 705)) | (1 << (self::JSON_VALUE - 705)) | (1 << (self::KEEP_DUPLICATES - 705)) | (1 << (self::KEEP - 705)) | (1 << (self::KERBEROS - 705)) | (1 << (self::KEY - 705)) | (1 << (self::KEY_LENGTH - 705)) | (1 << (self::KEYSIZE - 705)) | (1 << (self::KEYS - 705)) | (1 << (self::KEYSTORE - 705)) | (1 << (self::KILL - 705)) | (1 << (self::LABEL - 705)) | (1 << (self::LANGUAGE - 705)) | (1 << (self::LAST_DAY - 705)) | (1 << (self::LAST - 705)) | (1 << (self::LAST_VALUE - 705)) | (1 << (self::LATERAL - 705)) | (1 << (self::LAX - 705)) | (1 << (self::LAYER - 705)) | (1 << (self::LDAP_REGISTRATION_ENABLED - 705)) | (1 << (self::LDAP_REGISTRATION - 705)) | (1 << (self::LDAP_REG_SYNC_INTERVAL - 705)) | (1 << (self::LEADING - 705)) | (1 << (self::LEFT - 705)) | (1 << (self::LENGTH2 - 705)) | (1 << (self::LENGTH4 - 705)) | (1 << (self::LENGTHB - 705)) | (1 << (self::LENGTHC - 705)) | (1 << (self::LENGTH - 705)) | (1 << (self::LESS - 705)) | (1 << (self::LEVEL - 705)) | (1 << (self::LEVELS - 705)) | (1 << (self::LIBRARY - 705)) | (1 << (self::LIFECYCLE - 705)) | (1 << (self::LIFE - 705)) | (1 << (self::LIFETIME - 705)) | (1 << (self::LIKE2 - 705)) | (1 << (self::LIKE4 - 705)) | (1 << (self::LIKEC - 705)) | (1 << (self::LIKE_EXPAND - 705)) | (1 << (self::LIMIT - 705)) | (1 << (self::LINEAR - 705)) | (1 << (self::LINK - 705)) | (1 << (self::LIST - 705)) | (1 << (self::LN - 705)) | (1 << (self::LNNVL - 705)) | (1 << (self::LOAD - 705)) | (1 << (self::LOB - 705)) | (1 << (self::LOBNVL - 705)) | (1 << (self::LOBS - 705)) | (1 << (self::LOCAL_INDEXES - 705)))) !== 0) || (((($_la - 769)) & ~0x3f) === 0 && ((1 << ($_la - 769)) & ((1 << (self::LOCAL - 769)) | (1 << (self::LOCALTIME - 769)) | (1 << (self::LOCALTIMESTAMP - 769)) | (1 << (self::LOCATION - 769)) | (1 << (self::LOCATOR - 769)) | (1 << (self::LOCKED - 769)) | (1 << (self::LOCKING - 769)) | (1 << (self::LOGFILE - 769)) | (1 << (self::LOGFILES - 769)) | (1 << (self::LOGGING - 769)) | (1 << (self::LOGICAL - 769)) | (1 << (self::LOGICAL_READS_PER_CALL - 769)) | (1 << (self::LOGICAL_READS_PER_SESSION - 769)) | (1 << (self::LOG - 769)) | (1 << (self::LOGMINING - 769)) | (1 << (self::LOGOFF - 769)) | (1 << (self::LOGON - 769)) | (1 << (self::LOG_READ_ONLY_VIOLATIONS - 769)) | (1 << (self::LONG - 769)) | (1 << (self::LOOP - 769)) | (1 << (self::LOWER - 769)) | (1 << (self::LOW - 769)) | (1 << (self::LPAD - 769)) | (1 << (self::LTRIM - 769)) | (1 << (self::MAIN - 769)) | (1 << (self::MAKE_REF - 769)) | (1 << (self::MANAGED - 769)) | (1 << (self::MANAGE - 769)) | (1 << (self::MANAGEMENT - 769)) | (1 << (self::MANAGER - 769)) | (1 << (self::MANUAL - 769)) | (1 << (self::MAP - 769)) | (1 << (self::MAPPING - 769)) | (1 << (self::MASTER - 769)) | (1 << (self::MATCHED - 769)) | (1 << (self::MATCHES - 769)) | (1 << (self::MATCH - 769)) | (1 << (self::MATCH_NUMBER - 769)) | (1 << (self::MATCH_RECOGNIZE - 769)) | (1 << (self::MATERIALIZED - 769)) | (1 << (self::MATERIALIZE - 769)) | (1 << (self::MAXARCHLOGS - 769)) | (1 << (self::MAXDATAFILES - 769)) | (1 << (self::MAXEXTENTS - 769)) | (1 << (self::MAXIMIZE - 769)) | (1 << (self::MAXINSTANCES - 769)) | (1 << (self::MAXLOGFILES - 769)) | (1 << (self::MAXLOGHISTORY - 769)) | (1 << (self::MAXLOGMEMBERS - 769)) | (1 << (self::MAX_SHARED_TEMP_SIZE - 769)) | (1 << (self::MAXSIZE - 769)) | (1 << (self::MAXTRANS - 769)) | (1 << (self::MAXVALUE - 769)) | (1 << (self::MEASURE - 769)) | (1 << (self::MEASURES - 769)) | (1 << (self::MEDIUM - 769)) | (1 << (self::MEMBER - 769)) | (1 << (self::MEMCOMPRESS - 769)) | (1 << (self::MEMORY - 769)) | (1 << (self::MERGEACTIONS - 769)) | (1 << (self::MERGE_AJ - 769)) | (1 << (self::MERGE_CONST_ON - 769)) | (1 << (self::MERGE - 769)))) !== 0) || (((($_la - 833)) & ~0x3f) === 0 && ((1 << ($_la - 833)) & ((1 << (self::MERGE_SJ - 833)) | (1 << (self::METADATA - 833)) | (1 << (self::METHOD - 833)) | (1 << (self::MIGRATE - 833)) | (1 << (self::MIGRATION - 833)) | (1 << (self::MINEXTENTS - 833)) | (1 << (self::MINIMIZE - 833)) | (1 << (self::MINIMUM - 833)) | (1 << (self::MINING - 833)) | (1 << (self::MINUS_NULL - 833)) | (1 << (self::MINUTE - 833)) | (1 << (self::MINVALUE - 833)) | (1 << (self::MIRRORCOLD - 833)) | (1 << (self::MIRRORHOT - 833)) | (1 << (self::MIRROR - 833)) | (1 << (self::MLSLABEL - 833)) | (1 << (self::MODEL_COMPILE_SUBQUERY - 833)) | (1 << (self::MODEL_DONTVERIFY_UNIQUENESS - 833)) | (1 << (self::MODEL_DYNAMIC_SUBQUERY - 833)) | (1 << (self::MODEL_MIN_ANALYSIS - 833)) | (1 << (self::MODEL - 833)) | (1 << (self::MODEL_NB - 833)) | (1 << (self::MODEL_NO_ANALYSIS - 833)) | (1 << (self::MODEL_PBY - 833)) | (1 << (self::MODEL_PUSH_REF - 833)) | (1 << (self::MODEL_SV - 833)) | (1 << (self::MODIFICATION - 833)) | (1 << (self::MODIFY_COLUMN_TYPE - 833)) | (1 << (self::MODIFY - 833)) | (1 << (self::MOD - 833)) | (1 << (self::MODULE - 833)) | (1 << (self::MONITORING - 833)) | (1 << (self::MONITOR - 833)) | (1 << (self::MONTH - 833)) | (1 << (self::MONTHS_BETWEEN - 833)) | (1 << (self::MONTHS - 833)) | (1 << (self::MOUNT - 833)) | (1 << (self::MOUNTPATH - 833)) | (1 << (self::MOVEMENT - 833)) | (1 << (self::MOVE - 833)) | (1 << (self::MULTIDIMENSIONAL - 833)) | (1 << (self::MULTISET - 833)) | (1 << (self::MV_MERGE - 833)) | (1 << (self::NAMED - 833)) | (1 << (self::NAME - 833)) | (1 << (self::NAMESPACE - 833)) | (1 << (self::NAN - 833)) | (1 << (self::NANVL - 833)) | (1 << (self::NATIONAL - 833)) | (1 << (self::NATIVE_FULL_OUTER_JOIN - 833)) | (1 << (self::NATIVE - 833)) | (1 << (self::NATURAL - 833)) | (1 << (self::NATURALN - 833)) | (1 << (self::NAV - 833)) | (1 << (self::NCHAR_CS - 833)) | (1 << (self::NCHAR - 833)) | (1 << (self::NCHR - 833)) | (1 << (self::NCLOB - 833)) | (1 << (self::NEEDED - 833)) | (1 << (self::NEG - 833)) | (1 << (self::NESTED - 833)) | (1 << (self::NESTED_TABLE_FAST_INSERT - 833)))) !== 0) || (((($_la - 897)) & ~0x3f) === 0 && ((1 << ($_la - 897)) & ((1 << (self::NESTED_TABLE_GET_REFS - 897)) | (1 << (self::NESTED_TABLE_ID - 897)) | (1 << (self::NESTED_TABLE_SET_REFS - 897)) | (1 << (self::NESTED_TABLE_SET_SETID - 897)) | (1 << (self::NETWORK - 897)) | (1 << (self::NEVER - 897)) | (1 << (self::NEW - 897)) | (1 << (self::NEW_TIME - 897)) | (1 << (self::NEXT_DAY - 897)) | (1 << (self::NEXT - 897)) | (1 << (self::NL_AJ - 897)) | (1 << (self::NLJ_BATCHING - 897)) | (1 << (self::NLJ_INDEX_FILTER - 897)) | (1 << (self::NLJ_INDEX_SCAN - 897)) | (1 << (self::NLJ_PREFETCH - 897)) | (1 << (self::NLS_CALENDAR - 897)) | (1 << (self::NLS_CHARACTERSET - 897)) | (1 << (self::NLS_CHARSET_DECL_LEN - 897)) | (1 << (self::NLS_CHARSET_ID - 897)) | (1 << (self::NLS_CHARSET_NAME - 897)) | (1 << (self::NLS_COMP - 897)) | (1 << (self::NLS_CURRENCY - 897)) | (1 << (self::NLS_DATE_FORMAT - 897)) | (1 << (self::NLS_DATE_LANGUAGE - 897)) | (1 << (self::NLS_INITCAP - 897)) | (1 << (self::NLS_ISO_CURRENCY - 897)) | (1 << (self::NL_SJ - 897)) | (1 << (self::NLS_LANG - 897)) | (1 << (self::NLS_LANGUAGE - 897)) | (1 << (self::NLS_LENGTH_SEMANTICS - 897)) | (1 << (self::NLS_LOWER - 897)) | (1 << (self::NLS_NCHAR_CONV_EXCP - 897)) | (1 << (self::NLS_NUMERIC_CHARACTERS - 897)) | (1 << (self::NLS_SORT - 897)) | (1 << (self::NLSSORT - 897)) | (1 << (self::NLS_SPECIAL_CHARS - 897)) | (1 << (self::NLS_TERRITORY - 897)) | (1 << (self::NLS_UPPER - 897)) | (1 << (self::NO_ACCESS - 897)) | (1 << (self::NO_ADAPTIVE_PLAN - 897)) | (1 << (self::NO_ANSI_REARCH - 897)) | (1 << (self::NOAPPEND - 897)) | (1 << (self::NOARCHIVELOG - 897)) | (1 << (self::NOAUDIT - 897)) | (1 << (self::NO_AUTO_REOPTIMIZE - 897)) | (1 << (self::NO_BASETABLE_MULTIMV_REWRITE - 897)) | (1 << (self::NO_BATCH_TABLE_ACCESS_BY_ROWID - 897)) | (1 << (self::NO_BIND_AWARE - 897)) | (1 << (self::NO_BUFFER - 897)) | (1 << (self::NOCACHE - 897)) | (1 << (self::NO_CARTESIAN - 897)) | (1 << (self::NO_CHECK_ACL_REWRITE - 897)) | (1 << (self::NO_CLUSTER_BY_ROWID - 897)) | (1 << (self::NO_CLUSTERING - 897)) | (1 << (self::NO_COALESCE_SQ - 897)) | (1 << (self::NO_COMMON_DATA - 897)) | (1 << (self::NO_CONNECT_BY_CB_WHR_ONLY - 897)) | (1 << (self::NO_CONNECT_BY_COMBINE_SW - 897)) | (1 << (self::NO_CONNECT_BY_COST_BASED - 897)) | (1 << (self::NO_CONNECT_BY_ELIM_DUPS - 897)) | (1 << (self::NO_CONNECT_BY_FILTERING - 897)) | (1 << (self::NOCOPY - 897)) | (1 << (self::NO_COST_XML_QUERY_REWRITE - 897)))) !== 0) || (((($_la - 961)) & ~0x3f) === 0 && ((1 << ($_la - 961)) & ((1 << (self::NO_CPU_COSTING - 961)) | (1 << (self::NOCPU_COSTING - 961)) | (1 << (self::NOCYCLE - 961)) | (1 << (self::NO_DATA_SECURITY_REWRITE - 961)) | (1 << (self::NO_DECORRELATE - 961)) | (1 << (self::NODELAY - 961)) | (1 << (self::NO_DOMAIN_INDEX_FILTER - 961)) | (1 << (self::NO_DST_UPGRADE_INSERT_CONV - 961)) | (1 << (self::NO_ELIM_GROUPBY - 961)) | (1 << (self::NO_ELIMINATE_JOIN - 961)) | (1 << (self::NO_ELIMINATE_OBY - 961)) | (1 << (self::NO_ELIMINATE_OUTER_JOIN - 961)) | (1 << (self::NOENTITYESCAPING - 961)) | (1 << (self::NO_EXPAND_GSET_TO_UNION - 961)) | (1 << (self::NO_EXPAND - 961)) | (1 << (self::NO_EXPAND_TABLE - 961)) | (1 << (self::NO_FACT - 961)) | (1 << (self::NO_FACTORIZE_JOIN - 961)) | (1 << (self::NO_FILTERING - 961)) | (1 << (self::NOFORCE - 961)) | (1 << (self::NO_FULL_OUTER_JOIN_TO_OUTER - 961)) | (1 << (self::NO_GATHER_OPTIMIZER_STATISTICS - 961)) | (1 << (self::NO_GBY_PUSHDOWN - 961)) | (1 << (self::NOGUARANTEE - 961)) | (1 << (self::NO_INDEX_FFS - 961)) | (1 << (self::NO_INDEX - 961)) | (1 << (self::NO_INDEX_SS - 961)) | (1 << (self::NO_INMEMORY - 961)) | (1 << (self::NO_INMEMORY_PRUNING - 961)) | (1 << (self::NOKEEP - 961)) | (1 << (self::NO_LOAD - 961)) | (1 << (self::NOLOCAL - 961)) | (1 << (self::NOLOGGING - 961)) | (1 << (self::NOMAPPING - 961)) | (1 << (self::NOMAXVALUE - 961)) | (1 << (self::NO_MERGE - 961)) | (1 << (self::NOMINIMIZE - 961)) | (1 << (self::NOMINVALUE - 961)) | (1 << (self::NO_MODEL_PUSH_REF - 961)) | (1 << (self::NO_MONITORING - 961)) | (1 << (self::NOMONITORING - 961)) | (1 << (self::NO_MONITOR - 961)) | (1 << (self::NO_MULTIMV_REWRITE - 961)) | (1 << (self::NO_NATIVE_FULL_OUTER_JOIN - 961)) | (1 << (self::NONBLOCKING - 961)) | (1 << (self::NONEDITIONABLE - 961)) | (1 << (self::NONE - 961)) | (1 << (self::NO_NLJ_BATCHING - 961)) | (1 << (self::NO_NLJ_PREFETCH - 961)) | (1 << (self::NO - 961)) | (1 << (self::NONSCHEMA - 961)) | (1 << (self::NO_OBJECT_LINK - 961)) | (1 << (self::NOORDER - 961)) | (1 << (self::NO_ORDER_ROLLUPS - 961)) | (1 << (self::NO_OUTER_JOIN_TO_ANTI - 961)) | (1 << (self::NO_OUTER_JOIN_TO_INNER - 961)) | (1 << (self::NOOVERRIDE - 961)) | (1 << (self::NO_PARALLEL_INDEX - 961)) | (1 << (self::NOPARALLEL_INDEX - 961)) | (1 << (self::NO_PARALLEL - 961)) | (1 << (self::NOPARALLEL - 961)) | (1 << (self::NO_PARTIAL_COMMIT - 961)) | (1 << (self::NO_PARTIAL_JOIN - 961)) | (1 << (self::NO_PARTIAL_ROLLUP_PUSHDOWN - 961)))) !== 0) || (((($_la - 1025)) & ~0x3f) === 0 && ((1 << ($_la - 1025)) & ((1 << (self::NOPARTITION - 1025)) | (1 << (self::NO_PLACE_DISTINCT - 1025)) | (1 << (self::NO_PLACE_GROUP_BY - 1025)) | (1 << (self::NO_PQ_CONCURRENT_UNION - 1025)) | (1 << (self::NO_PQ_MAP - 1025)) | (1 << (self::NO_PQ_REPLICATE - 1025)) | (1 << (self::NO_PQ_SKEW - 1025)) | (1 << (self::NO_PRUNE_GSETS - 1025)) | (1 << (self::NO_PULL_PRED - 1025)) | (1 << (self::NO_PUSH_PRED - 1025)) | (1 << (self::NO_PUSH_SUBQ - 1025)) | (1 << (self::NO_PX_FAULT_TOLERANCE - 1025)) | (1 << (self::NO_PX_JOIN_FILTER - 1025)) | (1 << (self::NO_QKN_BUFF - 1025)) | (1 << (self::NO_QUERY_TRANSFORMATION - 1025)) | (1 << (self::NO_REF_CASCADE - 1025)) | (1 << (self::NORELOCATE - 1025)) | (1 << (self::NORELY - 1025)) | (1 << (self::NOREPAIR - 1025)) | (1 << (self::NOREPLAY - 1025)) | (1 << (self::NORESETLOGS - 1025)) | (1 << (self::NO_RESULT_CACHE - 1025)) | (1 << (self::NOREVERSE - 1025)) | (1 << (self::NO_REWRITE - 1025)) | (1 << (self::NOREWRITE - 1025)) | (1 << (self::NORMAL - 1025)) | (1 << (self::NO_ROOT_SW_FOR_LOCAL - 1025)) | (1 << (self::NOROWDEPENDENCIES - 1025)) | (1 << (self::NOSCHEMACHECK - 1025)) | (1 << (self::NOSEGMENT - 1025)) | (1 << (self::NO_SEMIJOIN - 1025)) | (1 << (self::NO_SEMI_TO_INNER - 1025)) | (1 << (self::NO_SET_TO_JOIN - 1025)) | (1 << (self::NOSORT - 1025)) | (1 << (self::NO_SQL_TRANSLATION - 1025)) | (1 << (self::NO_SQL_TUNE - 1025)) | (1 << (self::NO_STAR_TRANSFORMATION - 1025)) | (1 << (self::NO_STATEMENT_QUEUING - 1025)) | (1 << (self::NO_STATS_GSETS - 1025)) | (1 << (self::NOSTRICT - 1025)) | (1 << (self::NO_SUBQUERY_PRUNING - 1025)) | (1 << (self::NO_SUBSTRB_PAD - 1025)) | (1 << (self::NO_SWAP_JOIN_INPUTS - 1025)) | (1 << (self::NOSWITCH - 1025)) | (1 << (self::NO_TABLE_LOOKUP_BY_NL - 1025)) | (1 << (self::NO_TEMP_TABLE - 1025)) | (1 << (self::NOTHING - 1025)) | (1 << (self::NOTIFICATION - 1025)) | (1 << (self::NO_TRANSFORM_DISTINCT_AGG - 1025)) | (1 << (self::NO_UNNEST - 1025)) | (1 << (self::NO_USE_CUBE - 1025)) | (1 << (self::NO_USE_HASH_AGGREGATION - 1025)) | (1 << (self::NO_USE_HASH_GBY_FOR_PUSHDOWN - 1025)) | (1 << (self::NO_USE_HASH - 1025)) | (1 << (self::NO_USE_INVISIBLE_INDEXES - 1025)) | (1 << (self::NO_USE_MERGE - 1025)) | (1 << (self::NO_USE_NL - 1025)) | (1 << (self::NO_USE_VECTOR_AGGREGATION - 1025)) | (1 << (self::NOVALIDATE - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_DIMS - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_FACT - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM - 1025)))) !== 0) || (((($_la - 1089)) & ~0x3f) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::NO_XDB_FASTPATH_INSERT - 1089)) | (1 << (self::NO_XML_DML_REWRITE - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE_IN_SELECT - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE - 1089)) | (1 << (self::NO_XML_QUERY_REWRITE - 1089)) | (1 << (self::NO_ZONEMAP - 1089)) | (1 << (self::NTH_VALUE - 1089)) | (1 << (self::NULLIF - 1089)) | (1 << (self::NULLS - 1089)) | (1 << (self::NUMBER - 1089)) | (1 << (self::NUMERIC - 1089)) | (1 << (self::NUM_INDEX_KEYS - 1089)) | (1 << (self::NUMTODSINTERVAL - 1089)) | (1 << (self::NUMTOYMINTERVAL - 1089)) | (1 << (self::NVARCHAR2 - 1089)) | (1 << (self::NVL2 - 1089)) | (1 << (self::OBJECT2XML - 1089)) | (1 << (self::OBJECT - 1089)) | (1 << (self::OBJ_ID - 1089)) | (1 << (self::OBJNO - 1089)) | (1 << (self::OBJNO_REUSE - 1089)) | (1 << (self::OCCURENCES - 1089)) | (1 << (self::OFFLINE - 1089)) | (1 << (self::OFF - 1089)) | (1 << (self::OFFSET - 1089)) | (1 << (self::OIDINDEX - 1089)) | (1 << (self::OID - 1089)) | (1 << (self::OLAP - 1089)) | (1 << (self::OLD - 1089)) | (1 << (self::OLD_PUSH_PRED - 1089)) | (1 << (self::OLS - 1089)) | (1 << (self::OLTP - 1089)) | (1 << (self::OMIT - 1089)) | (1 << (self::ONE - 1089)) | (1 << (self::ONLINE - 1089)) | (1 << (self::ONLY - 1089)) | (1 << (self::OPAQUE - 1089)) | (1 << (self::OPAQUE_TRANSFORM - 1089)) | (1 << (self::OPAQUE_XCANONICAL - 1089)) | (1 << (self::OPCODE - 1089)) | (1 << (self::OPEN - 1089)) | (1 << (self::OPERATIONS - 1089)) | (1 << (self::OPERATOR - 1089)) | (1 << (self::OPT_ESTIMATE - 1089)) | (1 << (self::OPTIMAL - 1089)) | (1 << (self::OPTIMIZE - 1089)) | (1 << (self::OPTIMIZER_FEATURES_ENABLE - 1089)) | (1 << (self::OPTIMIZER_GOAL - 1089)) | (1 << (self::OPT_PARAM - 1089)) | (1 << (self::ORA_BRANCH - 1089)) | (1 << (self::ORA_CHECK_ACL - 1089)) | (1 << (self::ORA_CHECK_PRIVILEGE - 1089)) | (1 << (self::ORA_CLUSTERING - 1089)) | (1 << (self::ORADATA - 1089)) | (1 << (self::ORADEBUG - 1089)) | (1 << (self::ORA_DST_AFFECTED - 1089)) | (1 << (self::ORA_DST_CONVERT - 1089)) | (1 << (self::ORA_DST_ERROR - 1089)) | (1 << (self::ORA_GET_ACLIDS - 1089)))) !== 0) || (((($_la - 1153)) & ~0x3f) === 0 && ((1 << ($_la - 1153)) & ((1 << (self::ORA_GET_PRIVILEGES - 1153)) | (1 << (self::ORA_HASH - 1153)) | (1 << (self::ORA_INVOKING_USERID - 1153)) | (1 << (self::ORA_INVOKING_USER - 1153)) | (1 << (self::ORA_INVOKING_XS_USER_GUID - 1153)) | (1 << (self::ORA_INVOKING_XS_USER - 1153)) | (1 << (self::ORA_RAWCOMPARE - 1153)) | (1 << (self::ORA_RAWCONCAT - 1153)) | (1 << (self::ORA_ROWSCN - 1153)) | (1 << (self::ORA_ROWSCN_RAW - 1153)) | (1 << (self::ORA_ROWVERSION - 1153)) | (1 << (self::ORA_TABVERSION - 1153)) | (1 << (self::ORA_WRITE_TIME - 1153)) | (1 << (self::ORDERED - 1153)) | (1 << (self::ORDERED_PREDICATES - 1153)) | (1 << (self::ORDINALITY - 1153)) | (1 << (self::OR_EXPAND - 1153)) | (1 << (self::ORGANIZATION - 1153)) | (1 << (self::OR_PREDICATES - 1153)) | (1 << (self::OSERROR - 1153)) | (1 << (self::OTHER - 1153)) | (1 << (self::OUTER_JOIN_TO_ANTI - 1153)) | (1 << (self::OUTER_JOIN_TO_INNER - 1153)) | (1 << (self::OUTER - 1153)) | (1 << (self::OUTLINE_LEAF - 1153)) | (1 << (self::OUTLINE - 1153)) | (1 << (self::OUT_OF_LINE - 1153)) | (1 << (self::OUT - 1153)) | (1 << (self::OVERFLOW_NOMOVE - 1153)) | (1 << (self::OVERFLOW - 1153)) | (1 << (self::OVERLAPS - 1153)) | (1 << (self::OVER - 1153)) | (1 << (self::OVERRIDING - 1153)) | (1 << (self::OWNER - 1153)) | (1 << (self::OWNERSHIP - 1153)) | (1 << (self::OWN - 1153)) | (1 << (self::PACKAGE - 1153)) | (1 << (self::PACKAGES - 1153)) | (1 << (self::PARALLEL_ENABLE - 1153)) | (1 << (self::PARALLEL_INDEX - 1153)) | (1 << (self::PARALLEL - 1153)) | (1 << (self::PARAMETERS - 1153)) | (1 << (self::PARAM - 1153)) | (1 << (self::PARENT - 1153)) | (1 << (self::PARITY - 1153)) | (1 << (self::PARTIAL_JOIN - 1153)) | (1 << (self::PARTIALLY - 1153)) | (1 << (self::PARTIAL - 1153)) | (1 << (self::PARTIAL_ROLLUP_PUSHDOWN - 1153)) | (1 << (self::PARTITION_HASH - 1153)) | (1 << (self::PARTITION_LIST - 1153)) | (1 << (self::PARTITION - 1153)) | (1 << (self::PARTITION_RANGE - 1153)) | (1 << (self::PARTITIONS - 1153)) | (1 << (self::PARTNUMINST - 1153)) | (1 << (self::PASSING - 1153)) | (1 << (self::PASSWORD_GRACE_TIME - 1153)) | (1 << (self::PASSWORD_LIFE_TIME - 1153)) | (1 << (self::PASSWORD_LOCK_TIME - 1153)) | (1 << (self::PASSWORD - 1153)) | (1 << (self::PASSWORD_REUSE_MAX - 1153)))) !== 0) || (((($_la - 1217)) & ~0x3f) === 0 && ((1 << ($_la - 1217)) & ((1 << (self::PASSWORD_REUSE_TIME - 1217)) | (1 << (self::PASSWORD_VERIFY_FUNCTION - 1217)) | (1 << (self::PAST - 1217)) | (1 << (self::PATCH - 1217)) | (1 << (self::PATH - 1217)) | (1 << (self::PATH_PREFIX - 1217)) | (1 << (self::PATHS - 1217)) | (1 << (self::PATTERN - 1217)) | (1 << (self::PBL_HS_BEGIN - 1217)) | (1 << (self::PBL_HS_END - 1217)) | (1 << (self::PCTINCREASE - 1217)) | (1 << (self::PCTTHRESHOLD - 1217)) | (1 << (self::PCTUSED - 1217)) | (1 << (self::PCTVERSION - 1217)) | (1 << (self::PENDING - 1217)) | (1 << (self::PERCENT_KEYWORD - 1217)) | (1 << (self::PERCENT_RANKM - 1217)) | (1 << (self::PERFORMANCE - 1217)) | (1 << (self::PERIOD_KEYWORD - 1217)) | (1 << (self::PERMANENT - 1217)) | (1 << (self::PERMISSION - 1217)) | (1 << (self::PERMUTE - 1217)) | (1 << (self::PER - 1217)) | (1 << (self::PFILE - 1217)) | (1 << (self::PHYSICAL - 1217)) | (1 << (self::PIKEY - 1217)) | (1 << (self::PIPELINED - 1217)) | (1 << (self::PIV_GB - 1217)) | (1 << (self::PIVOT - 1217)) | (1 << (self::PIV_SSF - 1217)) | (1 << (self::PLACE_DISTINCT - 1217)) | (1 << (self::PLACE_GROUP_BY - 1217)) | (1 << (self::PLAN - 1217)) | (1 << (self::PLSCOPE_SETTINGS - 1217)) | (1 << (self::PLS_INTEGER - 1217)) | (1 << (self::PLSQL_CCFLAGS - 1217)) | (1 << (self::PLSQL_CODE_TYPE - 1217)) | (1 << (self::PLSQL_DEBUG - 1217)) | (1 << (self::PLSQL_OPTIMIZE_LEVEL - 1217)) | (1 << (self::PLSQL_WARNINGS - 1217)) | (1 << (self::PLUGGABLE - 1217)) | (1 << (self::POINT - 1217)) | (1 << (self::POLICY - 1217)) | (1 << (self::POOL_16K - 1217)) | (1 << (self::POOL_2K - 1217)) | (1 << (self::POOL_32K - 1217)) | (1 << (self::POOL_4K - 1217)) | (1 << (self::POOL_8K - 1217)) | (1 << (self::POSITIVEN - 1217)) | (1 << (self::POSITIVE - 1217)) | (1 << (self::POST_TRANSACTION - 1217)) | (1 << (self::POWERMULTISET_BY_CARDINALITY - 1217)) | (1 << (self::POWERMULTISET - 1217)) | (1 << (self::POWER - 1217)) | (1 << (self::PQ_CONCURRENT_UNION - 1217)) | (1 << (self::PQ_DISTRIBUTE - 1217)))) !== 0) || (((($_la - 1281)) & ~0x3f) === 0 && ((1 << ($_la - 1281)) & ((1 << (self::PQ_DISTRIBUTE_WINDOW - 1281)) | (1 << (self::PQ_FILTER - 1281)) | (1 << (self::PQ_MAP - 1281)) | (1 << (self::PQ_NOMAP - 1281)) | (1 << (self::PQ_REPLICATE - 1281)) | (1 << (self::PQ_SKEW - 1281)) | (1 << (self::PRAGMA - 1281)) | (1 << (self::PREBUILT - 1281)) | (1 << (self::PRECEDES - 1281)) | (1 << (self::PRECEDING - 1281)) | (1 << (self::PRECISION - 1281)) | (1 << (self::PRECOMPUTE_SUBQUERY - 1281)) | (1 << (self::PREDICATE_REORDERS - 1281)) | (1 << (self::PRELOAD - 1281)) | (1 << (self::PREPARE - 1281)) | (1 << (self::PRESENTNNV - 1281)) | (1 << (self::PRESENT - 1281)) | (1 << (self::PRESENTV - 1281)) | (1 << (self::PRESERVE_OID - 1281)) | (1 << (self::PRESERVE - 1281)) | (1 << (self::PRETTY - 1281)) | (1 << (self::PREVIOUS - 1281)) | (1 << (self::PREV - 1281)) | (1 << (self::PRIMARY - 1281)) | (1 << (self::PRINTBLOBTOCLOB - 1281)) | (1 << (self::PRIORITY - 1281)) | (1 << (self::PRIVATE - 1281)) | (1 << (self::PRIVATE_SGA - 1281)) | (1 << (self::PRIVILEGED - 1281)) | (1 << (self::PRIVILEGE - 1281)) | (1 << (self::PRIVILEGES - 1281)) | (1 << (self::PROCEDURAL - 1281)) | (1 << (self::PROCEDURE - 1281)) | (1 << (self::PROCESS - 1281)) | (1 << (self::PROFILE - 1281)) | (1 << (self::PROGRAM - 1281)) | (1 << (self::PROJECT - 1281)) | (1 << (self::PROPAGATE - 1281)) | (1 << (self::PROTECTED - 1281)) | (1 << (self::PROTECTION - 1281)) | (1 << (self::PROXY - 1281)) | (1 << (self::PRUNING - 1281)) | (1 << (self::PULL_PRED - 1281)) | (1 << (self::PURGE - 1281)) | (1 << (self::PUSH_PRED - 1281)) | (1 << (self::PUSH_SUBQ - 1281)) | (1 << (self::PX_FAULT_TOLERANCE - 1281)) | (1 << (self::PX_GRANULE - 1281)) | (1 << (self::PX_JOIN_FILTER - 1281)) | (1 << (self::QB_NAME - 1281)) | (1 << (self::QUERY_BLOCK - 1281)) | (1 << (self::QUERY - 1281)) | (1 << (self::QUEUE_CURR - 1281)) | (1 << (self::QUEUE - 1281)) | (1 << (self::QUEUE_ROWP - 1281)) | (1 << (self::QUIESCE - 1281)) | (1 << (self::QUORUM - 1281)) | (1 << (self::QUOTA - 1281)) | (1 << (self::RAISE - 1281)) | (1 << (self::RANDOM_LOCAL - 1281)) | (1 << (self::RANDOM - 1281)) | (1 << (self::RANGE - 1281)))) !== 0) || (((($_la - 1345)) & ~0x3f) === 0 && ((1 << ($_la - 1345)) & ((1 << (self::RANKM - 1345)) | (1 << (self::RAPIDLY - 1345)) | (1 << (self::RAW - 1345)) | (1 << (self::RAWTOHEX - 1345)) | (1 << (self::RAWTONHEX - 1345)) | (1 << (self::RBA - 1345)) | (1 << (self::RBO_OUTLINE - 1345)) | (1 << (self::RDBA - 1345)) | (1 << (self::READ - 1345)) | (1 << (self::READS - 1345)) | (1 << (self::REALM - 1345)) | (1 << (self::REAL - 1345)) | (1 << (self::REBALANCE - 1345)) | (1 << (self::REBUILD - 1345)) | (1 << (self::RECORD - 1345)) | (1 << (self::RECORDS_PER_BLOCK - 1345)) | (1 << (self::RECOVERABLE - 1345)) | (1 << (self::RECOVER - 1345)) | (1 << (self::RECOVERY - 1345)) | (1 << (self::RECYCLEBIN - 1345)) | (1 << (self::RECYCLE - 1345)) | (1 << (self::REDACTION - 1345)) | (1 << (self::REDEFINE - 1345)) | (1 << (self::REDO - 1345)) | (1 << (self::REDUCED - 1345)) | (1 << (self::REDUNDANCY - 1345)) | (1 << (self::REF_CASCADE_CURSOR - 1345)) | (1 << (self::REFERENCED - 1345)) | (1 << (self::REFERENCE - 1345)) | (1 << (self::REFERENCES - 1345)) | (1 << (self::REFERENCING - 1345)) | (1 << (self::REF - 1345)) | (1 << (self::REFRESH - 1345)) | (1 << (self::REFTOHEX - 1345)) | (1 << (self::REGEXP_COUNT - 1345)) | (1 << (self::REGEXP_INSTR - 1345)) | (1 << (self::REGEXP_LIKE - 1345)) | (1 << (self::REGEXP_REPLACE - 1345)) | (1 << (self::REGEXP_SUBSTR - 1345)) | (1 << (self::REGISTER - 1345)) | (1 << (self::REGR_AVGX - 1345)) | (1 << (self::REGR_AVGY - 1345)) | (1 << (self::REGR_COUNT - 1345)) | (1 << (self::REGR_INTERCEPT - 1345)) | (1 << (self::REGR_R2 - 1345)) | (1 << (self::REGR_SLOPE - 1345)) | (1 << (self::REGR_SXX - 1345)) | (1 << (self::REGR_SXY - 1345)) | (1 << (self::REGR_SYY - 1345)) | (1 << (self::REGULAR - 1345)) | (1 << (self::REJECT - 1345)) | (1 << (self::REKEY - 1345)) | (1 << (self::RELATIONAL - 1345)) | (1 << (self::RELOCATE - 1345)) | (1 << (self::RELY - 1345)) | (1 << (self::REMAINDER - 1345)) | (1 << (self::REMOTE_MAPPED - 1345)) | (1 << (self::REMOVE - 1345)) | (1 << (self::RENAME - 1345)) | (1 << (self::REPAIR - 1345)) | (1 << (self::REPEAT - 1345)) | (1 << (self::REPLACE - 1345)) | (1 << (self::REPLICATION - 1345)))) !== 0) || (((($_la - 1409)) & ~0x3f) === 0 && ((1 << ($_la - 1409)) & ((1 << (self::REQUIRED - 1409)) | (1 << (self::RESETLOGS - 1409)) | (1 << (self::RESET - 1409)) | (1 << (self::RESIZE - 1409)) | (1 << (self::RESOLVE - 1409)) | (1 << (self::RESOLVER - 1409)) | (1 << (self::RESPECT - 1409)) | (1 << (self::RESTART - 1409)) | (1 << (self::RESTORE_AS_INTERVALS - 1409)) | (1 << (self::RESTORE - 1409)) | (1 << (self::RESTRICT_ALL_REF_CONS - 1409)) | (1 << (self::RESTRICTED - 1409)) | (1 << (self::RESTRICT_REFERENCES - 1409)) | (1 << (self::RESTRICT - 1409)) | (1 << (self::RESULT_CACHE - 1409)) | (1 << (self::RESULT - 1409)) | (1 << (self::RESUMABLE - 1409)) | (1 << (self::RESUME - 1409)) | (1 << (self::RETENTION - 1409)) | (1 << (self::RETRY_ON_ROW_CHANGE - 1409)) | (1 << (self::RETURNING - 1409)) | (1 << (self::RETURN - 1409)) | (1 << (self::REUSE - 1409)) | (1 << (self::REVERSE - 1409)) | (1 << (self::REWRITE_OR_ERROR - 1409)) | (1 << (self::REWRITE - 1409)) | (1 << (self::RIGHT - 1409)) | (1 << (self::ROLE - 1409)) | (1 << (self::ROLESET - 1409)) | (1 << (self::ROLES - 1409)) | (1 << (self::ROLLBACK - 1409)) | (1 << (self::ROLLING - 1409)) | (1 << (self::ROLLUP - 1409)) | (1 << (self::ROWDEPENDENCIES - 1409)) | (1 << (self::ROWID_MAPPING_TABLE - 1409)) | (1 << (self::ROWID - 1409)) | (1 << (self::ROWIDTOCHAR - 1409)) | (1 << (self::ROWIDTONCHAR - 1409)) | (1 << (self::ROW_LENGTH - 1409)) | (1 << (self::ROWNUM - 1409)) | (1 << (self::ROW - 1409)) | (1 << (self::ROWS - 1409)) | (1 << (self::RPAD - 1409)) | (1 << (self::RTRIM - 1409)) | (1 << (self::RULE - 1409)) | (1 << (self::RULES - 1409)) | (1 << (self::RUNNING - 1409)) | (1 << (self::SALT - 1409)) | (1 << (self::SAMPLE - 1409)) | (1 << (self::SAVE_AS_INTERVALS - 1409)) | (1 << (self::SAVEPOINT - 1409)) | (1 << (self::SAVE - 1409)) | (1 << (self::SB4 - 1409)) | (1 << (self::SCALE_ROWS - 1409)) | (1 << (self::SCALE - 1409)) | (1 << (self::SCAN_INSTANCES - 1409)) | (1 << (self::SCAN - 1409)) | (1 << (self::SCHEDULER - 1409)) | (1 << (self::SCHEMACHECK - 1409)) | (1 << (self::SCHEMA - 1409)) | (1 << (self::SCN_ASCENDING - 1409)) | (1 << (self::SCN - 1409)))) !== 0) || (((($_la - 1473)) & ~0x3f) === 0 && ((1 << ($_la - 1473)) & ((1 << (self::SCOPE - 1473)) | (1 << (self::SCRUB - 1473)) | (1 << (self::SD_ALL - 1473)) | (1 << (self::SD_INHIBIT - 1473)) | (1 << (self::SDO_GEOM_MBR - 1473)) | (1 << (self::SD_SHOW - 1473)) | (1 << (self::SEARCH - 1473)) | (1 << (self::SECOND - 1473)) | (1 << (self::SECRET - 1473)) | (1 << (self::SECUREFILE_DBA - 1473)) | (1 << (self::SECUREFILE - 1473)) | (1 << (self::SECURITY - 1473)) | (1 << (self::SEED - 1473)) | (1 << (self::SEG_BLOCK - 1473)) | (1 << (self::SEG_FILE - 1473)) | (1 << (self::SEGMENT - 1473)) | (1 << (self::SELECTIVITY - 1473)) | (1 << (self::SELF - 1473)) | (1 << (self::SEMIJOIN_DRIVER - 1473)) | (1 << (self::SEMIJOIN - 1473)) | (1 << (self::SEMI_TO_INNER - 1473)) | (1 << (self::SEQUENCED - 1473)) | (1 << (self::SEQUENCE - 1473)) | (1 << (self::SEQUENTIAL - 1473)) | (1 << (self::SERIALIZABLE - 1473)) | (1 << (self::SERIALLY_REUSABLE - 1473)) | (1 << (self::SERIAL - 1473)) | (1 << (self::SERVERERROR - 1473)) | (1 << (self::SERVICE_NAME_CONVERT - 1473)) | (1 << (self::SERVICES - 1473)) | (1 << (self::SESSION_CACHED_CURSORS - 1473)) | (1 << (self::SESSION - 1473)) | (1 << (self::SESSIONS_PER_USER - 1473)) | (1 << (self::SESSIONTIMEZONE - 1473)) | (1 << (self::SESSIONTZNAME - 1473)) | (1 << (self::SET - 1473)) | (1 << (self::SETS - 1473)) | (1 << (self::SETTINGS - 1473)) | (1 << (self::SET_TO_JOIN - 1473)) | (1 << (self::SEVERE - 1473)) | (1 << (self::SHARED_POOL - 1473)) | (1 << (self::SHARED - 1473)) | (1 << (self::SHARING - 1473)) | (1 << (self::SHELFLIFE - 1473)) | (1 << (self::SHOW - 1473)) | (1 << (self::SHRINK - 1473)) | (1 << (self::SHUTDOWN - 1473)) | (1 << (self::SIBLINGS - 1473)) | (1 << (self::SID - 1473)) | (1 << (self::SIGNAL_COMPONENT - 1473)) | (1 << (self::SIGNAL_FUNCTION - 1473)) | (1 << (self::SIGN - 1473)) | (1 << (self::SIGNTYPE - 1473)) | (1 << (self::SIMPLE_INTEGER - 1473)) | (1 << (self::SIMPLE - 1473)) | (1 << (self::SINGLE - 1473)) | (1 << (self::SINGLETASK - 1473)) | (1 << (self::SINH - 1473)) | (1 << (self::SIN - 1473)) | (1 << (self::SKIP_EXT_OPTIMIZER - 1473)))) !== 0) || (((($_la - 1537)) & ~0x3f) === 0 && ((1 << ($_la - 1537)) & ((1 << (self::SKIP_ - 1537)) | (1 << (self::SKIP_UNQ_UNUSABLE_IDX - 1537)) | (1 << (self::SKIP_UNUSABLE_INDEXES - 1537)) | (1 << (self::SMALLFILE - 1537)) | (1 << (self::SMALLINT - 1537)) | (1 << (self::SNAPSHOT - 1537)) | (1 << (self::SOME - 1537)) | (1 << (self::SORT - 1537)) | (1 << (self::SOUNDEX - 1537)) | (1 << (self::SOURCE_FILE_DIRECTORY - 1537)) | (1 << (self::SOURCE_FILE_NAME_CONVERT - 1537)) | (1 << (self::SOURCE - 1537)) | (1 << (self::SPACE_KEYWORD - 1537)) | (1 << (self::SPECIFICATION - 1537)) | (1 << (self::SPFILE - 1537)) | (1 << (self::SPLIT - 1537)) | (1 << (self::SPREADSHEET - 1537)) | (1 << (self::SQLDATA - 1537)) | (1 << (self::SQLERROR - 1537)) | (1 << (self::SQLLDR - 1537)) | (1 << (self::SQL - 1537)) | (1 << (self::SQL_TRACE - 1537)) | (1 << (self::SQL_TRANSLATION_PROFILE - 1537)) | (1 << (self::SQRT - 1537)) | (1 << (self::STALE - 1537)) | (1 << (self::STANDALONE - 1537)) | (1 << (self::STANDARD_HASH - 1537)) | (1 << (self::STANDBY_MAX_DATA_DELAY - 1537)) | (1 << (self::STANDBYS - 1537)) | (1 << (self::STANDBY - 1537)) | (1 << (self::STAR - 1537)) | (1 << (self::STAR_TRANSFORMATION - 1537)) | (1 << (self::STARTUP - 1537)) | (1 << (self::STATEMENT_ID - 1537)) | (1 << (self::STATEMENT_QUEUING - 1537)) | (1 << (self::STATEMENTS - 1537)) | (1 << (self::STATEMENT - 1537)) | (1 << (self::STATE - 1537)) | (1 << (self::STATIC - 1537)) | (1 << (self::STATISTICS - 1537)) | (1 << (self::STATS_BINOMIAL_TEST - 1537)) | (1 << (self::STATS_CROSSTAB - 1537)) | (1 << (self::STATS_F_TEST - 1537)) | (1 << (self::STATS_KS_TEST - 1537)) | (1 << (self::STATS_MODE - 1537)) | (1 << (self::STATS_MW_TEST - 1537)) | (1 << (self::STATS_ONE_WAY_ANOVA - 1537)) | (1 << (self::STATS_T_TEST_INDEP - 1537)) | (1 << (self::STATS_T_TEST_INDEPU - 1537)) | (1 << (self::STATS_T_TEST_ONE - 1537)) | (1 << (self::STATS_T_TEST_PAIRED - 1537)) | (1 << (self::STATS_WSR_TEST - 1537)) | (1 << (self::STDDEV_POP - 1537)) | (1 << (self::STDDEV_SAMP - 1537)) | (1 << (self::STOP - 1537)) | (1 << (self::STORAGE - 1537)) | (1 << (self::STORE - 1537)) | (1 << (self::STREAMS - 1537)) | (1 << (self::STREAM - 1537)) | (1 << (self::STRICT - 1537)) | (1 << (self::STRING - 1537)) | (1 << (self::STRIPE_COLUMNS - 1537)) | (1 << (self::STRIPE_WIDTH - 1537)))) !== 0) || (((($_la - 1601)) & ~0x3f) === 0 && ((1 << ($_la - 1601)) & ((1 << (self::STRIP - 1601)) | (1 << (self::STRUCTURE - 1601)) | (1 << (self::SUBMULTISET - 1601)) | (1 << (self::SUBPARTITION_REL - 1601)) | (1 << (self::SUBPARTITIONS - 1601)) | (1 << (self::SUBPARTITION - 1601)) | (1 << (self::SUBQUERIES - 1601)) | (1 << (self::SUBQUERY_PRUNING - 1601)) | (1 << (self::SUBSCRIBE - 1601)) | (1 << (self::SUBSET - 1601)) | (1 << (self::SUBSTITUTABLE - 1601)) | (1 << (self::SUBSTR2 - 1601)) | (1 << (self::SUBSTR4 - 1601)) | (1 << (self::SUBSTRB - 1601)) | (1 << (self::SUBSTRC - 1601)) | (1 << (self::SUBTYPE - 1601)) | (1 << (self::SUCCESSFUL - 1601)) | (1 << (self::SUCCESS - 1601)) | (1 << (self::SUMMARY - 1601)) | (1 << (self::SUPPLEMENTAL - 1601)) | (1 << (self::SUSPEND - 1601)) | (1 << (self::SWAP_JOIN_INPUTS - 1601)) | (1 << (self::SWITCHOVER - 1601)) | (1 << (self::SWITCH - 1601)) | (1 << (self::SYNCHRONOUS - 1601)) | (1 << (self::SYNC - 1601)) | (1 << (self::SYSASM - 1601)) | (1 << (self::SYS_AUDIT - 1601)) | (1 << (self::SYSAUX - 1601)) | (1 << (self::SYSBACKUP - 1601)) | (1 << (self::SYS_CHECKACL - 1601)) | (1 << (self::SYS_CHECK_PRIVILEGE - 1601)) | (1 << (self::SYS_CONNECT_BY_PATH - 1601)) | (1 << (self::SYS_CONTEXT - 1601)) | (1 << (self::SYSDATE - 1601)) | (1 << (self::SYSDBA - 1601)) | (1 << (self::SYS_DBURIGEN - 1601)) | (1 << (self::SYSDG - 1601)) | (1 << (self::SYS_DL_CURSOR - 1601)) | (1 << (self::SYS_DM_RXFORM_CHR - 1601)) | (1 << (self::SYS_DM_RXFORM_NUM - 1601)) | (1 << (self::SYS_DOM_COMPARE - 1601)) | (1 << (self::SYS_DST_PRIM2SEC - 1601)) | (1 << (self::SYS_DST_SEC2PRIM - 1601)) | (1 << (self::SYS_ET_BFILE_TO_RAW - 1601)) | (1 << (self::SYS_ET_BLOB_TO_IMAGE - 1601)) | (1 << (self::SYS_ET_IMAGE_TO_BLOB - 1601)) | (1 << (self::SYS_ET_RAW_TO_BFILE - 1601)) | (1 << (self::SYS_EXTPDTXT - 1601)) | (1 << (self::SYS_EXTRACT_UTC - 1601)) | (1 << (self::SYS_FBT_INSDEL - 1601)) | (1 << (self::SYS_FILTER_ACLS - 1601)) | (1 << (self::SYS_FNMATCHES - 1601)) | (1 << (self::SYS_FNREPLACE - 1601)) | (1 << (self::SYS_GET_ACLIDS - 1601)) | (1 << (self::SYS_GET_COL_ACLIDS - 1601)) | (1 << (self::SYS_GET_PRIVILEGES - 1601)) | (1 << (self::SYS_GETTOKENID - 1601)) | (1 << (self::SYS_GETXTIVAL - 1601)) | (1 << (self::SYS_GUID - 1601)) | (1 << (self::SYSGUID - 1601)) | (1 << (self::SYSKM - 1601)) | (1 << (self::SYS_MAKE_XMLNODEID - 1601)))) !== 0) || (((($_la - 1665)) & ~0x3f) === 0 && ((1 << ($_la - 1665)) & ((1 << (self::SYS_MAKEXML - 1665)) | (1 << (self::SYS_MKXMLATTR - 1665)) | (1 << (self::SYS_MKXTI - 1665)) | (1 << (self::SYSOBJ - 1665)) | (1 << (self::SYS_OP_ADT2BIN - 1665)) | (1 << (self::SYS_OP_ADTCONS - 1665)) | (1 << (self::SYS_OP_ALSCRVAL - 1665)) | (1 << (self::SYS_OP_ATG - 1665)) | (1 << (self::SYS_OP_BIN2ADT - 1665)) | (1 << (self::SYS_OP_BITVEC - 1665)) | (1 << (self::SYS_OP_BL2R - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER - 1665)) | (1 << (self::SYS_OP_C2C - 1665)) | (1 << (self::SYS_OP_CAST - 1665)) | (1 << (self::SYS_OP_CEG - 1665)) | (1 << (self::SYS_OP_CL2C - 1665)) | (1 << (self::SYS_OP_COMBINED_HASH - 1665)) | (1 << (self::SYS_OP_COMP - 1665)) | (1 << (self::SYS_OP_CONVERT - 1665)) | (1 << (self::SYS_OP_COUNTCHG - 1665)) | (1 << (self::SYS_OP_CSCONV - 1665)) | (1 << (self::SYS_OP_CSCONVTEST - 1665)) | (1 << (self::SYS_OP_CSR - 1665)) | (1 << (self::SYS_OP_CSX_PATCH - 1665)) | (1 << (self::SYS_OP_CYCLED_SEQ - 1665)) | (1 << (self::SYS_OP_DECOMP - 1665)) | (1 << (self::SYS_OP_DESCEND - 1665)) | (1 << (self::SYS_OP_DISTINCT - 1665)) | (1 << (self::SYS_OP_DRA - 1665)) | (1 << (self::SYS_OP_DUMP - 1665)) | (1 << (self::SYS_OP_DV_CHECK - 1665)) | (1 << (self::SYS_OP_ENFORCE_NOT_NULL - 1665)) | (1 << (self::SYSOPER - 1665)) | (1 << (self::SYS_OP_EXTRACT - 1665)) | (1 << (self::SYS_OP_GROUPING - 1665)) | (1 << (self::SYS_OP_GUID - 1665)) | (1 << (self::SYS_OP_HASH - 1665)) | (1 << (self::SYS_OP_IIX - 1665)) | (1 << (self::SYS_OP_ITR - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_CREATE - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_SUCCEEDED - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_USE - 1665)) | (1 << (self::SYS_OP_LBID - 1665)) | (1 << (self::SYS_OP_LOBLOC2BLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2CLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2ID - 1665)) | (1 << (self::SYS_OP_LOBLOC2NCLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2TYP - 1665)) | (1 << (self::SYS_OP_LSVI - 1665)) | (1 << (self::SYS_OP_LVL - 1665)) | (1 << (self::SYS_OP_MAKEOID - 1665)) | (1 << (self::SYS_OP_MAP_NONNULL - 1665)) | (1 << (self::SYS_OP_MSR - 1665)) | (1 << (self::SYS_OP_NICOMBINE - 1665)) | (1 << (self::SYS_OP_NIEXTRACT - 1665)) | (1 << (self::SYS_OP_NII - 1665)) | (1 << (self::SYS_OP_NIX - 1665)) | (1 << (self::SYS_OP_NOEXPAND - 1665)) | (1 << (self::SYS_OP_NTCIMG - 1665)) | (1 << (self::SYS_OP_NUMTORAW - 1665)) | (1 << (self::SYS_OP_OIDVALUE - 1665)))) !== 0) || (((($_la - 1729)) & ~0x3f) === 0 && ((1 << ($_la - 1729)) & ((1 << (self::SYS_OP_OPNSIZE - 1729)) | (1 << (self::SYS_OP_PAR_1 - 1729)) | (1 << (self::SYS_OP_PARGID_1 - 1729)) | (1 << (self::SYS_OP_PARGID - 1729)) | (1 << (self::SYS_OP_PAR - 1729)) | (1 << (self::SYS_OP_PART_ID - 1729)) | (1 << (self::SYS_OP_PIVOT - 1729)) | (1 << (self::SYS_OP_R2O - 1729)) | (1 << (self::SYS_OP_RAWTONUM - 1729)) | (1 << (self::SYS_OP_RDTM - 1729)) | (1 << (self::SYS_OP_REF - 1729)) | (1 << (self::SYS_OP_RMTD - 1729)) | (1 << (self::SYS_OP_ROWIDTOOBJ - 1729)) | (1 << (self::SYS_OP_RPB - 1729)) | (1 << (self::SYS_OPTLOBPRBSC - 1729)) | (1 << (self::SYS_OP_TOSETID - 1729)) | (1 << (self::SYS_OP_TPR - 1729)) | (1 << (self::SYS_OP_TRTB - 1729)) | (1 << (self::SYS_OPTXICMP - 1729)) | (1 << (self::SYS_OPTXQCASTASNQ - 1729)) | (1 << (self::SYS_OP_UNDESCEND - 1729)) | (1 << (self::SYS_OP_VECAND - 1729)) | (1 << (self::SYS_OP_VECBIT - 1729)) | (1 << (self::SYS_OP_VECOR - 1729)) | (1 << (self::SYS_OP_VECXOR - 1729)) | (1 << (self::SYS_OP_VERSION - 1729)) | (1 << (self::SYS_OP_VREF - 1729)) | (1 << (self::SYS_OP_VVD - 1729)) | (1 << (self::SYS_OP_XMLCONS_FOR_CSX - 1729)) | (1 << (self::SYS_OP_XPTHATG - 1729)) | (1 << (self::SYS_OP_XPTHIDX - 1729)) | (1 << (self::SYS_OP_XPTHOP - 1729)) | (1 << (self::SYS_OP_XTXT2SQLT - 1729)) | (1 << (self::SYS_OP_ZONE_ID - 1729)) | (1 << (self::SYS_ORDERKEY_DEPTH - 1729)) | (1 << (self::SYS_ORDERKEY_MAXCHILD - 1729)) | (1 << (self::SYS_ORDERKEY_PARENT - 1729)) | (1 << (self::SYS_PARALLEL_TXN - 1729)) | (1 << (self::SYS_PATHID_IS_ATTR - 1729)) | (1 << (self::SYS_PATHID_IS_NMSPC - 1729)) | (1 << (self::SYS_PATHID_LASTNAME - 1729)) | (1 << (self::SYS_PATHID_LASTNMSPC - 1729)) | (1 << (self::SYS_PATH_REVERSE - 1729)) | (1 << (self::SYS_PXQEXTRACT - 1729)) | (1 << (self::SYS_RAW_TO_XSID - 1729)) | (1 << (self::SYS_RID_ORDER - 1729)) | (1 << (self::SYS_ROW_DELTA - 1729)) | (1 << (self::SYS_SC_2_XMLT - 1729)) | (1 << (self::SYS_SYNRCIREDO - 1729)) | (1 << (self::SYSTEM_DEFINED - 1729)) | (1 << (self::SYSTEM - 1729)) | (1 << (self::SYSTIMESTAMP - 1729)) | (1 << (self::SYS_TYPEID - 1729)) | (1 << (self::SYS_UMAKEXML - 1729)) | (1 << (self::SYS_XMLANALYZE - 1729)) | (1 << (self::SYS_XMLCONTAINS - 1729)) | (1 << (self::SYS_XMLCONV - 1729)) | (1 << (self::SYS_XMLEXNSURI - 1729)) | (1 << (self::SYS_XMLGEN - 1729)) | (1 << (self::SYS_XMLI_LOC_ISNODE - 1729)) | (1 << (self::SYS_XMLI_LOC_ISTEXT - 1729)) | (1 << (self::SYS_XMLINSTR - 1729)) | (1 << (self::SYS_XMLLOCATOR_GETSVAL - 1729)) | (1 << (self::SYS_XMLNODEID_GETCID - 1729)))) !== 0) || (((($_la - 1793)) & ~0x3f) === 0 && ((1 << ($_la - 1793)) & ((1 << (self::SYS_XMLNODEID_GETLOCATOR - 1793)) | (1 << (self::SYS_XMLNODEID_GETOKEY - 1793)) | (1 << (self::SYS_XMLNODEID_GETPATHID - 1793)) | (1 << (self::SYS_XMLNODEID_GETPTRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETSVAL - 1793)) | (1 << (self::SYS_XMLNODEID_GETTID - 1793)) | (1 << (self::SYS_XMLNODEID - 1793)) | (1 << (self::SYS_XMLT_2_SC - 1793)) | (1 << (self::SYS_XMLTRANSLATE - 1793)) | (1 << (self::SYS_XMLTYPE2SQL - 1793)) | (1 << (self::SYS_XQ_ASQLCNV - 1793)) | (1 << (self::SYS_XQ_ATOMCNVCHK - 1793)) | (1 << (self::SYS_XQBASEURI - 1793)) | (1 << (self::SYS_XQCASTABLEERRH - 1793)) | (1 << (self::SYS_XQCODEP2STR - 1793)) | (1 << (self::SYS_XQCODEPEQ - 1793)) | (1 << (self::SYS_XQCON2SEQ - 1793)) | (1 << (self::SYS_XQCONCAT - 1793)) | (1 << (self::SYS_XQDELETE - 1793)) | (1 << (self::SYS_XQDFLTCOLATION - 1793)) | (1 << (self::SYS_XQDOC - 1793)) | (1 << (self::SYS_XQDOCURI - 1793)) | (1 << (self::SYS_XQDURDIV - 1793)) | (1 << (self::SYS_XQED4URI - 1793)) | (1 << (self::SYS_XQENDSWITH - 1793)) | (1 << (self::SYS_XQERRH - 1793)) | (1 << (self::SYS_XQERR - 1793)) | (1 << (self::SYS_XQESHTMLURI - 1793)) | (1 << (self::SYS_XQEXLOBVAL - 1793)) | (1 << (self::SYS_XQEXSTWRP - 1793)) | (1 << (self::SYS_XQEXTRACT - 1793)) | (1 << (self::SYS_XQEXTRREF - 1793)) | (1 << (self::SYS_XQEXVAL - 1793)) | (1 << (self::SYS_XQFB2STR - 1793)) | (1 << (self::SYS_XQFNBOOL - 1793)) | (1 << (self::SYS_XQFNCMP - 1793)) | (1 << (self::SYS_XQFNDATIM - 1793)) | (1 << (self::SYS_XQFNLNAME - 1793)) | (1 << (self::SYS_XQFNNM - 1793)) | (1 << (self::SYS_XQFNNSURI - 1793)) | (1 << (self::SYS_XQFNPREDTRUTH - 1793)) | (1 << (self::SYS_XQFNQNM - 1793)) | (1 << (self::SYS_XQFNROOT - 1793)) | (1 << (self::SYS_XQFORMATNUM - 1793)) | (1 << (self::SYS_XQFTCONTAIN - 1793)) | (1 << (self::SYS_XQFUNCR - 1793)) | (1 << (self::SYS_XQGETCONTENT - 1793)) | (1 << (self::SYS_XQINDXOF - 1793)) | (1 << (self::SYS_XQINSERT - 1793)) | (1 << (self::SYS_XQINSPFX - 1793)) | (1 << (self::SYS_XQIRI2URI - 1793)) | (1 << (self::SYS_XQLANG - 1793)) | (1 << (self::SYS_XQLLNMFRMQNM - 1793)) | (1 << (self::SYS_XQMKNODEREF - 1793)) | (1 << (self::SYS_XQNILLED - 1793)) | (1 << (self::SYS_XQNODENAME - 1793)) | (1 << (self::SYS_XQNORMSPACE - 1793)) | (1 << (self::SYS_XQNORMUCODE - 1793)) | (1 << (self::SYS_XQ_NRNG - 1793)) | (1 << (self::SYS_XQNSP4PFX - 1793)) | (1 << (self::SYS_XQNSPFRMQNM - 1793)) | (1 << (self::SYS_XQPFXFRMQNM - 1793)) | (1 << (self::SYS_XQ_PKSQL2XML - 1793)))) !== 0) || (((($_la - 1857)) & ~0x3f) === 0 && ((1 << ($_la - 1857)) & ((1 << (self::SYS_XQPOLYABS - 1857)) | (1 << (self::SYS_XQPOLYADD - 1857)) | (1 << (self::SYS_XQPOLYCEL - 1857)) | (1 << (self::SYS_XQPOLYCSTBL - 1857)) | (1 << (self::SYS_XQPOLYCST - 1857)) | (1 << (self::SYS_XQPOLYDIV - 1857)) | (1 << (self::SYS_XQPOLYFLR - 1857)) | (1 << (self::SYS_XQPOLYMOD - 1857)) | (1 << (self::SYS_XQPOLYMUL - 1857)) | (1 << (self::SYS_XQPOLYRND - 1857)) | (1 << (self::SYS_XQPOLYSQRT - 1857)) | (1 << (self::SYS_XQPOLYSUB - 1857)) | (1 << (self::SYS_XQPOLYUMUS - 1857)) | (1 << (self::SYS_XQPOLYUPLS - 1857)) | (1 << (self::SYS_XQPOLYVEQ - 1857)) | (1 << (self::SYS_XQPOLYVGE - 1857)) | (1 << (self::SYS_XQPOLYVGT - 1857)) | (1 << (self::SYS_XQPOLYVLE - 1857)) | (1 << (self::SYS_XQPOLYVLT - 1857)) | (1 << (self::SYS_XQPOLYVNE - 1857)) | (1 << (self::SYS_XQREF2VAL - 1857)) | (1 << (self::SYS_XQRENAME - 1857)) | (1 << (self::SYS_XQREPLACE - 1857)) | (1 << (self::SYS_XQRESVURI - 1857)) | (1 << (self::SYS_XQRNDHALF2EVN - 1857)) | (1 << (self::SYS_XQRSLVQNM - 1857)) | (1 << (self::SYS_XQRYENVPGET - 1857)) | (1 << (self::SYS_XQRYVARGET - 1857)) | (1 << (self::SYS_XQRYWRP - 1857)) | (1 << (self::SYS_XQSEQ2CON4XC - 1857)) | (1 << (self::SYS_XQSEQ2CON - 1857)) | (1 << (self::SYS_XQSEQDEEPEQ - 1857)) | (1 << (self::SYS_XQSEQINSB - 1857)) | (1 << (self::SYS_XQSEQRM - 1857)) | (1 << (self::SYS_XQSEQRVS - 1857)) | (1 << (self::SYS_XQSEQSUB - 1857)) | (1 << (self::SYS_XQSEQTYPMATCH - 1857)) | (1 << (self::SYS_XQSTARTSWITH - 1857)) | (1 << (self::SYS_XQSTATBURI - 1857)) | (1 << (self::SYS_XQSTR2CODEP - 1857)) | (1 << (self::SYS_XQSTRJOIN - 1857)) | (1 << (self::SYS_XQSUBSTRAFT - 1857)) | (1 << (self::SYS_XQSUBSTRBEF - 1857)) | (1 << (self::SYS_XQTOKENIZE - 1857)) | (1 << (self::SYS_XQTREATAS - 1857)) | (1 << (self::SYS_XQ_UPKXML2SQL - 1857)) | (1 << (self::SYS_XQXFORM - 1857)) | (1 << (self::SYS_XSID_TO_RAW - 1857)) | (1 << (self::SYS_ZMAP_FILTER - 1857)) | (1 << (self::SYS_ZMAP_REFRESH - 1857)) | (1 << (self::TABLE_LOOKUP_BY_NL - 1857)) | (1 << (self::TABLESPACE_NO - 1857)) | (1 << (self::TABLESPACE - 1857)) | (1 << (self::TABLES - 1857)) | (1 << (self::TABLE_STATS - 1857)) | (1 << (self::TABLE - 1857)) | (1 << (self::TABNO - 1857)) | (1 << (self::TAG - 1857)) | (1 << (self::TANH - 1857)) | (1 << (self::TAN - 1857)) | (1 << (self::TBLORIDXPARTNUM - 1857)) | (1 << (self::TEMPFILE - 1857)) | (1 << (self::TEMPLATE - 1857)) | (1 << (self::TEMPORARY - 1857)))) !== 0) || (((($_la - 1921)) & ~0x3f) === 0 && ((1 << ($_la - 1921)) & ((1 << (self::TEMP_TABLE - 1921)) | (1 << (self::TEST - 1921)) | (1 << (self::TEXT - 1921)) | (1 << (self::THAN - 1921)) | (1 << (self::THEN - 1921)) | (1 << (self::THE - 1921)) | (1 << (self::THREAD - 1921)) | (1 << (self::THROUGH - 1921)) | (1 << (self::TIER - 1921)) | (1 << (self::TIES - 1921)) | (1 << (self::TIMEOUT - 1921)) | (1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP - 1921)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1921)) | (1 << (self::TIMES - 1921)) | (1 << (self::TIME - 1921)) | (1 << (self::TIMEZONE_ABBR - 1921)) | (1 << (self::TIMEZONE_HOUR - 1921)) | (1 << (self::TIMEZONE_MINUTE - 1921)) | (1 << (self::TIMEZONE_OFFSET - 1921)) | (1 << (self::TIMEZONE_REGION - 1921)) | (1 << (self::TIME_ZONE - 1921)) | (1 << (self::TIV_GB - 1921)) | (1 << (self::TIV_SSF - 1921)) | (1 << (self::TO_ACLID - 1921)) | (1 << (self::TO_BINARY_DOUBLE - 1921)) | (1 << (self::TO_BINARY_FLOAT - 1921)) | (1 << (self::TO_BLOB - 1921)) | (1 << (self::TO_CLOB - 1921)) | (1 << (self::TO_DSINTERVAL - 1921)) | (1 << (self::TO_LOB - 1921)) | (1 << (self::TO_MULTI_BYTE - 1921)) | (1 << (self::TO_NCHAR - 1921)) | (1 << (self::TO_NCLOB - 1921)) | (1 << (self::TO_NUMBER - 1921)) | (1 << (self::TOPLEVEL - 1921)) | (1 << (self::TO_SINGLE_BYTE - 1921)) | (1 << (self::TO_TIMESTAMP - 1921)) | (1 << (self::TO_TIMESTAMP_TZ - 1921)) | (1 << (self::TO_TIME - 1921)) | (1 << (self::TO_TIME_TZ - 1921)) | (1 << (self::TO_YMINTERVAL - 1921)) | (1 << (self::TRACE - 1921)) | (1 << (self::TRACING - 1921)) | (1 << (self::TRACKING - 1921)) | (1 << (self::TRAILING - 1921)) | (1 << (self::TRANSACTION - 1921)) | (1 << (self::TRANSFORM_DISTINCT_AGG - 1921)) | (1 << (self::TRANSITIONAL - 1921)) | (1 << (self::TRANSITION - 1921)) | (1 << (self::TRANSLATE - 1921)) | (1 << (self::TRANSLATION - 1921)) | (1 << (self::TREAT - 1921)) | (1 << (self::TRIGGERS - 1921)) | (1 << (self::TRIGGER - 1921)) | (1 << (self::TRUE - 1921)) | (1 << (self::TRUNCATE - 1921)) | (1 << (self::TRUNC - 1921)) | (1 << (self::TRUSTED - 1921)) | (1 << (self::TRUST - 1921)) | (1 << (self::TUNING - 1921)))) !== 0) || (((($_la - 1985)) & ~0x3f) === 0 && ((1 << ($_la - 1985)) & ((1 << (self::TX - 1985)) | (1 << (self::TYPES - 1985)) | (1 << (self::TYPE - 1985)) | (1 << (self::TZ_OFFSET - 1985)) | (1 << (self::UB2 - 1985)) | (1 << (self::UBA - 1985)) | (1 << (self::UCS2 - 1985)) | (1 << (self::UID - 1985)) | (1 << (self::UNARCHIVED - 1985)) | (1 << (self::UNBOUNDED - 1985)) | (1 << (self::UNBOUND - 1985)) | (1 << (self::UNCONDITIONAL - 1985)) | (1 << (self::UNDER - 1985)) | (1 << (self::UNDO - 1985)) | (1 << (self::UNDROP - 1985)) | (1 << (self::UNIFORM - 1985)) | (1 << (self::UNISTR - 1985)) | (1 << (self::UNLIMITED - 1985)) | (1 << (self::UNLOAD - 1985)) | (1 << (self::UNLOCK - 1985)) | (1 << (self::UNMATCHED - 1985)) | (1 << (self::UNNEST_INNERJ_DISTINCT_VIEW - 1985)) | (1 << (self::UNNEST_NOSEMIJ_NODISTINCTVIEW - 1985)) | (1 << (self::UNNEST_SEMIJ_VIEW - 1985)) | (1 << (self::UNNEST - 1985)) | (1 << (self::UNPACKED - 1985)) | (1 << (self::UNPIVOT - 1985)) | (1 << (self::UNPLUG - 1985)) | (1 << (self::UNPROTECTED - 1985)) | (1 << (self::UNQUIESCE - 1985)) | (1 << (self::UNRECOVERABLE - 1985)) | (1 << (self::UNRESTRICTED - 1985)) | (1 << (self::UNSUBSCRIBE - 1985)) | (1 << (self::UNTIL - 1985)) | (1 << (self::UNUSABLE - 1985)) | (1 << (self::UNUSED - 1985)) | (1 << (self::UPDATABLE - 1985)) | (1 << (self::UPDATED - 1985)) | (1 << (self::UPDATEXML - 1985)) | (1 << (self::UPD_INDEXES - 1985)) | (1 << (self::UPD_JOININDEX - 1985)) | (1 << (self::UPGRADE - 1985)) | (1 << (self::UPPER - 1985)) | (1 << (self::UPSERT - 1985)) | (1 << (self::UROWID - 1985)) | (1 << (self::USABLE - 1985)) | (1 << (self::USAGE - 1985)) | (1 << (self::USE_ANTI - 1985)) | (1 << (self::USE_CONCAT - 1985)) | (1 << (self::USE_CUBE - 1985)) | (1 << (self::USE_HASH_AGGREGATION - 1985)) | (1 << (self::USE_HASH_GBY_FOR_PUSHDOWN - 1985)) | (1 << (self::USE_HASH - 1985)) | (1 << (self::USE_HIDDEN_PARTITIONS - 1985)) | (1 << (self::USE_INVISIBLE_INDEXES - 1985)) | (1 << (self::USE_MERGE_CARTESIAN - 1985)) | (1 << (self::USE_MERGE - 1985)) | (1 << (self::USE_NL - 1985)) | (1 << (self::USE_NL_WITH_INDEX - 1985)) | (1 << (self::USE_PRIVATE_OUTLINES - 1985)) | (1 << (self::USER_DATA - 1985)))) !== 0) || (((($_la - 2049)) & ~0x3f) === 0 && ((1 << ($_la - 2049)) & ((1 << (self::USER_DEFINED - 2049)) | (1 << (self::USERENV - 2049)) | (1 << (self::USERGROUP - 2049)) | (1 << (self::USER_RECYCLEBIN - 2049)) | (1 << (self::USERS - 2049)) | (1 << (self::USER_TABLESPACES - 2049)) | (1 << (self::USER - 2049)) | (1 << (self::USE_SEMI - 2049)) | (1 << (self::USE_STORED_OUTLINES - 2049)) | (1 << (self::USE_TTT_FOR_GSETS - 2049)) | (1 << (self::USE - 2049)) | (1 << (self::USE_VECTOR_AGGREGATION - 2049)) | (1 << (self::USE_WEAK_NAME_RESL - 2049)) | (1 << (self::USING_NO_EXPAND - 2049)) | (1 << (self::USING - 2049)) | (1 << (self::UTF16BE - 2049)) | (1 << (self::UTF16LE - 2049)) | (1 << (self::UTF32 - 2049)) | (1 << (self::UTF8 - 2049)) | (1 << (self::V1 - 2049)) | (1 << (self::V2 - 2049)) | (1 << (self::VALIDATE - 2049)) | (1 << (self::VALIDATION - 2049)) | (1 << (self::VALID_TIME_END - 2049)) | (1 << (self::VALUE - 2049)) | (1 << (self::VARCHAR2 - 2049)) | (1 << (self::VARCHAR - 2049)) | (1 << (self::VARIABLE - 2049)) | (1 << (self::VAR_POP - 2049)) | (1 << (self::VARRAYS - 2049)) | (1 << (self::VARRAY - 2049)) | (1 << (self::VAR_SAMP - 2049)) | (1 << (self::VARYING - 2049)) | (1 << (self::VECTOR_READ_TRACE - 2049)) | (1 << (self::VECTOR_READ - 2049)) | (1 << (self::VECTOR_TRANSFORM_DIMS - 2049)) | (1 << (self::VECTOR_TRANSFORM_FACT - 2049)) | (1 << (self::VECTOR_TRANSFORM - 2049)) | (1 << (self::VERIFIER - 2049)) | (1 << (self::VERIFY - 2049)) | (1 << (self::VERSIONING - 2049)) | (1 << (self::VERSIONS_ENDSCN - 2049)) | (1 << (self::VERSIONS_ENDTIME - 2049)) | (1 << (self::VERSIONS_OPERATION - 2049)) | (1 << (self::VERSIONS_STARTSCN - 2049)) | (1 << (self::VERSIONS_STARTTIME - 2049)) | (1 << (self::VERSIONS - 2049)) | (1 << (self::VERSIONS_XID - 2049)) | (1 << (self::VERSION - 2049)) | (1 << (self::VIOLATION - 2049)) | (1 << (self::VIRTUAL - 2049)) | (1 << (self::VISIBILITY - 2049)) | (1 << (self::VISIBLE - 2049)) | (1 << (self::VOLUME - 2049)) | (1 << (self::VSIZE - 2049)) | (1 << (self::WAIT - 2049)) | (1 << (self::WALLET - 2049)) | (1 << (self::WARNING - 2049)) | (1 << (self::WEEKS - 2049)) | (1 << (self::WEEK - 2049)) | (1 << (self::WELLFORMED - 2049)) | (1 << (self::WHENEVER - 2049)))) !== 0) || (((($_la - 2113)) & ~0x3f) === 0 && ((1 << ($_la - 2113)) & ((1 << (self::WHEN - 2113)) | (1 << (self::WHILE - 2113)) | (1 << (self::WHITESPACE - 2113)) | (1 << (self::WIDTH_BUCKET - 2113)) | (1 << (self::WITHIN - 2113)) | (1 << (self::WITHOUT - 2113)) | (1 << (self::WITH_PLSQL - 2113)) | (1 << (self::WORK - 2113)) | (1 << (self::WRAPPED - 2113)) | (1 << (self::WRAPPER - 2113)) | (1 << (self::WRITE - 2113)) | (1 << (self::XDB_FASTPATH_INSERT - 2113)) | (1 << (self::X_DYN_PRUNE - 2113)) | (1 << (self::XID - 2113)) | (1 << (self::XML2OBJECT - 2113)) | (1 << (self::XMLAGG - 2113)) | (1 << (self::XMLATTRIBUTES - 2113)) | (1 << (self::XMLCAST - 2113)) | (1 << (self::XMLCDATA - 2113)) | (1 << (self::XMLCOLATTVAL - 2113)) | (1 << (self::XMLCOMMENT - 2113)) | (1 << (self::XMLCONCAT - 2113)) | (1 << (self::XMLDIFF - 2113)) | (1 << (self::XML_DML_RWT_STMT - 2113)) | (1 << (self::XMLELEMENT - 2113)) | (1 << (self::XMLEXISTS2 - 2113)) | (1 << (self::XMLEXISTS - 2113)) | (1 << (self::XMLFOREST - 2113)) | (1 << (self::XMLINDEX_REWRITE_IN_SELECT - 2113)) | (1 << (self::XMLINDEX_REWRITE - 2113)) | (1 << (self::XMLINDEX_SEL_IDX_TBL - 2113)) | (1 << (self::XMLISNODE - 2113)) | (1 << (self::XMLISVALID - 2113)) | (1 << (self::XMLNAMESPACES - 2113)) | (1 << (self::XMLPARSE - 2113)) | (1 << (self::XMLPATCH - 2113)) | (1 << (self::XMLPI - 2113)) | (1 << (self::XMLQUERYVAL - 2113)) | (1 << (self::XMLQUERY - 2113)) | (1 << (self::XMLROOT - 2113)) | (1 << (self::XMLSCHEMA - 2113)) | (1 << (self::XMLSERIALIZE - 2113)) | (1 << (self::XMLTABLE - 2113)) | (1 << (self::XMLTRANSFORMBLOB - 2113)) | (1 << (self::XMLTRANSFORM - 2113)) | (1 << (self::XMLTYPE - 2113)) | (1 << (self::XML - 2113)) | (1 << (self::XPATHTABLE - 2113)) | (1 << (self::XS_SYS_CONTEXT - 2113)) | (1 << (self::XS - 2113)) | (1 << (self::YEARS - 2113)) | (1 << (self::YEAR - 2113)) | (1 << (self::YES - 2113)) | (1 << (self::YMINTERVAL_UNCONSTRAINED - 2113)) | (1 << (self::ZONEMAP - 2113)) | (1 << (self::ZONE - 2113)) | (1 << (self::PREDICTION - 2113)) | (1 << (self::PREDICTION_BOUNDS - 2113)) | (1 << (self::PREDICTION_COST - 2113)))) !== 0) || (((($_la - 2177)) & ~0x3f) === 0 && ((1 << ($_la - 2177)) & ((1 << (self::PREDICTION_DETAILS - 2177)) | (1 << (self::PREDICTION_PROBABILITY - 2177)) | (1 << (self::PREDICTION_SET - 2177)) | (1 << (self::CUME_DIST - 2177)) | (1 << (self::DENSE_RANK - 2177)) | (1 << (self::LISTAGG - 2177)) | (1 << (self::PERCENT_RANK - 2177)) | (1 << (self::PERCENTILE_CONT - 2177)) | (1 << (self::PERCENTILE_DISC - 2177)) | (1 << (self::RANK - 2177)) | (1 << (self::AVG - 2177)) | (1 << (self::CORR - 2177)) | (1 << (self::COVAR_ - 2177)) | (1 << (self::LAG - 2177)) | (1 << (self::LEAD - 2177)) | (1 << (self::MAX - 2177)) | (1 << (self::MEDIAN - 2177)) | (1 << (self::MIN - 2177)) | (1 << (self::NTILE - 2177)) | (1 << (self::NVL - 2177)) | (1 << (self::RATIO_TO_REPORT - 2177)) | (1 << (self::REGR_ - 2177)) | (1 << (self::ROUND - 2177)) | (1 << (self::ROW_NUMBER - 2177)) | (1 << (self::SUBSTR - 2177)) | (1 << (self::TO_CHAR - 2177)) | (1 << (self::TRIM - 2177)) | (1 << (self::SUM - 2177)) | (1 << (self::STDDEV - 2177)) | (1 << (self::VAR_ - 2177)) | (1 << (self::VARIANCE - 2177)) | (1 << (self::LEAST - 2177)) | (1 << (self::GREATEST - 2177)) | (1 << (self::TO_DATE - 2177)) | (1 << (self::PERIOD - 2177)) | (1 << (self::DELIMITED_ID - 2177)))) !== 0) || $_la === self::REGULAR_ID) {
                $this->setState(8369);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::IN) {
                    $this->setState(8368);
                    $this->match(self::IN);
                }
                $this->setState(8371);
                $this->type_spec();
            }
            $this->setState(8375);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT || $_la === self::ASSIGN_OP) {
                $this->setState(8374);
                $this->default_value_part();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function exception_declaration(): Context\Exception_declarationContext
    {
        $localContext = new Context\Exception_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 932, self::RULE_exception_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8377);
            $this->identifier();
            $this->setState(8378);
            $this->match(self::EXCEPTION);
            $this->setState(8379);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function pragma_declaration(): Context\Pragma_declarationContext
    {
        $localContext = new Context\Pragma_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 934, self::RULE_pragma_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8381);
            $this->match(self::PRAGMA);
            $this->setState(8412);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SERIALLY_REUSABLE:
                    $this->setState(8382);
                    $this->match(self::SERIALLY_REUSABLE);
                    break;

                case self::AUTONOMOUS_TRANSACTION:
                    $this->setState(8383);
                    $this->match(self::AUTONOMOUS_TRANSACTION);
                    break;

                case self::EXCEPTION_INIT:
                    $this->setState(8384);
                    $this->match(self::EXCEPTION_INIT);
                    $this->setState(8385);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(8386);
                    $this->exception_name();
                    $this->setState(8387);
                    $this->match(self::COMMA);
                    $this->setState(8388);
                    $this->numeric_negative();
                    $this->setState(8389);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case self::INLINE:
                    $this->setState(8391);
                    $this->match(self::INLINE);
                    $this->setState(8392);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(8393);
                    $localContext->id1 = $this->identifier();
                    $this->setState(8394);
                    $this->match(self::COMMA);
                    $this->setState(8395);
                    $this->expression();
                    $this->setState(8396);
                    $this->match(self::RIGHT_PAREN);
                    break;

                case self::RESTRICT_REFERENCES:
                    $this->setState(8398);
                    $this->match(self::RESTRICT_REFERENCES);
                    $this->setState(8399);
                    $this->match(self::LEFT_PAREN);
                    $this->setState(8402);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ABORT:
                        case self::ABS:
                        case self::ACCESS:
                        case self::ACCESSED:
                        case self::ACCOUNT:
                        case self::ACL:
                        case self::ACOS:
                        case self::ACTION:
                        case self::ACTIONS:
                        case self::ACTIVATE:
                        case self::ACTIVE:
                        case self::ACTIVE_COMPONENT:
                        case self::ACTIVE_DATA:
                        case self::ACTIVE_FUNCTION:
                        case self::ACTIVE_TAG:
                        case self::ACTIVITY:
                        case self::ADAPTIVE_PLAN:
                        case self::ADD:
                        case self::ADD_COLUMN:
                        case self::ADD_GROUP:
                        case self::ADD_MONTHS:
                        case self::ADJ_DATE:
                        case self::ADMIN:
                        case self::ADMINISTER:
                        case self::ADMINISTRATOR:
                        case self::ADVANCED:
                        case self::ADVISE:
                        case self::ADVISOR:
                        case self::AFD_DISKSTRING:
                        case self::AFTER:
                        case self::AGENT:
                        case self::AGGREGATE:
                        case self::A_LETTER:
                        case self::ALIAS:
                        case self::ALLOCATE:
                        case self::ALLOW:
                        case self::ALL_ROWS:
                        case self::ALWAYS:
                        case self::ANALYZE:
                        case self::ANCILLARY:
                        case self::AND_EQUAL:
                        case self::ANOMALY:
                        case self::ANSI_REARCH:
                        case self::ANTIJOIN:
                        case self::ANYSCHEMA:
                        case self::APPEND:
                        case self::APPENDCHILDXML:
                        case self::APPEND_VALUES:
                        case self::APPLICATION:
                        case self::APPLY:
                        case self::APPROX_COUNT_DISTINCT:
                        case self::ARCHIVAL:
                        case self::ARCHIVE:
                        case self::ARCHIVED:
                        case self::ARCHIVELOG:
                        case self::ARRAY:
                        case self::ASCII:
                        case self::ASCIISTR:
                        case self::ASIN:
                        case self::ASIS:
                        case self::ASSEMBLY:
                        case self::ASSIGN:
                        case self::ASSOCIATE:
                        case self::ASYNC:
                        case self::ASYNCHRONOUS:
                        case self::ATAN2:
                        case self::ATAN:
                        case self::AT:
                        case self::ATTRIBUTE:
                        case self::ATTRIBUTES:
                        case self::AUTHENTICATED:
                        case self::AUTHENTICATION:
                        case self::AUTHID:
                        case self::AUTHORIZATION:
                        case self::AUTOALLOCATE:
                        case self::AUTO:
                        case self::AUTOEXTEND:
                        case self::AUTO_LOGIN:
                        case self::AUTOMATIC:
                        case self::AUTONOMOUS_TRANSACTION:
                        case self::AUTO_REOPTIMIZE:
                        case self::AVAILABILITY:
                        case self::AVRO:
                        case self::BACKGROUND:
                        case self::BACKUP:
                        case self::BASIC:
                        case self::BASICFILE:
                        case self::BATCH:
                        case self::BATCHSIZE:
                        case self::BATCH_TABLE_ACCESS_BY_ROWID:
                        case self::BECOME:
                        case self::BEFORE:
                        case self::BEGIN:
                        case self::BEGINNING:
                        case self::BEGIN_OUTLINE_DATA:
                        case self::BEHALF:
                        case self::BEQUEATH:
                        case self::BFILE:
                        case self::BFILENAME:
                        case self::BIGFILE:
                        case self::BINARY:
                        case self::BINARY_DOUBLE:
                        case self::BINARY_DOUBLE_INFINITY:
                        case self::BINARY_DOUBLE_NAN:
                        case self::BINARY_FLOAT:
                        case self::BINARY_FLOAT_INFINITY:
                        case self::BINARY_FLOAT_NAN:
                        case self::BINARY_INTEGER:
                        case self::BIND_AWARE:
                        case self::BINDING:
                        case self::BIN_TO_NUM:
                        case self::BITAND:
                        case self::BITMAP_AND:
                        case self::BITMAP:
                        case self::BITMAPS:
                        case self::BITMAP_TREE:
                        case self::BITS:
                        case self::BLOB:
                        case self::BLOCK:
                        case self::BLOCK_RANGE:
                        case self::BLOCKS:
                        case self::BLOCKSIZE:
                        case self::BODY:
                        case self::BOOLEAN:
                        case self::BOTH:
                        case self::BOUND:
                        case self::BRANCH:
                        case self::BREADTH:
                        case self::BROADCAST:
                        case self::BSON:
                        case self::BUFFER:
                        case self::BUFFER_CACHE:
                        case self::BUFFER_POOL:
                        case self::BUILD:
                        case self::BULK:
                        case self::BYPASS_RECURSIVE_CHECK:
                        case self::BYPASS_UJVC:
                        case self::BYTE:
                        case self::CACHE:
                        case self::CACHE_CB:
                        case self::CACHE_INSTANCES:
                        case self::CACHE_TEMP_TABLE:
                        case self::CACHING:
                        case self::CALCULATED:
                        case self::CALLBACK:
                        case self::CALL:
                        case self::CANCEL:
                        case self::CAPACITY:
                        case self::CARDINALITY:
                        case self::CASCADE:
                        case self::CASE:
                        case self::CAST:
                        case self::CATEGORY:
                        case self::CDBDEFAULT:
                        case self::CEIL:
                        case self::CELL_FLASH_CACHE:
                        case self::CERTIFICATE:
                        case self::CFILE:
                        case self::CHAINED:
                        case self::CHANGE:
                        case self::CHANGE_DUPKEY_ERROR_INDEX:
                        case self::CHARACTER:
                        case self::CHAR:
                        case self::CHAR_CS:
                        case self::CHARTOROWID:
                        case self::CHECK_ACL_REWRITE:
                        case self::CHECKPOINT:
                        case self::CHILD:
                        case self::CHOOSE:
                        case self::CHR:
                        case self::CHUNK:
                        case self::CLASS:
                        case self::CLASSIFIER:
                        case self::CLEANUP:
                        case self::CLEAR:
                        case self::C_LETTER:
                        case self::CLIENT:
                        case self::CLOB:
                        case self::CLONE:
                        case self::CLOSE_CACHED_OPEN_CURSORS:
                        case self::CLOSE:
                        case self::CLUSTER_BY_ROWID:
                        case self::CLUSTER:
                        case self::CLUSTER_DETAILS:
                        case self::CLUSTER_DISTANCE:
                        case self::CLUSTER_ID:
                        case self::CLUSTERING:
                        case self::CLUSTERING_FACTOR:
                        case self::CLUSTER_PROBABILITY:
                        case self::CLUSTER_SET:
                        case self::COALESCE:
                        case self::COALESCE_SQ:
                        case self::COARSE:
                        case self::CO_AUTH_IND:
                        case self::COLD:
                        case self::COLLECT:
                        case self::COLUMNAR:
                        case self::COLUMN_AUTH_INDICATOR:
                        case self::COLUMN:
                        case self::COLUMNS:
                        case self::COLUMN_STATS:
                        case self::COLUMN_VALUE:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMMITTED:
                        case self::COMMON_DATA:
                        case self::COMPACT:
                        case self::COMPATIBILITY:
                        case self::COMPILE:
                        case self::COMPLETE:
                        case self::COMPLIANCE:
                        case self::COMPONENT:
                        case self::COMPONENTS:
                        case self::COMPOSE:
                        case self::COMPOSITE:
                        case self::COMPOSITE_LIMIT:
                        case self::COMPOUND:
                        case self::COMPUTE:
                        case self::CONCAT:
                        case self::CON_DBID_TO_ID:
                        case self::CONDITIONAL:
                        case self::CONDITION:
                        case self::CONFIRM:
                        case self::CONFORMING:
                        case self::CON_GUID_TO_ID:
                        case self::CON_ID:
                        case self::CON_NAME_TO_ID:
                        case self::CONNECT_BY_CB_WHR_ONLY:
                        case self::CONNECT_BY_COMBINE_SW:
                        case self::CONNECT_BY_COST_BASED:
                        case self::CONNECT_BY_ELIM_DUPS:
                        case self::CONNECT_BY_FILTERING:
                        case self::CONNECT_BY_ISCYCLE:
                        case self::CONNECT_BY_ISLEAF:
                        case self::CONNECT_BY_ROOT:
                        case self::CONNECT_TIME:
                        case self::CONSIDER:
                        case self::CONSISTENT:
                        case self::CONSTANT:
                        case self::CONST:
                        case self::CONSTRAINT:
                        case self::CONSTRAINTS:
                        case self::CONSTRUCTOR:
                        case self::CONTAINER:
                        case self::CONTAINER_DATA:
                        case self::CONTAINERS:
                        case self::CONTENT:
                        case self::CONTENTS:
                        case self::CONTEXT:
                        case self::CONTINUE:
                        case self::CONTROLFILE:
                        case self::CON_UID_TO_ID:
                        case self::CONVERT:
                        case self::COOKIE:
                        case self::COPY:
                        case self::CORR_K:
                        case self::CORR_S:
                        case self::CORRUPTION:
                        case self::CORRUPT_XID_ALL:
                        case self::CORRUPT_XID:
                        case self::COS:
                        case self::COSH:
                        case self::COST:
                        case self::COST_XML_QUERY_REWRITE:
                        case self::COUNT:
                        case self::COVAR_POP:
                        case self::COVAR_SAMP:
                        case self::CPU_COSTING:
                        case self::CPU_PER_CALL:
                        case self::CPU_PER_SESSION:
                        case self::CRASH:
                        case self::CREATE_FILE_DEST:
                        case self::CREATE_STORED_OUTLINES:
                        case self::CREATION:
                        case self::CREDENTIAL:
                        case self::CRITICAL:
                        case self::CROSS:
                        case self::CROSSEDITION:
                        case self::CSCONVERT:
                        case self::CUBE_AJ:
                        case self::CUBE:
                        case self::CUBE_GB:
                        case self::CUBE_SJ:
                        case self::CUME_DISTM:
                        case self::CURRENT:
                        case self::CURRENT_DATE:
                        case self::CURRENT_SCHEMA:
                        case self::CURRENT_TIME:
                        case self::CURRENT_TIMESTAMP:
                        case self::CURRENT_USER:
                        case self::CURRENTV:
                        case self::CURSOR:
                        case self::CURSOR_SHARING_EXACT:
                        case self::CURSOR_SPECIFIC_SEGMENT:
                        case self::CUSTOMDATUM:
                        case self::CV:
                        case self::CYCLE:
                        case self::DANGLING:
                        case self::DATABASE:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DATAFILES:
                        case self::DATAMOVEMENT:
                        case self::DATAOBJNO:
                        case self::DATAOBJ_TO_MAT_PARTITION:
                        case self::DATAOBJ_TO_PARTITION:
                        case self::DATAPUMP:
                        case self::DATA_SECURITY_REWRITE_LIMIT:
                        case self::DATE_MODE:
                        case self::DAY:
                        case self::DAYS:
                        case self::DBA:
                        case self::DBA_RECYCLEBIN:
                        case self::DBMS_STATS:
                        case self::DB_ROLE_CHANGE:
                        case self::DBTIMEZONE:
                        case self::DB_UNIQUE_NAME:
                        case self::DB_VERSION:
                        case self::DDL:
                        case self::DEALLOCATE:
                        case self::DEBUG:
                        case self::DEBUGGER:
                        case self::DEC:
                        case self::DECIMAL:
                        case self::DECLARE:
                        case self::DECOMPOSE:
                        case self::DECORRELATE:
                        case self::DECR:
                        case self::DECREMENT:
                        case self::DECRYPT:
                        case self::DEDUPLICATE:
                        case self::DEFAULTS:
                        case self::DEFERRABLE:
                        case self::DEFERRED:
                        case self::DEFINED:
                        case self::DEFINE:
                        case self::DEFINER:
                        case self::DEGREE:
                        case self::DELAY:
                        case self::DELEGATE:
                        case self::DELETE_ALL:
                        case self::DELETE:
                        case self::DELETEXML:
                        case self::DEMAND:
                        case self::DENSE_RANKM:
                        case self::DEPENDENT:
                        case self::DEPTH:
                        case self::DEQUEUE:
                        case self::DEREF:
                        case self::DEREF_NO_REWRITE:
                        case self::DESTROY:
                        case self::DETACHED:
                        case self::DETERMINES:
                        case self::DETERMINISTIC:
                        case self::DICTIONARY:
                        case self::DIMENSION:
                        case self::DIMENSIONS:
                        case self::DIRECT_LOAD:
                        case self::DIRECTORY:
                        case self::DIRECT_PATH:
                        case self::DISABLE_ALL:
                        case self::DISABLE:
                        case self::DISABLE_PARALLEL_DML:
                        case self::DISABLE_PRESET:
                        case self::DISABLE_RPKE:
                        case self::DISALLOW:
                        case self::DISASSOCIATE:
                        case self::DISCARD:
                        case self::DISCONNECT:
                        case self::DISK:
                        case self::DISKGROUP:
                        case self::DISKS:
                        case self::DISMOUNT:
                        case self::DISTINGUISHED:
                        case self::DISTRIBUTED:
                        case self::DISTRIBUTE:
                        case self::DML:
                        case self::DML_UPDATE:
                        case self::DOCFIDELITY:
                        case self::DOCUMENT:
                        case self::DOMAIN_INDEX_FILTER:
                        case self::DOMAIN_INDEX_NO_SORT:
                        case self::DOMAIN_INDEX_SORT:
                        case self::DOUBLE:
                        case self::DOWNGRADE:
                        case self::DRIVING_SITE:
                        case self::DROP_COLUMN:
                        case self::DROP_GROUP:
                        case self::DSINTERVAL_UNCONSTRAINED:
                        case self::DST_UPGRADE_INSERT_CONV:
                        case self::DUMP:
                        case self::DUPLICATE:
                        case self::DV:
                        case self::DYNAMIC:
                        case self::DYNAMIC_SAMPLING:
                        case self::DYNAMIC_SAMPLING_EST_CDN:
                        case self::EACH:
                        case self::EDITIONABLE:
                        case self::EDITION:
                        case self::EDITIONING:
                        case self::EDITIONS:
                        case self::ELEMENT:
                        case self::ELIM_GROUPBY:
                        case self::ELIMINATE_JOIN:
                        case self::ELIMINATE_OBY:
                        case self::ELIMINATE_OUTER_JOIN:
                        case self::EM:
                        case self::EMPTY_BLOB:
                        case self::EMPTY_CLOB:
                        case self::EMPTY:
                        case self::ENABLE_ALL:
                        case self::ENABLE:
                        case self::ENABLE_PARALLEL_DML:
                        case self::ENABLE_PRESET:
                        case self::ENCODING:
                        case self::ENCRYPT:
                        case self::ENCRYPTION:
                        case self::END_OUTLINE_DATA:
                        case self::ENFORCED:
                        case self::ENFORCE:
                        case self::ENQUEUE:
                        case self::ENTERPRISE:
                        case self::ENTITYESCAPING:
                        case self::ENTRY:
                        case self::EQUIPART:
                        case self::ERR:
                        case self::ERROR_ARGUMENT:
                        case self::ERROR:
                        case self::ERROR_ON_OVERLAP_TIME:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::ESTIMATE:
                        case self::EVAL:
                        case self::EVALNAME:
                        case self::EVALUATE:
                        case self::EVALUATION:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCEPT:
                        case self::EXCEPTION:
                        case self::EXCEPTION_INIT:
                        case self::EXCEPTIONS:
                        case self::EXCHANGE:
                        case self::EXCLUDE:
                        case self::EXCLUDING:
                        case self::EXECUTE:
                        case self::EXEMPT:
                        case self::EXISTING:
                        case self::EXISTS:
                        case self::EXISTSNODE:
                        case self::EXIT:
                        case self::EXPAND_GSET_TO_UNION:
                        case self::EXPAND_TABLE:
                        case self::EXP:
                        case self::EXPIRE:
                        case self::EXPLAIN:
                        case self::EXPLOSION:
                        case self::EXPORT:
                        case self::EXPR_CORR_CHECK:
                        case self::EXPRESS:
                        case self::EXTENDS:
                        case self::EXTENT:
                        case self::EXTENTS:
                        case self::EXTERNAL:
                        case self::EXTERNALLY:
                        case self::EXTRACTCLOBXML:
                        case self::EXTRACT:
                        case self::EXTRACTVALUE:
                        case self::EXTRA:
                        case self::FACILITY:
                        case self::FACT:
                        case self::FACTOR:
                        case self::FACTORIZE_JOIN:
                        case self::FAILED:
                        case self::FAILED_LOGIN_ATTEMPTS:
                        case self::FAILGROUP:
                        case self::FAILOVER:
                        case self::FAILURE:
                        case self::FALSE:
                        case self::FAMILY:
                        case self::FAR:
                        case self::FAST:
                        case self::FASTSTART:
                        case self::FBTSCAN:
                        case self::FEATURE_DETAILS:
                        case self::FEATURE_ID:
                        case self::FEATURE_SET:
                        case self::FEATURE_VALUE:
                        case self::FETCH:
                        case self::FILE:
                        case self::FILE_NAME_CONVERT:
                        case self::FILESYSTEM_LIKE_LOGGING:
                        case self::FILTER:
                        case self::FINAL:
                        case self::FINE:
                        case self::FINISH:
                        case self::FIRST:
                        case self::FIRSTM:
                        case self::FIRST_ROWS:
                        case self::FIRST_VALUE:
                        case self::FIXED_VIEW_DATA:
                        case self::FLAGGER:
                        case self::FLASHBACK:
                        case self::FLASH_CACHE:
                        case self::FLOAT:
                        case self::FLOB:
                        case self::FLOOR:
                        case self::FLUSH:
                        case self::FOLDER:
                        case self::FOLLOWING:
                        case self::FOLLOWS:
                        case self::FORALL:
                        case self::FORCE:
                        case self::FORCE_XML_QUERY_REWRITE:
                        case self::FOREIGN:
                        case self::FOREVER:
                        case self::FORMAT:
                        case self::FORWARD:
                        case self::FRAGMENT_NUMBER:
                        case self::FREELIST:
                        case self::FREELISTS:
                        case self::FREEPOOLS:
                        case self::FRESH:
                        case self::FROM_TZ:
                        case self::FULL:
                        case self::FULL_OUTER_JOIN_TO_OUTER:
                        case self::FUNCTION:
                        case self::FUNCTIONS:
                        case self::GATHER_OPTIMIZER_STATISTICS:
                        case self::GATHER_PLAN_STATISTICS:
                        case self::GBY_CONC_ROLLUP:
                        case self::GBY_PUSHDOWN:
                        case self::GENERATED:
                        case self::GET:
                        case self::GLOBAL:
                        case self::GLOBALLY:
                        case self::GLOBAL_NAME:
                        case self::GLOBAL_TOPIC_ENABLED:
                        case self::GROUP_BY:
                        case self::GROUP_ID:
                        case self::GROUPING:
                        case self::GROUPING_ID:
                        case self::GROUPS:
                        case self::GUARANTEED:
                        case self::GUARANTEE:
                        case self::GUARD:
                        case self::HASH_AJ:
                        case self::HASH:
                        case self::HASHKEYS:
                        case self::HASH_SJ:
                        case self::HEADER:
                        case self::HEAP:
                        case self::HELP:
                        case self::HEXTORAW:
                        case self::HEXTOREF:
                        case self::HIDDEN_KEYWORD:
                        case self::HIDE:
                        case self::HIERARCHY:
                        case self::HIGH:
                        case self::HINTSET_BEGIN:
                        case self::HINTSET_END:
                        case self::HOT:
                        case self::HOUR:
                        case self::HWM_BROKERED:
                        case self::HYBRID:
                        case self::IDENTIFIER:
                        case self::IDENTITY:
                        case self::IDGENERATORS:
                        case self::ID:
                        case self::IDLE_TIME:
                        case self::IF:
                        case self::IGNORE:
                        case self::IGNORE_OPTIM_EMBEDDED_HINTS:
                        case self::IGNORE_ROW_ON_DUPKEY_INDEX:
                        case self::IGNORE_WHERE_CLAUSE:
                        case self::ILM:
                        case self::IMMEDIATE:
                        case self::IMPACT:
                        case self::IMPORT:
                        case self::INACTIVE:
                        case self::INCLUDE:
                        case self::INCLUDE_VERSION:
                        case self::INCLUDING:
                        case self::INCREMENTAL:
                        case self::INCREMENT:
                        case self::INCR:
                        case self::INDENT:
                        case self::INDEX_ASC:
                        case self::INDEX_COMBINE:
                        case self::INDEX_DESC:
                        case self::INDEXED:
                        case self::INDEXES:
                        case self::INDEX_FFS:
                        case self::INDEX_FILTER:
                        case self::INDEXING:
                        case self::INDEX_JOIN:
                        case self::INDEX_ROWS:
                        case self::INDEX_RRS:
                        case self::INDEX_RS_ASC:
                        case self::INDEX_RS_DESC:
                        case self::INDEX_RS:
                        case self::INDEX_SCAN:
                        case self::INDEX_SKIP_SCAN:
                        case self::INDEX_SS_ASC:
                        case self::INDEX_SS_DESC:
                        case self::INDEX_SS:
                        case self::INDEX_STATS:
                        case self::INDEXTYPE:
                        case self::INDEXTYPES:
                        case self::INDICATOR:
                        case self::INDICES:
                        case self::INFINITE:
                        case self::INFORMATIONAL:
                        case self::INHERIT:
                        case self::INITCAP:
                        case self::INITIAL:
                        case self::INITIALIZED:
                        case self::INITIALLY:
                        case self::INITRANS:
                        case self::INLINE:
                        case self::INLINE_XMLTYPE_NT:
                        case self::INMEMORY:
                        case self::IN_MEMORY_METADATA:
                        case self::INMEMORY_PRUNING:
                        case self::INNER:
                        case self::INOUT:
                        case self::INPLACE:
                        case self::INSERTCHILDXMLAFTER:
                        case self::INSERTCHILDXMLBEFORE:
                        case self::INSERTCHILDXML:
                        case self::INSERTXMLAFTER:
                        case self::INSERTXMLBEFORE:
                        case self::INSTANCE:
                        case self::INSTANCES:
                        case self::INSTANTIABLE:
                        case self::INSTANTLY:
                        case self::INSTEAD:
                        case self::INSTR2:
                        case self::INSTR4:
                        case self::INSTRB:
                        case self::INSTRC:
                        case self::INSTR:
                        case self::INTEGER:
                        case self::INTERLEAVED:
                        case self::INTERMEDIATE:
                        case self::INTERNAL_CONVERT:
                        case self::INTERNAL_USE:
                        case self::INTERPRETED:
                        case self::INTERVAL:
                        case self::INT:
                        case self::INVALIDATE:
                        case self::INVISIBLE:
                        case self::IN_XQUERY:
                        case self::ISOLATION:
                        case self::ISOLATION_LEVEL:
                        case self::ITERATE:
                        case self::ITERATION_NUMBER:
                        case self::JAVA:
                        case self::JOB:
                        case self::JOIN:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_ARRAY:
                        case self::JSON_EQUAL:
                        case self::JSON_EXISTS2:
                        case self::JSON_EXISTS:
                        case self::JSONGET:
                        case self::JSON:
                        case self::JSON_OBJECTAGG:
                        case self::JSON_OBJECT:
                        case self::JSONPARSE:
                        case self::JSON_QUERY:
                        case self::JSON_SERIALIZE:
                        case self::JSON_TABLE:
                        case self::JSON_TEXTCONTAINS2:
                        case self::JSON_TEXTCONTAINS:
                        case self::JSON_VALUE:
                        case self::KEEP_DUPLICATES:
                        case self::KEEP:
                        case self::KERBEROS:
                        case self::KEY:
                        case self::KEY_LENGTH:
                        case self::KEYSIZE:
                        case self::KEYS:
                        case self::KEYSTORE:
                        case self::KILL:
                        case self::LABEL:
                        case self::LANGUAGE:
                        case self::LAST_DAY:
                        case self::LAST:
                        case self::LAST_VALUE:
                        case self::LATERAL:
                        case self::LAX:
                        case self::LAYER:
                        case self::LDAP_REGISTRATION_ENABLED:
                        case self::LDAP_REGISTRATION:
                        case self::LDAP_REG_SYNC_INTERVAL:
                        case self::LEADING:
                        case self::LEFT:
                        case self::LENGTH2:
                        case self::LENGTH4:
                        case self::LENGTHB:
                        case self::LENGTHC:
                        case self::LENGTH:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LEVELS:
                        case self::LIBRARY:
                        case self::LIFECYCLE:
                        case self::LIFE:
                        case self::LIFETIME:
                        case self::LIKE2:
                        case self::LIKE4:
                        case self::LIKEC:
                        case self::LIKE_EXPAND:
                        case self::LIMIT:
                        case self::LINEAR:
                        case self::LINK:
                        case self::LIST:
                        case self::LN:
                        case self::LNNVL:
                        case self::LOAD:
                        case self::LOB:
                        case self::LOBNVL:
                        case self::LOBS:
                        case self::LOCAL_INDEXES:
                        case self::LOCAL:
                        case self::LOCALTIME:
                        case self::LOCALTIMESTAMP:
                        case self::LOCATION:
                        case self::LOCATOR:
                        case self::LOCKED:
                        case self::LOCKING:
                        case self::LOGFILE:
                        case self::LOGFILES:
                        case self::LOGGING:
                        case self::LOGICAL:
                        case self::LOGICAL_READS_PER_CALL:
                        case self::LOGICAL_READS_PER_SESSION:
                        case self::LOG:
                        case self::LOGMINING:
                        case self::LOGOFF:
                        case self::LOGON:
                        case self::LOG_READ_ONLY_VIOLATIONS:
                        case self::LONG:
                        case self::LOOP:
                        case self::LOWER:
                        case self::LOW:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAIN:
                        case self::MAKE_REF:
                        case self::MANAGED:
                        case self::MANAGE:
                        case self::MANAGEMENT:
                        case self::MANAGER:
                        case self::MANUAL:
                        case self::MAP:
                        case self::MAPPING:
                        case self::MASTER:
                        case self::MATCHED:
                        case self::MATCHES:
                        case self::MATCH:
                        case self::MATCH_NUMBER:
                        case self::MATCH_RECOGNIZE:
                        case self::MATERIALIZED:
                        case self::MATERIALIZE:
                        case self::MAXARCHLOGS:
                        case self::MAXDATAFILES:
                        case self::MAXEXTENTS:
                        case self::MAXIMIZE:
                        case self::MAXINSTANCES:
                        case self::MAXLOGFILES:
                        case self::MAXLOGHISTORY:
                        case self::MAXLOGMEMBERS:
                        case self::MAX_SHARED_TEMP_SIZE:
                        case self::MAXSIZE:
                        case self::MAXTRANS:
                        case self::MAXVALUE:
                        case self::MEASURE:
                        case self::MEASURES:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MEMCOMPRESS:
                        case self::MEMORY:
                        case self::MERGEACTIONS:
                        case self::MERGE_AJ:
                        case self::MERGE_CONST_ON:
                        case self::MERGE:
                        case self::MERGE_SJ:
                        case self::METADATA:
                        case self::METHOD:
                        case self::MIGRATE:
                        case self::MIGRATION:
                        case self::MINEXTENTS:
                        case self::MINIMIZE:
                        case self::MINIMUM:
                        case self::MINING:
                        case self::MINUS_NULL:
                        case self::MINUTE:
                        case self::MINVALUE:
                        case self::MIRRORCOLD:
                        case self::MIRRORHOT:
                        case self::MIRROR:
                        case self::MLSLABEL:
                        case self::MODEL_COMPILE_SUBQUERY:
                        case self::MODEL_DONTVERIFY_UNIQUENESS:
                        case self::MODEL_DYNAMIC_SUBQUERY:
                        case self::MODEL_MIN_ANALYSIS:
                        case self::MODEL:
                        case self::MODEL_NB:
                        case self::MODEL_NO_ANALYSIS:
                        case self::MODEL_PBY:
                        case self::MODEL_PUSH_REF:
                        case self::MODEL_SV:
                        case self::MODIFICATION:
                        case self::MODIFY_COLUMN_TYPE:
                        case self::MODIFY:
                        case self::MOD:
                        case self::MODULE:
                        case self::MONITORING:
                        case self::MONITOR:
                        case self::MONTH:
                        case self::MONTHS_BETWEEN:
                        case self::MONTHS:
                        case self::MOUNT:
                        case self::MOUNTPATH:
                        case self::MOVEMENT:
                        case self::MOVE:
                        case self::MULTIDIMENSIONAL:
                        case self::MULTISET:
                        case self::MV_MERGE:
                        case self::NAMED:
                        case self::NAME:
                        case self::NAMESPACE:
                        case self::NAN:
                        case self::NANVL:
                        case self::NATIONAL:
                        case self::NATIVE_FULL_OUTER_JOIN:
                        case self::NATIVE:
                        case self::NATURAL:
                        case self::NAV:
                        case self::NCHAR_CS:
                        case self::NCHAR:
                        case self::NCHR:
                        case self::NCLOB:
                        case self::NEEDED:
                        case self::NEG:
                        case self::NESTED:
                        case self::NESTED_TABLE_FAST_INSERT:
                        case self::NESTED_TABLE_GET_REFS:
                        case self::NESTED_TABLE_ID:
                        case self::NESTED_TABLE_SET_REFS:
                        case self::NESTED_TABLE_SET_SETID:
                        case self::NETWORK:
                        case self::NEVER:
                        case self::NEW:
                        case self::NEW_TIME:
                        case self::NEXT_DAY:
                        case self::NEXT:
                        case self::NL_AJ:
                        case self::NLJ_BATCHING:
                        case self::NLJ_INDEX_FILTER:
                        case self::NLJ_INDEX_SCAN:
                        case self::NLJ_PREFETCH:
                        case self::NLS_CALENDAR:
                        case self::NLS_CHARACTERSET:
                        case self::NLS_CHARSET_DECL_LEN:
                        case self::NLS_CHARSET_ID:
                        case self::NLS_CHARSET_NAME:
                        case self::NLS_COMP:
                        case self::NLS_CURRENCY:
                        case self::NLS_DATE_FORMAT:
                        case self::NLS_DATE_LANGUAGE:
                        case self::NLS_INITCAP:
                        case self::NLS_ISO_CURRENCY:
                        case self::NL_SJ:
                        case self::NLS_LANG:
                        case self::NLS_LANGUAGE:
                        case self::NLS_LENGTH_SEMANTICS:
                        case self::NLS_LOWER:
                        case self::NLS_NCHAR_CONV_EXCP:
                        case self::NLS_NUMERIC_CHARACTERS:
                        case self::NLS_SORT:
                        case self::NLSSORT:
                        case self::NLS_SPECIAL_CHARS:
                        case self::NLS_TERRITORY:
                        case self::NLS_UPPER:
                        case self::NO_ACCESS:
                        case self::NO_ADAPTIVE_PLAN:
                        case self::NO_ANSI_REARCH:
                        case self::NOAPPEND:
                        case self::NOARCHIVELOG:
                        case self::NOAUDIT:
                        case self::NO_AUTO_REOPTIMIZE:
                        case self::NO_BASETABLE_MULTIMV_REWRITE:
                        case self::NO_BATCH_TABLE_ACCESS_BY_ROWID:
                        case self::NO_BIND_AWARE:
                        case self::NO_BUFFER:
                        case self::NOCACHE:
                        case self::NO_CARTESIAN:
                        case self::NO_CHECK_ACL_REWRITE:
                        case self::NO_CLUSTER_BY_ROWID:
                        case self::NO_CLUSTERING:
                        case self::NO_COALESCE_SQ:
                        case self::NO_COMMON_DATA:
                        case self::NO_CONNECT_BY_CB_WHR_ONLY:
                        case self::NO_CONNECT_BY_COMBINE_SW:
                        case self::NO_CONNECT_BY_COST_BASED:
                        case self::NO_CONNECT_BY_ELIM_DUPS:
                        case self::NO_CONNECT_BY_FILTERING:
                        case self::NOCOPY:
                        case self::NO_COST_XML_QUERY_REWRITE:
                        case self::NO_CPU_COSTING:
                        case self::NOCPU_COSTING:
                        case self::NOCYCLE:
                        case self::NO_DATA_SECURITY_REWRITE:
                        case self::NO_DECORRELATE:
                        case self::NODELAY:
                        case self::NO_DOMAIN_INDEX_FILTER:
                        case self::NO_DST_UPGRADE_INSERT_CONV:
                        case self::NO_ELIM_GROUPBY:
                        case self::NO_ELIMINATE_JOIN:
                        case self::NO_ELIMINATE_OBY:
                        case self::NO_ELIMINATE_OUTER_JOIN:
                        case self::NOENTITYESCAPING:
                        case self::NO_EXPAND_GSET_TO_UNION:
                        case self::NO_EXPAND:
                        case self::NO_EXPAND_TABLE:
                        case self::NO_FACT:
                        case self::NO_FACTORIZE_JOIN:
                        case self::NO_FILTERING:
                        case self::NOFORCE:
                        case self::NO_FULL_OUTER_JOIN_TO_OUTER:
                        case self::NO_GATHER_OPTIMIZER_STATISTICS:
                        case self::NO_GBY_PUSHDOWN:
                        case self::NOGUARANTEE:
                        case self::NO_INDEX_FFS:
                        case self::NO_INDEX:
                        case self::NO_INDEX_SS:
                        case self::NO_INMEMORY:
                        case self::NO_INMEMORY_PRUNING:
                        case self::NOKEEP:
                        case self::NO_LOAD:
                        case self::NOLOCAL:
                        case self::NOLOGGING:
                        case self::NOMAPPING:
                        case self::NOMAXVALUE:
                        case self::NO_MERGE:
                        case self::NOMINIMIZE:
                        case self::NOMINVALUE:
                        case self::NO_MODEL_PUSH_REF:
                        case self::NO_MONITORING:
                        case self::NOMONITORING:
                        case self::NO_MONITOR:
                        case self::NO_MULTIMV_REWRITE:
                        case self::NO_NATIVE_FULL_OUTER_JOIN:
                        case self::NONBLOCKING:
                        case self::NONEDITIONABLE:
                        case self::NONE:
                        case self::NO_NLJ_BATCHING:
                        case self::NO_NLJ_PREFETCH:
                        case self::NO:
                        case self::NONSCHEMA:
                        case self::NO_OBJECT_LINK:
                        case self::NOORDER:
                        case self::NO_ORDER_ROLLUPS:
                        case self::NO_OUTER_JOIN_TO_ANTI:
                        case self::NO_OUTER_JOIN_TO_INNER:
                        case self::NOOVERRIDE:
                        case self::NO_PARALLEL_INDEX:
                        case self::NOPARALLEL_INDEX:
                        case self::NO_PARALLEL:
                        case self::NOPARALLEL:
                        case self::NO_PARTIAL_COMMIT:
                        case self::NO_PARTIAL_JOIN:
                        case self::NO_PARTIAL_ROLLUP_PUSHDOWN:
                        case self::NOPARTITION:
                        case self::NO_PLACE_DISTINCT:
                        case self::NO_PLACE_GROUP_BY:
                        case self::NO_PQ_CONCURRENT_UNION:
                        case self::NO_PQ_MAP:
                        case self::NO_PQ_REPLICATE:
                        case self::NO_PQ_SKEW:
                        case self::NO_PRUNE_GSETS:
                        case self::NO_PULL_PRED:
                        case self::NO_PUSH_PRED:
                        case self::NO_PUSH_SUBQ:
                        case self::NO_PX_FAULT_TOLERANCE:
                        case self::NO_PX_JOIN_FILTER:
                        case self::NO_QKN_BUFF:
                        case self::NO_QUERY_TRANSFORMATION:
                        case self::NO_REF_CASCADE:
                        case self::NORELOCATE:
                        case self::NORELY:
                        case self::NOREPAIR:
                        case self::NOREPLAY:
                        case self::NORESETLOGS:
                        case self::NO_RESULT_CACHE:
                        case self::NOREVERSE:
                        case self::NO_REWRITE:
                        case self::NOREWRITE:
                        case self::NORMAL:
                        case self::NO_ROOT_SW_FOR_LOCAL:
                        case self::NOROWDEPENDENCIES:
                        case self::NOSCHEMACHECK:
                        case self::NOSEGMENT:
                        case self::NO_SEMIJOIN:
                        case self::NO_SEMI_TO_INNER:
                        case self::NO_SET_TO_JOIN:
                        case self::NOSORT:
                        case self::NO_SQL_TRANSLATION:
                        case self::NO_SQL_TUNE:
                        case self::NO_STAR_TRANSFORMATION:
                        case self::NO_STATEMENT_QUEUING:
                        case self::NO_STATS_GSETS:
                        case self::NOSTRICT:
                        case self::NO_SUBQUERY_PRUNING:
                        case self::NO_SUBSTRB_PAD:
                        case self::NO_SWAP_JOIN_INPUTS:
                        case self::NOSWITCH:
                        case self::NO_TABLE_LOOKUP_BY_NL:
                        case self::NO_TEMP_TABLE:
                        case self::NOTHING:
                        case self::NOTIFICATION:
                        case self::NO_TRANSFORM_DISTINCT_AGG:
                        case self::NO_UNNEST:
                        case self::NO_USE_CUBE:
                        case self::NO_USE_HASH_AGGREGATION:
                        case self::NO_USE_HASH_GBY_FOR_PUSHDOWN:
                        case self::NO_USE_HASH:
                        case self::NO_USE_INVISIBLE_INDEXES:
                        case self::NO_USE_MERGE:
                        case self::NO_USE_NL:
                        case self::NO_USE_VECTOR_AGGREGATION:
                        case self::NOVALIDATE:
                        case self::NO_VECTOR_TRANSFORM_DIMS:
                        case self::NO_VECTOR_TRANSFORM_FACT:
                        case self::NO_VECTOR_TRANSFORM:
                        case self::NO_XDB_FASTPATH_INSERT:
                        case self::NO_XML_DML_REWRITE:
                        case self::NO_XMLINDEX_REWRITE_IN_SELECT:
                        case self::NO_XMLINDEX_REWRITE:
                        case self::NO_XML_QUERY_REWRITE:
                        case self::NO_ZONEMAP:
                        case self::NTH_VALUE:
                        case self::NULLIF:
                        case self::NULLS:
                        case self::NUMBER:
                        case self::NUMERIC:
                        case self::NUM_INDEX_KEYS:
                        case self::NUMTODSINTERVAL:
                        case self::NUMTOYMINTERVAL:
                        case self::NVARCHAR2:
                        case self::NVL2:
                        case self::OBJECT2XML:
                        case self::OBJECT:
                        case self::OBJ_ID:
                        case self::OBJNO:
                        case self::OBJNO_REUSE:
                        case self::OCCURENCES:
                        case self::OFFLINE:
                        case self::OFF:
                        case self::OFFSET:
                        case self::OIDINDEX:
                        case self::OID:
                        case self::OLAP:
                        case self::OLD:
                        case self::OLD_PUSH_PRED:
                        case self::OLS:
                        case self::OLTP:
                        case self::OMIT:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPAQUE:
                        case self::OPAQUE_TRANSFORM:
                        case self::OPAQUE_XCANONICAL:
                        case self::OPCODE:
                        case self::OPEN:
                        case self::OPERATIONS:
                        case self::OPERATOR:
                        case self::OPT_ESTIMATE:
                        case self::OPTIMAL:
                        case self::OPTIMIZE:
                        case self::OPTIMIZER_FEATURES_ENABLE:
                        case self::OPTIMIZER_GOAL:
                        case self::OPT_PARAM:
                        case self::ORA_BRANCH:
                        case self::ORA_CHECK_ACL:
                        case self::ORA_CHECK_PRIVILEGE:
                        case self::ORA_CLUSTERING:
                        case self::ORADATA:
                        case self::ORADEBUG:
                        case self::ORA_DST_AFFECTED:
                        case self::ORA_DST_CONVERT:
                        case self::ORA_DST_ERROR:
                        case self::ORA_GET_ACLIDS:
                        case self::ORA_GET_PRIVILEGES:
                        case self::ORA_HASH:
                        case self::ORA_INVOKING_USERID:
                        case self::ORA_INVOKING_USER:
                        case self::ORA_INVOKING_XS_USER_GUID:
                        case self::ORA_INVOKING_XS_USER:
                        case self::ORA_RAWCOMPARE:
                        case self::ORA_RAWCONCAT:
                        case self::ORA_ROWSCN:
                        case self::ORA_ROWSCN_RAW:
                        case self::ORA_ROWVERSION:
                        case self::ORA_TABVERSION:
                        case self::ORA_WRITE_TIME:
                        case self::ORDERED:
                        case self::ORDERED_PREDICATES:
                        case self::ORDINALITY:
                        case self::OR_EXPAND:
                        case self::ORGANIZATION:
                        case self::OR_PREDICATES:
                        case self::OSERROR:
                        case self::OTHER:
                        case self::OUTER_JOIN_TO_ANTI:
                        case self::OUTER_JOIN_TO_INNER:
                        case self::OUTER:
                        case self::OUTLINE_LEAF:
                        case self::OUTLINE:
                        case self::OUT_OF_LINE:
                        case self::OUT:
                        case self::OVERFLOW_NOMOVE:
                        case self::OVERFLOW:
                        case self::OVERLAPS:
                        case self::OVER:
                        case self::OVERRIDING:
                        case self::OWNER:
                        case self::OWNERSHIP:
                        case self::OWN:
                        case self::PACKAGE:
                        case self::PACKAGES:
                        case self::PARALLEL_ENABLE:
                        case self::PARALLEL_INDEX:
                        case self::PARALLEL:
                        case self::PARAMETERS:
                        case self::PARAM:
                        case self::PARENT:
                        case self::PARITY:
                        case self::PARTIAL_JOIN:
                        case self::PARTIALLY:
                        case self::PARTIAL:
                        case self::PARTIAL_ROLLUP_PUSHDOWN:
                        case self::PARTITION_HASH:
                        case self::PARTITION_LIST:
                        case self::PARTITION:
                        case self::PARTITION_RANGE:
                        case self::PARTITIONS:
                        case self::PARTNUMINST:
                        case self::PASSING:
                        case self::PASSWORD_GRACE_TIME:
                        case self::PASSWORD_LIFE_TIME:
                        case self::PASSWORD_LOCK_TIME:
                        case self::PASSWORD:
                        case self::PASSWORD_REUSE_MAX:
                        case self::PASSWORD_REUSE_TIME:
                        case self::PASSWORD_VERIFY_FUNCTION:
                        case self::PAST:
                        case self::PATCH:
                        case self::PATH:
                        case self::PATH_PREFIX:
                        case self::PATHS:
                        case self::PATTERN:
                        case self::PBL_HS_BEGIN:
                        case self::PBL_HS_END:
                        case self::PCTINCREASE:
                        case self::PCTTHRESHOLD:
                        case self::PCTUSED:
                        case self::PCTVERSION:
                        case self::PENDING:
                        case self::PERCENT_KEYWORD:
                        case self::PERCENT_RANKM:
                        case self::PERFORMANCE:
                        case self::PERIOD_KEYWORD:
                        case self::PERMANENT:
                        case self::PERMISSION:
                        case self::PERMUTE:
                        case self::PER:
                        case self::PFILE:
                        case self::PHYSICAL:
                        case self::PIKEY:
                        case self::PIPELINED:
                        case self::PIV_GB:
                        case self::PIVOT:
                        case self::PIV_SSF:
                        case self::PLACE_DISTINCT:
                        case self::PLACE_GROUP_BY:
                        case self::PLAN:
                        case self::PLSCOPE_SETTINGS:
                        case self::PLS_INTEGER:
                        case self::PLSQL_CCFLAGS:
                        case self::PLSQL_CODE_TYPE:
                        case self::PLSQL_DEBUG:
                        case self::PLSQL_OPTIMIZE_LEVEL:
                        case self::PLSQL_WARNINGS:
                        case self::PLUGGABLE:
                        case self::POINT:
                        case self::POLICY:
                        case self::POOL_16K:
                        case self::POOL_2K:
                        case self::POOL_32K:
                        case self::POOL_4K:
                        case self::POOL_8K:
                        case self::POSITIVEN:
                        case self::POSITIVE:
                        case self::POST_TRANSACTION:
                        case self::POWERMULTISET_BY_CARDINALITY:
                        case self::POWERMULTISET:
                        case self::POWER:
                        case self::PQ_CONCURRENT_UNION:
                        case self::PQ_DISTRIBUTE:
                        case self::PQ_DISTRIBUTE_WINDOW:
                        case self::PQ_FILTER:
                        case self::PQ_MAP:
                        case self::PQ_NOMAP:
                        case self::PQ_REPLICATE:
                        case self::PQ_SKEW:
                        case self::PRAGMA:
                        case self::PREBUILT:
                        case self::PRECEDES:
                        case self::PRECEDING:
                        case self::PRECISION:
                        case self::PRECOMPUTE_SUBQUERY:
                        case self::PREDICATE_REORDERS:
                        case self::PRELOAD:
                        case self::PREPARE:
                        case self::PRESENTNNV:
                        case self::PRESENT:
                        case self::PRESENTV:
                        case self::PRESERVE_OID:
                        case self::PRESERVE:
                        case self::PRETTY:
                        case self::PREVIOUS:
                        case self::PREV:
                        case self::PRIMARY:
                        case self::PRINTBLOBTOCLOB:
                        case self::PRIORITY:
                        case self::PRIVATE:
                        case self::PRIVATE_SGA:
                        case self::PRIVILEGED:
                        case self::PRIVILEGE:
                        case self::PRIVILEGES:
                        case self::PROCEDURAL:
                        case self::PROCEDURE:
                        case self::PROCESS:
                        case self::PROFILE:
                        case self::PROGRAM:
                        case self::PROJECT:
                        case self::PROPAGATE:
                        case self::PROTECTED:
                        case self::PROTECTION:
                        case self::PROXY:
                        case self::PRUNING:
                        case self::PULL_PRED:
                        case self::PURGE:
                        case self::PUSH_PRED:
                        case self::PUSH_SUBQ:
                        case self::PX_FAULT_TOLERANCE:
                        case self::PX_GRANULE:
                        case self::PX_JOIN_FILTER:
                        case self::QB_NAME:
                        case self::QUERY_BLOCK:
                        case self::QUERY:
                        case self::QUEUE_CURR:
                        case self::QUEUE:
                        case self::QUEUE_ROWP:
                        case self::QUIESCE:
                        case self::QUORUM:
                        case self::QUOTA:
                        case self::RAISE:
                        case self::RANDOM_LOCAL:
                        case self::RANDOM:
                        case self::RANGE:
                        case self::RANKM:
                        case self::RAPIDLY:
                        case self::RAW:
                        case self::RAWTOHEX:
                        case self::RAWTONHEX:
                        case self::RBA:
                        case self::RBO_OUTLINE:
                        case self::RDBA:
                        case self::READ:
                        case self::READS:
                        case self::REALM:
                        case self::REAL:
                        case self::REBALANCE:
                        case self::REBUILD:
                        case self::RECORD:
                        case self::RECORDS_PER_BLOCK:
                        case self::RECOVERABLE:
                        case self::RECOVER:
                        case self::RECOVERY:
                        case self::RECYCLEBIN:
                        case self::RECYCLE:
                        case self::REDACTION:
                        case self::REDEFINE:
                        case self::REDO:
                        case self::REDUCED:
                        case self::REDUNDANCY:
                        case self::REF_CASCADE_CURSOR:
                        case self::REFERENCED:
                        case self::REFERENCE:
                        case self::REFERENCES:
                        case self::REFERENCING:
                        case self::REF:
                        case self::REFRESH:
                        case self::REFTOHEX:
                        case self::REGEXP_COUNT:
                        case self::REGEXP_INSTR:
                        case self::REGEXP_LIKE:
                        case self::REGEXP_REPLACE:
                        case self::REGEXP_SUBSTR:
                        case self::REGISTER:
                        case self::REGR_AVGX:
                        case self::REGR_AVGY:
                        case self::REGR_COUNT:
                        case self::REGR_INTERCEPT:
                        case self::REGR_R2:
                        case self::REGR_SLOPE:
                        case self::REGR_SXX:
                        case self::REGR_SXY:
                        case self::REGR_SYY:
                        case self::REGULAR:
                        case self::REJECT:
                        case self::REKEY:
                        case self::RELATIONAL:
                        case self::RELOCATE:
                        case self::RELY:
                        case self::REMAINDER:
                        case self::REMOTE_MAPPED:
                        case self::REMOVE:
                        case self::RENAME:
                        case self::REPAIR:
                        case self::REPEAT:
                        case self::REPLACE:
                        case self::REPLICATION:
                        case self::REQUIRED:
                        case self::RESETLOGS:
                        case self::RESET:
                        case self::RESIZE:
                        case self::RESOLVE:
                        case self::RESOLVER:
                        case self::RESPECT:
                        case self::RESTART:
                        case self::RESTORE_AS_INTERVALS:
                        case self::RESTORE:
                        case self::RESTRICT_ALL_REF_CONS:
                        case self::RESTRICTED:
                        case self::RESTRICT_REFERENCES:
                        case self::RESTRICT:
                        case self::RESULT_CACHE:
                        case self::RESULT:
                        case self::RESUMABLE:
                        case self::RESUME:
                        case self::RETENTION:
                        case self::RETRY_ON_ROW_CHANGE:
                        case self::RETURNING:
                        case self::RETURN:
                        case self::REUSE:
                        case self::REVERSE:
                        case self::REWRITE_OR_ERROR:
                        case self::REWRITE:
                        case self::RIGHT:
                        case self::ROLE:
                        case self::ROLESET:
                        case self::ROLES:
                        case self::ROLLBACK:
                        case self::ROLLING:
                        case self::ROLLUP:
                        case self::ROWDEPENDENCIES:
                        case self::ROWID_MAPPING_TABLE:
                        case self::ROWID:
                        case self::ROWIDTOCHAR:
                        case self::ROWIDTONCHAR:
                        case self::ROW_LENGTH:
                        case self::ROWNUM:
                        case self::ROW:
                        case self::ROWS:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::RULE:
                        case self::RULES:
                        case self::RUNNING:
                        case self::SALT:
                        case self::SAMPLE:
                        case self::SAVE_AS_INTERVALS:
                        case self::SAVEPOINT:
                        case self::SAVE:
                        case self::SB4:
                        case self::SCALE_ROWS:
                        case self::SCALE:
                        case self::SCAN_INSTANCES:
                        case self::SCAN:
                        case self::SCHEDULER:
                        case self::SCHEMACHECK:
                        case self::SCHEMA:
                        case self::SCN_ASCENDING:
                        case self::SCN:
                        case self::SCOPE:
                        case self::SCRUB:
                        case self::SD_ALL:
                        case self::SD_INHIBIT:
                        case self::SDO_GEOM_MBR:
                        case self::SD_SHOW:
                        case self::SEARCH:
                        case self::SECOND:
                        case self::SECRET:
                        case self::SECUREFILE_DBA:
                        case self::SECUREFILE:
                        case self::SECURITY:
                        case self::SEED:
                        case self::SEG_BLOCK:
                        case self::SEG_FILE:
                        case self::SEGMENT:
                        case self::SELECTIVITY:
                        case self::SELF:
                        case self::SEMIJOIN_DRIVER:
                        case self::SEMIJOIN:
                        case self::SEMI_TO_INNER:
                        case self::SEQUENCED:
                        case self::SEQUENCE:
                        case self::SEQUENTIAL:
                        case self::SERIALIZABLE:
                        case self::SERIALLY_REUSABLE:
                        case self::SERIAL:
                        case self::SERVERERROR:
                        case self::SERVICE_NAME_CONVERT:
                        case self::SERVICES:
                        case self::SESSION_CACHED_CURSORS:
                        case self::SESSION:
                        case self::SESSIONS_PER_USER:
                        case self::SESSIONTIMEZONE:
                        case self::SESSIONTZNAME:
                        case self::SET:
                        case self::SETS:
                        case self::SETTINGS:
                        case self::SET_TO_JOIN:
                        case self::SEVERE:
                        case self::SHARED_POOL:
                        case self::SHARED:
                        case self::SHARING:
                        case self::SHELFLIFE:
                        case self::SHOW:
                        case self::SHRINK:
                        case self::SHUTDOWN:
                        case self::SIBLINGS:
                        case self::SID:
                        case self::SIGNAL_COMPONENT:
                        case self::SIGNAL_FUNCTION:
                        case self::SIGN:
                        case self::SIGNTYPE:
                        case self::SIMPLE_INTEGER:
                        case self::SIMPLE:
                        case self::SINGLE:
                        case self::SINGLETASK:
                        case self::SINH:
                        case self::SIN:
                        case self::SKIP_EXT_OPTIMIZER:
                        case self::SKIP_:
                        case self::SKIP_UNQ_UNUSABLE_IDX:
                        case self::SKIP_UNUSABLE_INDEXES:
                        case self::SMALLFILE:
                        case self::SMALLINT:
                        case self::SNAPSHOT:
                        case self::SOME:
                        case self::SORT:
                        case self::SOUNDEX:
                        case self::SOURCE_FILE_DIRECTORY:
                        case self::SOURCE_FILE_NAME_CONVERT:
                        case self::SOURCE:
                        case self::SPACE_KEYWORD:
                        case self::SPECIFICATION:
                        case self::SPFILE:
                        case self::SPLIT:
                        case self::SPREADSHEET:
                        case self::SQLDATA:
                        case self::SQLERROR:
                        case self::SQLLDR:
                        case self::SQL:
                        case self::SQL_TRACE:
                        case self::SQL_TRANSLATION_PROFILE:
                        case self::SQRT:
                        case self::STALE:
                        case self::STANDALONE:
                        case self::STANDARD_HASH:
                        case self::STANDBY_MAX_DATA_DELAY:
                        case self::STANDBYS:
                        case self::STANDBY:
                        case self::STAR:
                        case self::STAR_TRANSFORMATION:
                        case self::STARTUP:
                        case self::STATEMENT_ID:
                        case self::STATEMENT_QUEUING:
                        case self::STATEMENTS:
                        case self::STATEMENT:
                        case self::STATE:
                        case self::STATIC:
                        case self::STATISTICS:
                        case self::STATS_BINOMIAL_TEST:
                        case self::STATS_CROSSTAB:
                        case self::STATS_F_TEST:
                        case self::STATS_KS_TEST:
                        case self::STATS_MODE:
                        case self::STATS_MW_TEST:
                        case self::STATS_ONE_WAY_ANOVA:
                        case self::STATS_T_TEST_INDEP:
                        case self::STATS_T_TEST_INDEPU:
                        case self::STATS_T_TEST_ONE:
                        case self::STATS_T_TEST_PAIRED:
                        case self::STATS_WSR_TEST:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STORE:
                        case self::STREAMS:
                        case self::STREAM:
                        case self::STRICT:
                        case self::STRING:
                        case self::STRIPE_COLUMNS:
                        case self::STRIPE_WIDTH:
                        case self::STRIP:
                        case self::STRUCTURE:
                        case self::SUBMULTISET:
                        case self::SUBPARTITION_REL:
                        case self::SUBPARTITIONS:
                        case self::SUBPARTITION:
                        case self::SUBQUERIES:
                        case self::SUBQUERY_PRUNING:
                        case self::SUBSCRIBE:
                        case self::SUBSET:
                        case self::SUBSTITUTABLE:
                        case self::SUBSTR2:
                        case self::SUBSTR4:
                        case self::SUBSTRB:
                        case self::SUBSTRC:
                        case self::SUBTYPE:
                        case self::SUCCESSFUL:
                        case self::SUCCESS:
                        case self::SUMMARY:
                        case self::SUPPLEMENTAL:
                        case self::SUSPEND:
                        case self::SWAP_JOIN_INPUTS:
                        case self::SWITCHOVER:
                        case self::SWITCH:
                        case self::SYNCHRONOUS:
                        case self::SYNC:
                        case self::SYSASM:
                        case self::SYS_AUDIT:
                        case self::SYSAUX:
                        case self::SYSBACKUP:
                        case self::SYS_CHECKACL:
                        case self::SYS_CHECK_PRIVILEGE:
                        case self::SYS_CONNECT_BY_PATH:
                        case self::SYS_CONTEXT:
                        case self::SYSDATE:
                        case self::SYSDBA:
                        case self::SYS_DBURIGEN:
                        case self::SYSDG:
                        case self::SYS_DL_CURSOR:
                        case self::SYS_DM_RXFORM_CHR:
                        case self::SYS_DM_RXFORM_NUM:
                        case self::SYS_DOM_COMPARE:
                        case self::SYS_DST_PRIM2SEC:
                        case self::SYS_DST_SEC2PRIM:
                        case self::SYS_ET_BFILE_TO_RAW:
                        case self::SYS_ET_BLOB_TO_IMAGE:
                        case self::SYS_ET_IMAGE_TO_BLOB:
                        case self::SYS_ET_RAW_TO_BFILE:
                        case self::SYS_EXTPDTXT:
                        case self::SYS_EXTRACT_UTC:
                        case self::SYS_FBT_INSDEL:
                        case self::SYS_FILTER_ACLS:
                        case self::SYS_FNMATCHES:
                        case self::SYS_FNREPLACE:
                        case self::SYS_GET_ACLIDS:
                        case self::SYS_GET_COL_ACLIDS:
                        case self::SYS_GET_PRIVILEGES:
                        case self::SYS_GETTOKENID:
                        case self::SYS_GETXTIVAL:
                        case self::SYS_GUID:
                        case self::SYSGUID:
                        case self::SYSKM:
                        case self::SYS_MAKE_XMLNODEID:
                        case self::SYS_MAKEXML:
                        case self::SYS_MKXMLATTR:
                        case self::SYS_MKXTI:
                        case self::SYSOBJ:
                        case self::SYS_OP_ADT2BIN:
                        case self::SYS_OP_ADTCONS:
                        case self::SYS_OP_ALSCRVAL:
                        case self::SYS_OP_ATG:
                        case self::SYS_OP_BIN2ADT:
                        case self::SYS_OP_BITVEC:
                        case self::SYS_OP_BL2R:
                        case self::SYS_OP_BLOOM_FILTER_LIST:
                        case self::SYS_OP_BLOOM_FILTER:
                        case self::SYS_OP_C2C:
                        case self::SYS_OP_CAST:
                        case self::SYS_OP_CEG:
                        case self::SYS_OP_CL2C:
                        case self::SYS_OP_COMBINED_HASH:
                        case self::SYS_OP_COMP:
                        case self::SYS_OP_CONVERT:
                        case self::SYS_OP_COUNTCHG:
                        case self::SYS_OP_CSCONV:
                        case self::SYS_OP_CSCONVTEST:
                        case self::SYS_OP_CSR:
                        case self::SYS_OP_CSX_PATCH:
                        case self::SYS_OP_CYCLED_SEQ:
                        case self::SYS_OP_DECOMP:
                        case self::SYS_OP_DESCEND:
                        case self::SYS_OP_DISTINCT:
                        case self::SYS_OP_DRA:
                        case self::SYS_OP_DUMP:
                        case self::SYS_OP_DV_CHECK:
                        case self::SYS_OP_ENFORCE_NOT_NULL:
                        case self::SYSOPER:
                        case self::SYS_OP_EXTRACT:
                        case self::SYS_OP_GROUPING:
                        case self::SYS_OP_GUID:
                        case self::SYS_OP_HASH:
                        case self::SYS_OP_IIX:
                        case self::SYS_OP_ITR:
                        case self::SYS_OP_KEY_VECTOR_CREATE:
                        case self::SYS_OP_KEY_VECTOR_FILTER_LIST:
                        case self::SYS_OP_KEY_VECTOR_FILTER:
                        case self::SYS_OP_KEY_VECTOR_SUCCEEDED:
                        case self::SYS_OP_KEY_VECTOR_USE:
                        case self::SYS_OP_LBID:
                        case self::SYS_OP_LOBLOC2BLOB:
                        case self::SYS_OP_LOBLOC2CLOB:
                        case self::SYS_OP_LOBLOC2ID:
                        case self::SYS_OP_LOBLOC2NCLOB:
                        case self::SYS_OP_LOBLOC2TYP:
                        case self::SYS_OP_LSVI:
                        case self::SYS_OP_LVL:
                        case self::SYS_OP_MAKEOID:
                        case self::SYS_OP_MAP_NONNULL:
                        case self::SYS_OP_MSR:
                        case self::SYS_OP_NICOMBINE:
                        case self::SYS_OP_NIEXTRACT:
                        case self::SYS_OP_NII:
                        case self::SYS_OP_NIX:
                        case self::SYS_OP_NOEXPAND:
                        case self::SYS_OP_NTCIMG:
                        case self::SYS_OP_NUMTORAW:
                        case self::SYS_OP_OIDVALUE:
                        case self::SYS_OP_OPNSIZE:
                        case self::SYS_OP_PAR_1:
                        case self::SYS_OP_PARGID_1:
                        case self::SYS_OP_PARGID:
                        case self::SYS_OP_PAR:
                        case self::SYS_OP_PART_ID:
                        case self::SYS_OP_PIVOT:
                        case self::SYS_OP_R2O:
                        case self::SYS_OP_RAWTONUM:
                        case self::SYS_OP_RDTM:
                        case self::SYS_OP_REF:
                        case self::SYS_OP_RMTD:
                        case self::SYS_OP_ROWIDTOOBJ:
                        case self::SYS_OP_RPB:
                        case self::SYS_OPTLOBPRBSC:
                        case self::SYS_OP_TOSETID:
                        case self::SYS_OP_TPR:
                        case self::SYS_OP_TRTB:
                        case self::SYS_OPTXICMP:
                        case self::SYS_OPTXQCASTASNQ:
                        case self::SYS_OP_UNDESCEND:
                        case self::SYS_OP_VECAND:
                        case self::SYS_OP_VECBIT:
                        case self::SYS_OP_VECOR:
                        case self::SYS_OP_VECXOR:
                        case self::SYS_OP_VERSION:
                        case self::SYS_OP_VREF:
                        case self::SYS_OP_VVD:
                        case self::SYS_OP_XMLCONS_FOR_CSX:
                        case self::SYS_OP_XPTHATG:
                        case self::SYS_OP_XPTHIDX:
                        case self::SYS_OP_XPTHOP:
                        case self::SYS_OP_XTXT2SQLT:
                        case self::SYS_OP_ZONE_ID:
                        case self::SYS_ORDERKEY_DEPTH:
                        case self::SYS_ORDERKEY_MAXCHILD:
                        case self::SYS_ORDERKEY_PARENT:
                        case self::SYS_PARALLEL_TXN:
                        case self::SYS_PATHID_IS_ATTR:
                        case self::SYS_PATHID_IS_NMSPC:
                        case self::SYS_PATHID_LASTNAME:
                        case self::SYS_PATHID_LASTNMSPC:
                        case self::SYS_PATH_REVERSE:
                        case self::SYS_PXQEXTRACT:
                        case self::SYS_RAW_TO_XSID:
                        case self::SYS_RID_ORDER:
                        case self::SYS_ROW_DELTA:
                        case self::SYS_SC_2_XMLT:
                        case self::SYS_SYNRCIREDO:
                        case self::SYSTEM_DEFINED:
                        case self::SYSTEM:
                        case self::SYSTIMESTAMP:
                        case self::SYS_TYPEID:
                        case self::SYS_UMAKEXML:
                        case self::SYS_XMLANALYZE:
                        case self::SYS_XMLCONTAINS:
                        case self::SYS_XMLCONV:
                        case self::SYS_XMLEXNSURI:
                        case self::SYS_XMLGEN:
                        case self::SYS_XMLI_LOC_ISNODE:
                        case self::SYS_XMLI_LOC_ISTEXT:
                        case self::SYS_XMLINSTR:
                        case self::SYS_XMLLOCATOR_GETSVAL:
                        case self::SYS_XMLNODEID_GETCID:
                        case self::SYS_XMLNODEID_GETLOCATOR:
                        case self::SYS_XMLNODEID_GETOKEY:
                        case self::SYS_XMLNODEID_GETPATHID:
                        case self::SYS_XMLNODEID_GETPTRID:
                        case self::SYS_XMLNODEID_GETRID:
                        case self::SYS_XMLNODEID_GETSVAL:
                        case self::SYS_XMLNODEID_GETTID:
                        case self::SYS_XMLNODEID:
                        case self::SYS_XMLT_2_SC:
                        case self::SYS_XMLTRANSLATE:
                        case self::SYS_XMLTYPE2SQL:
                        case self::SYS_XQ_ASQLCNV:
                        case self::SYS_XQ_ATOMCNVCHK:
                        case self::SYS_XQBASEURI:
                        case self::SYS_XQCASTABLEERRH:
                        case self::SYS_XQCODEP2STR:
                        case self::SYS_XQCODEPEQ:
                        case self::SYS_XQCON2SEQ:
                        case self::SYS_XQCONCAT:
                        case self::SYS_XQDELETE:
                        case self::SYS_XQDFLTCOLATION:
                        case self::SYS_XQDOC:
                        case self::SYS_XQDOCURI:
                        case self::SYS_XQDURDIV:
                        case self::SYS_XQED4URI:
                        case self::SYS_XQENDSWITH:
                        case self::SYS_XQERRH:
                        case self::SYS_XQERR:
                        case self::SYS_XQESHTMLURI:
                        case self::SYS_XQEXLOBVAL:
                        case self::SYS_XQEXSTWRP:
                        case self::SYS_XQEXTRACT:
                        case self::SYS_XQEXTRREF:
                        case self::SYS_XQEXVAL:
                        case self::SYS_XQFB2STR:
                        case self::SYS_XQFNBOOL:
                        case self::SYS_XQFNCMP:
                        case self::SYS_XQFNDATIM:
                        case self::SYS_XQFNLNAME:
                        case self::SYS_XQFNNM:
                        case self::SYS_XQFNNSURI:
                        case self::SYS_XQFNPREDTRUTH:
                        case self::SYS_XQFNQNM:
                        case self::SYS_XQFNROOT:
                        case self::SYS_XQFORMATNUM:
                        case self::SYS_XQFTCONTAIN:
                        case self::SYS_XQFUNCR:
                        case self::SYS_XQGETCONTENT:
                        case self::SYS_XQINDXOF:
                        case self::SYS_XQINSERT:
                        case self::SYS_XQINSPFX:
                        case self::SYS_XQIRI2URI:
                        case self::SYS_XQLANG:
                        case self::SYS_XQLLNMFRMQNM:
                        case self::SYS_XQMKNODEREF:
                        case self::SYS_XQNILLED:
                        case self::SYS_XQNODENAME:
                        case self::SYS_XQNORMSPACE:
                        case self::SYS_XQNORMUCODE:
                        case self::SYS_XQ_NRNG:
                        case self::SYS_XQNSP4PFX:
                        case self::SYS_XQNSPFRMQNM:
                        case self::SYS_XQPFXFRMQNM:
                        case self::SYS_XQ_PKSQL2XML:
                        case self::SYS_XQPOLYABS:
                        case self::SYS_XQPOLYADD:
                        case self::SYS_XQPOLYCEL:
                        case self::SYS_XQPOLYCSTBL:
                        case self::SYS_XQPOLYCST:
                        case self::SYS_XQPOLYDIV:
                        case self::SYS_XQPOLYFLR:
                        case self::SYS_XQPOLYMOD:
                        case self::SYS_XQPOLYMUL:
                        case self::SYS_XQPOLYRND:
                        case self::SYS_XQPOLYSQRT:
                        case self::SYS_XQPOLYSUB:
                        case self::SYS_XQPOLYUMUS:
                        case self::SYS_XQPOLYUPLS:
                        case self::SYS_XQPOLYVEQ:
                        case self::SYS_XQPOLYVGE:
                        case self::SYS_XQPOLYVGT:
                        case self::SYS_XQPOLYVLE:
                        case self::SYS_XQPOLYVLT:
                        case self::SYS_XQPOLYVNE:
                        case self::SYS_XQREF2VAL:
                        case self::SYS_XQRENAME:
                        case self::SYS_XQREPLACE:
                        case self::SYS_XQRESVURI:
                        case self::SYS_XQRNDHALF2EVN:
                        case self::SYS_XQRSLVQNM:
                        case self::SYS_XQRYENVPGET:
                        case self::SYS_XQRYVARGET:
                        case self::SYS_XQRYWRP:
                        case self::SYS_XQSEQ2CON4XC:
                        case self::SYS_XQSEQ2CON:
                        case self::SYS_XQSEQDEEPEQ:
                        case self::SYS_XQSEQINSB:
                        case self::SYS_XQSEQRM:
                        case self::SYS_XQSEQRVS:
                        case self::SYS_XQSEQSUB:
                        case self::SYS_XQSEQTYPMATCH:
                        case self::SYS_XQSTARTSWITH:
                        case self::SYS_XQSTATBURI:
                        case self::SYS_XQSTR2CODEP:
                        case self::SYS_XQSTRJOIN:
                        case self::SYS_XQSUBSTRAFT:
                        case self::SYS_XQSUBSTRBEF:
                        case self::SYS_XQTOKENIZE:
                        case self::SYS_XQTREATAS:
                        case self::SYS_XQ_UPKXML2SQL:
                        case self::SYS_XQXFORM:
                        case self::SYS_XSID_TO_RAW:
                        case self::SYS_ZMAP_FILTER:
                        case self::SYS_ZMAP_REFRESH:
                        case self::TABLE_LOOKUP_BY_NL:
                        case self::TABLESPACE_NO:
                        case self::TABLESPACE:
                        case self::TABLES:
                        case self::TABLE_STATS:
                        case self::TABLE:
                        case self::TABNO:
                        case self::TAG:
                        case self::TANH:
                        case self::TAN:
                        case self::TBLORIDXPARTNUM:
                        case self::TEMPFILE:
                        case self::TEMPLATE:
                        case self::TEMPORARY:
                        case self::TEMP_TABLE:
                        case self::TEST:
                        case self::TEXT:
                        case self::THAN:
                        case self::THEN:
                        case self::THE:
                        case self::THREAD:
                        case self::THROUGH:
                        case self::TIER:
                        case self::TIES:
                        case self::TIMEOUT:
                        case self::TIMESTAMP_LTZ_UNCONSTRAINED:
                        case self::TIMESTAMP:
                        case self::TIMESTAMP_TZ_UNCONSTRAINED:
                        case self::TIMESTAMP_UNCONSTRAINED:
                        case self::TIMES:
                        case self::TIME:
                        case self::TIMEZONE_ABBR:
                        case self::TIMEZONE_HOUR:
                        case self::TIMEZONE_MINUTE:
                        case self::TIMEZONE_OFFSET:
                        case self::TIMEZONE_REGION:
                        case self::TIME_ZONE:
                        case self::TIV_GB:
                        case self::TIV_SSF:
                        case self::TO_ACLID:
                        case self::TO_BINARY_DOUBLE:
                        case self::TO_BINARY_FLOAT:
                        case self::TO_BLOB:
                        case self::TO_CLOB:
                        case self::TO_DSINTERVAL:
                        case self::TO_LOB:
                        case self::TO_MULTI_BYTE:
                        case self::TO_NCHAR:
                        case self::TO_NCLOB:
                        case self::TO_NUMBER:
                        case self::TOPLEVEL:
                        case self::TO_SINGLE_BYTE:
                        case self::TO_TIMESTAMP:
                        case self::TO_TIMESTAMP_TZ:
                        case self::TO_TIME:
                        case self::TO_TIME_TZ:
                        case self::TO_YMINTERVAL:
                        case self::TRACE:
                        case self::TRACING:
                        case self::TRACKING:
                        case self::TRAILING:
                        case self::TRANSACTION:
                        case self::TRANSFORM_DISTINCT_AGG:
                        case self::TRANSITIONAL:
                        case self::TRANSITION:
                        case self::TRANSLATE:
                        case self::TRANSLATION:
                        case self::TREAT:
                        case self::TRIGGERS:
                        case self::TRIGGER:
                        case self::TRUE:
                        case self::TRUNCATE:
                        case self::TRUNC:
                        case self::TRUSTED:
                        case self::TRUST:
                        case self::TUNING:
                        case self::TX:
                        case self::TYPES:
                        case self::TYPE:
                        case self::TZ_OFFSET:
                        case self::UB2:
                        case self::UBA:
                        case self::UCS2:
                        case self::UID:
                        case self::UNARCHIVED:
                        case self::UNBOUNDED:
                        case self::UNBOUND:
                        case self::UNCONDITIONAL:
                        case self::UNDER:
                        case self::UNDO:
                        case self::UNDROP:
                        case self::UNIFORM:
                        case self::UNISTR:
                        case self::UNLIMITED:
                        case self::UNLOAD:
                        case self::UNLOCK:
                        case self::UNMATCHED:
                        case self::UNNEST_INNERJ_DISTINCT_VIEW:
                        case self::UNNEST_NOSEMIJ_NODISTINCTVIEW:
                        case self::UNNEST_SEMIJ_VIEW:
                        case self::UNNEST:
                        case self::UNPACKED:
                        case self::UNPIVOT:
                        case self::UNPLUG:
                        case self::UNPROTECTED:
                        case self::UNQUIESCE:
                        case self::UNRECOVERABLE:
                        case self::UNRESTRICTED:
                        case self::UNSUBSCRIBE:
                        case self::UNTIL:
                        case self::UNUSABLE:
                        case self::UNUSED:
                        case self::UPDATABLE:
                        case self::UPDATED:
                        case self::UPDATEXML:
                        case self::UPD_INDEXES:
                        case self::UPD_JOININDEX:
                        case self::UPGRADE:
                        case self::UPPER:
                        case self::UPSERT:
                        case self::UROWID:
                        case self::USABLE:
                        case self::USAGE:
                        case self::USE_ANTI:
                        case self::USE_CONCAT:
                        case self::USE_CUBE:
                        case self::USE_HASH_AGGREGATION:
                        case self::USE_HASH_GBY_FOR_PUSHDOWN:
                        case self::USE_HASH:
                        case self::USE_HIDDEN_PARTITIONS:
                        case self::USE_INVISIBLE_INDEXES:
                        case self::USE_MERGE_CARTESIAN:
                        case self::USE_MERGE:
                        case self::USE_NL:
                        case self::USE_NL_WITH_INDEX:
                        case self::USE_PRIVATE_OUTLINES:
                        case self::USER_DATA:
                        case self::USER_DEFINED:
                        case self::USERENV:
                        case self::USERGROUP:
                        case self::USER_RECYCLEBIN:
                        case self::USERS:
                        case self::USER_TABLESPACES:
                        case self::USER:
                        case self::USE_SEMI:
                        case self::USE_STORED_OUTLINES:
                        case self::USE_TTT_FOR_GSETS:
                        case self::USE:
                        case self::USE_VECTOR_AGGREGATION:
                        case self::USE_WEAK_NAME_RESL:
                        case self::USING_NO_EXPAND:
                        case self::USING:
                        case self::UTF16BE:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::V1:
                        case self::V2:
                        case self::VALIDATE:
                        case self::VALIDATION:
                        case self::VALID_TIME_END:
                        case self::VALUE:
                        case self::VARCHAR2:
                        case self::VARCHAR:
                        case self::VARIABLE:
                        case self::VAR_POP:
                        case self::VARRAYS:
                        case self::VARRAY:
                        case self::VAR_SAMP:
                        case self::VARYING:
                        case self::VECTOR_READ_TRACE:
                        case self::VECTOR_READ:
                        case self::VECTOR_TRANSFORM_DIMS:
                        case self::VECTOR_TRANSFORM_FACT:
                        case self::VECTOR_TRANSFORM:
                        case self::VERIFIER:
                        case self::VERIFY:
                        case self::VERSIONING:
                        case self::VERSIONS_ENDSCN:
                        case self::VERSIONS_ENDTIME:
                        case self::VERSIONS_OPERATION:
                        case self::VERSIONS_STARTSCN:
                        case self::VERSIONS_STARTTIME:
                        case self::VERSIONS:
                        case self::VERSIONS_XID:
                        case self::VERSION:
                        case self::VIOLATION:
                        case self::VIRTUAL:
                        case self::VISIBILITY:
                        case self::VISIBLE:
                        case self::VOLUME:
                        case self::VSIZE:
                        case self::WAIT:
                        case self::WALLET:
                        case self::WARNING:
                        case self::WEEKS:
                        case self::WEEK:
                        case self::WELLFORMED:
                        case self::WHENEVER:
                        case self::WHEN:
                        case self::WHILE:
                        case self::WHITESPACE:
                        case self::WIDTH_BUCKET:
                        case self::WITHIN:
                        case self::WITHOUT:
                        case self::WITH_PLSQL:
                        case self::WORK:
                        case self::WRAPPED:
                        case self::WRAPPER:
                        case self::WRITE:
                        case self::XDB_FASTPATH_INSERT:
                        case self::X_DYN_PRUNE:
                        case self::XID:
                        case self::XML2OBJECT:
                        case self::XMLAGG:
                        case self::XMLATTRIBUTES:
                        case self::XMLCAST:
                        case self::XMLCDATA:
                        case self::XMLCOLATTVAL:
                        case self::XMLCOMMENT:
                        case self::XMLCONCAT:
                        case self::XMLDIFF:
                        case self::XML_DML_RWT_STMT:
                        case self::XMLELEMENT:
                        case self::XMLEXISTS2:
                        case self::XMLEXISTS:
                        case self::XMLFOREST:
                        case self::XMLINDEX_REWRITE_IN_SELECT:
                        case self::XMLINDEX_REWRITE:
                        case self::XMLINDEX_SEL_IDX_TBL:
                        case self::XMLISNODE:
                        case self::XMLISVALID:
                        case self::XMLNAMESPACES:
                        case self::XMLPARSE:
                        case self::XMLPATCH:
                        case self::XMLPI:
                        case self::XMLQUERYVAL:
                        case self::XMLQUERY:
                        case self::XMLROOT:
                        case self::XMLSCHEMA:
                        case self::XMLSERIALIZE:
                        case self::XMLTABLE:
                        case self::XMLTRANSFORMBLOB:
                        case self::XMLTRANSFORM:
                        case self::XMLTYPE:
                        case self::XML:
                        case self::XPATHTABLE:
                        case self::XS_SYS_CONTEXT:
                        case self::XS:
                        case self::YEARS:
                        case self::YEAR:
                        case self::YES:
                        case self::YMINTERVAL_UNCONSTRAINED:
                        case self::ZONEMAP:
                        case self::ZONE:
                        case self::PREDICTION:
                        case self::PREDICTION_BOUNDS:
                        case self::PREDICTION_COST:
                        case self::PREDICTION_DETAILS:
                        case self::PREDICTION_PROBABILITY:
                        case self::PREDICTION_SET:
                        case self::CUME_DIST:
                        case self::DENSE_RANK:
                        case self::LISTAGG:
                        case self::PERCENT_RANK:
                        case self::PERCENTILE_CONT:
                        case self::PERCENTILE_DISC:
                        case self::RANK:
                        case self::AVG:
                        case self::CORR:
                        case self::COVAR_:
                        case self::LAG:
                        case self::LEAD:
                        case self::MAX:
                        case self::MEDIAN:
                        case self::MIN:
                        case self::NTILE:
                        case self::NVL:
                        case self::RATIO_TO_REPORT:
                        case self::REGR_:
                        case self::ROUND:
                        case self::ROW_NUMBER:
                        case self::SUBSTR:
                        case self::TO_CHAR:
                        case self::TRIM:
                        case self::SUM:
                        case self::STDDEV:
                        case self::VAR_:
                        case self::VARIANCE:
                        case self::LEAST:
                        case self::GREATEST:
                        case self::TO_DATE:
                        case self::PERIOD:
                        case self::DELIMITED_ID:
                        case self::INTRODUCER:
                        case self::REGULAR_ID:
                            $this->setState(8400);
                            $this->identifier();
                            break;

                        case self::DEFAULT:
                            $this->setState(8401);
                            $this->match(self::DEFAULT);
                            break;

                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(8406);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(8404);
                        $this->match(self::COMMA);
                        $this->setState(8405);
                        $this->identifier();
                        $this->setState(8408);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::COMMA);
                    $this->setState(8410);
                    $this->match(self::RIGHT_PAREN);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(8414);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function record_type_def(): Context\Record_type_defContext
    {
        $localContext = new Context\Record_type_defContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 936, self::RULE_record_type_def);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8416);
            $this->match(self::RECORD);
            $this->setState(8417);
            $this->match(self::LEFT_PAREN);
            $this->setState(8418);
            $this->field_spec();
            $this->setState(8423);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(8419);
                $this->match(self::COMMA);
                $this->setState(8420);
                $this->field_spec();
                $this->setState(8425);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(8426);
            $this->match(self::RIGHT_PAREN);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function field_spec(): Context\Field_specContext
    {
        $localContext = new Context\Field_specContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 938, self::RULE_field_spec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8428);
            $this->column_name();
            $this->setState(8430);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ABORT) | (1 << self::ABS) | (1 << self::ACCESS) | (1 << self::ACCESSED) | (1 << self::ACCOUNT) | (1 << self::ACL) | (1 << self::ACOS) | (1 << self::ACTION) | (1 << self::ACTIONS) | (1 << self::ACTIVATE) | (1 << self::ACTIVE) | (1 << self::ACTIVE_COMPONENT) | (1 << self::ACTIVE_DATA) | (1 << self::ACTIVE_FUNCTION) | (1 << self::ACTIVE_TAG) | (1 << self::ACTIVITY) | (1 << self::ADAPTIVE_PLAN) | (1 << self::ADD) | (1 << self::ADD_COLUMN) | (1 << self::ADD_GROUP) | (1 << self::ADD_MONTHS) | (1 << self::ADJ_DATE) | (1 << self::ADMIN) | (1 << self::ADMINISTER) | (1 << self::ADMINISTRATOR) | (1 << self::ADVANCED) | (1 << self::ADVISE) | (1 << self::ADVISOR) | (1 << self::AFD_DISKSTRING) | (1 << self::AFTER) | (1 << self::AGENT) | (1 << self::AGGREGATE) | (1 << self::A_LETTER) | (1 << self::ALIAS) | (1 << self::ALLOCATE) | (1 << self::ALLOW) | (1 << self::ALL_ROWS) | (1 << self::ALWAYS) | (1 << self::ANALYZE) | (1 << self::ANCILLARY) | (1 << self::AND_EQUAL) | (1 << self::ANOMALY) | (1 << self::ANSI_REARCH) | (1 << self::ANTIJOIN) | (1 << self::ANYSCHEMA) | (1 << self::APPEND) | (1 << self::APPENDCHILDXML) | (1 << self::APPEND_VALUES) | (1 << self::APPLICATION) | (1 << self::APPLY) | (1 << self::APPROX_COUNT_DISTINCT) | (1 << self::ARCHIVAL) | (1 << self::ARCHIVE) | (1 << self::ARCHIVED) | (1 << self::ARCHIVELOG) | (1 << self::ARRAY) | (1 << self::ASCII))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::ASCIISTR - 64)) | (1 << (self::ASIN - 64)) | (1 << (self::ASIS - 64)) | (1 << (self::ASSEMBLY - 64)) | (1 << (self::ASSIGN - 64)) | (1 << (self::ASSOCIATE - 64)) | (1 << (self::ASYNC - 64)) | (1 << (self::ASYNCHRONOUS - 64)) | (1 << (self::ATAN2 - 64)) | (1 << (self::ATAN - 64)) | (1 << (self::AT - 64)) | (1 << (self::ATTRIBUTE - 64)) | (1 << (self::ATTRIBUTES - 64)) | (1 << (self::AUTHENTICATED - 64)) | (1 << (self::AUTHENTICATION - 64)) | (1 << (self::AUTHID - 64)) | (1 << (self::AUTHORIZATION - 64)) | (1 << (self::AUTOALLOCATE - 64)) | (1 << (self::AUTO - 64)) | (1 << (self::AUTOEXTEND - 64)) | (1 << (self::AUTO_LOGIN - 64)) | (1 << (self::AUTOMATIC - 64)) | (1 << (self::AUTONOMOUS_TRANSACTION - 64)) | (1 << (self::AUTO_REOPTIMIZE - 64)) | (1 << (self::AVAILABILITY - 64)) | (1 << (self::AVRO - 64)) | (1 << (self::BACKGROUND - 64)) | (1 << (self::BACKUP - 64)) | (1 << (self::BASIC - 64)) | (1 << (self::BASICFILE - 64)) | (1 << (self::BATCH - 64)) | (1 << (self::BATCHSIZE - 64)) | (1 << (self::BATCH_TABLE_ACCESS_BY_ROWID - 64)) | (1 << (self::BECOME - 64)) | (1 << (self::BEFORE - 64)) | (1 << (self::BEGIN - 64)) | (1 << (self::BEGINNING - 64)) | (1 << (self::BEGIN_OUTLINE_DATA - 64)) | (1 << (self::BEHALF - 64)) | (1 << (self::BEQUEATH - 64)) | (1 << (self::BFILE - 64)) | (1 << (self::BFILENAME - 64)) | (1 << (self::BIGFILE - 64)) | (1 << (self::BINARY - 64)) | (1 << (self::BINARY_DOUBLE - 64)) | (1 << (self::BINARY_DOUBLE_INFINITY - 64)) | (1 << (self::BINARY_DOUBLE_NAN - 64)) | (1 << (self::BINARY_FLOAT - 64)) | (1 << (self::BINARY_FLOAT_INFINITY - 64)) | (1 << (self::BINARY_FLOAT_NAN - 64)) | (1 << (self::BINARY_INTEGER - 64)) | (1 << (self::BIND_AWARE - 64)) | (1 << (self::BINDING - 64)) | (1 << (self::BIN_TO_NUM - 64)) | (1 << (self::BITAND - 64)) | (1 << (self::BITMAP_AND - 64)) | (1 << (self::BITMAP - 64)) | (1 << (self::BITMAPS - 64)) | (1 << (self::BITMAP_TREE - 64)) | (1 << (self::BITS - 64)))) !== 0) || (((($_la - 128)) & ~0x3f) === 0 && ((1 << ($_la - 128)) & ((1 << (self::BLOB - 128)) | (1 << (self::BLOCK - 128)) | (1 << (self::BLOCK_RANGE - 128)) | (1 << (self::BLOCKS - 128)) | (1 << (self::BLOCKSIZE - 128)) | (1 << (self::BODY - 128)) | (1 << (self::BOOLEAN - 128)) | (1 << (self::BOTH - 128)) | (1 << (self::BOUND - 128)) | (1 << (self::BRANCH - 128)) | (1 << (self::BREADTH - 128)) | (1 << (self::BROADCAST - 128)) | (1 << (self::BSON - 128)) | (1 << (self::BUFFER - 128)) | (1 << (self::BUFFER_CACHE - 128)) | (1 << (self::BUFFER_POOL - 128)) | (1 << (self::BUILD - 128)) | (1 << (self::BULK - 128)) | (1 << (self::BYPASS_RECURSIVE_CHECK - 128)) | (1 << (self::BYPASS_UJVC - 128)) | (1 << (self::BYTE - 128)) | (1 << (self::CACHE - 128)) | (1 << (self::CACHE_CB - 128)) | (1 << (self::CACHE_INSTANCES - 128)) | (1 << (self::CACHE_TEMP_TABLE - 128)) | (1 << (self::CACHING - 128)) | (1 << (self::CALCULATED - 128)) | (1 << (self::CALLBACK - 128)) | (1 << (self::CALL - 128)) | (1 << (self::CANCEL - 128)) | (1 << (self::CAPACITY - 128)) | (1 << (self::CARDINALITY - 128)) | (1 << (self::CASCADE - 128)) | (1 << (self::CASE - 128)) | (1 << (self::CAST - 128)) | (1 << (self::CATEGORY - 128)) | (1 << (self::CDBDEFAULT - 128)) | (1 << (self::CEIL - 128)) | (1 << (self::CELL_FLASH_CACHE - 128)) | (1 << (self::CERTIFICATE - 128)) | (1 << (self::CFILE - 128)) | (1 << (self::CHAINED - 128)) | (1 << (self::CHANGE - 128)) | (1 << (self::CHANGE_DUPKEY_ERROR_INDEX - 128)) | (1 << (self::CHARACTER - 128)) | (1 << (self::CHAR - 128)) | (1 << (self::CHAR_CS - 128)) | (1 << (self::CHARTOROWID - 128)) | (1 << (self::CHECK_ACL_REWRITE - 128)) | (1 << (self::CHECKPOINT - 128)) | (1 << (self::CHILD - 128)) | (1 << (self::CHOOSE - 128)) | (1 << (self::CHR - 128)) | (1 << (self::CHUNK - 128)) | (1 << (self::CLASS - 128)) | (1 << (self::CLASSIFIER - 128)) | (1 << (self::CLEANUP - 128)) | (1 << (self::CLEAR - 128)) | (1 << (self::C_LETTER - 128)) | (1 << (self::CLIENT - 128)))) !== 0) || (((($_la - 192)) & ~0x3f) === 0 && ((1 << ($_la - 192)) & ((1 << (self::CLOB - 192)) | (1 << (self::CLONE - 192)) | (1 << (self::CLOSE_CACHED_OPEN_CURSORS - 192)) | (1 << (self::CLOSE - 192)) | (1 << (self::CLUSTER_BY_ROWID - 192)) | (1 << (self::CLUSTER - 192)) | (1 << (self::CLUSTER_DETAILS - 192)) | (1 << (self::CLUSTER_DISTANCE - 192)) | (1 << (self::CLUSTER_ID - 192)) | (1 << (self::CLUSTERING - 192)) | (1 << (self::CLUSTERING_FACTOR - 192)) | (1 << (self::CLUSTER_PROBABILITY - 192)) | (1 << (self::CLUSTER_SET - 192)) | (1 << (self::COALESCE - 192)) | (1 << (self::COALESCE_SQ - 192)) | (1 << (self::COARSE - 192)) | (1 << (self::CO_AUTH_IND - 192)) | (1 << (self::COLD - 192)) | (1 << (self::COLLECT - 192)) | (1 << (self::COLUMNAR - 192)) | (1 << (self::COLUMN_AUTH_INDICATOR - 192)) | (1 << (self::COLUMN - 192)) | (1 << (self::COLUMNS - 192)) | (1 << (self::COLUMN_STATS - 192)) | (1 << (self::COLUMN_VALUE - 192)) | (1 << (self::COMMENT - 192)) | (1 << (self::COMMIT - 192)) | (1 << (self::COMMITTED - 192)) | (1 << (self::COMMON_DATA - 192)) | (1 << (self::COMPACT - 192)) | (1 << (self::COMPATIBILITY - 192)) | (1 << (self::COMPILE - 192)) | (1 << (self::COMPLETE - 192)) | (1 << (self::COMPLIANCE - 192)) | (1 << (self::COMPONENT - 192)) | (1 << (self::COMPONENTS - 192)) | (1 << (self::COMPOSE - 192)) | (1 << (self::COMPOSITE - 192)) | (1 << (self::COMPOSITE_LIMIT - 192)) | (1 << (self::COMPOUND - 192)) | (1 << (self::COMPUTE - 192)) | (1 << (self::CONCAT - 192)) | (1 << (self::CON_DBID_TO_ID - 192)) | (1 << (self::CONDITIONAL - 192)) | (1 << (self::CONDITION - 192)) | (1 << (self::CONFIRM - 192)) | (1 << (self::CONFORMING - 192)) | (1 << (self::CON_GUID_TO_ID - 192)) | (1 << (self::CON_ID - 192)) | (1 << (self::CON_NAME_TO_ID - 192)) | (1 << (self::CONNECT_BY_CB_WHR_ONLY - 192)) | (1 << (self::CONNECT_BY_COMBINE_SW - 192)) | (1 << (self::CONNECT_BY_COST_BASED - 192)) | (1 << (self::CONNECT_BY_ELIM_DUPS - 192)) | (1 << (self::CONNECT_BY_FILTERING - 192)) | (1 << (self::CONNECT_BY_ISCYCLE - 192)) | (1 << (self::CONNECT_BY_ISLEAF - 192)) | (1 << (self::CONNECT_BY_ROOT - 192)) | (1 << (self::CONNECT_TIME - 192)) | (1 << (self::CONSIDER - 192)) | (1 << (self::CONSISTENT - 192)) | (1 << (self::CONSTANT - 192)))) !== 0) || (((($_la - 256)) & ~0x3f) === 0 && ((1 << ($_la - 256)) & ((1 << (self::CONST - 256)) | (1 << (self::CONSTRAINT - 256)) | (1 << (self::CONSTRAINTS - 256)) | (1 << (self::CONSTRUCTOR - 256)) | (1 << (self::CONTAINER - 256)) | (1 << (self::CONTAINER_DATA - 256)) | (1 << (self::CONTAINERS - 256)) | (1 << (self::CONTENT - 256)) | (1 << (self::CONTENTS - 256)) | (1 << (self::CONTEXT - 256)) | (1 << (self::CONTINUE - 256)) | (1 << (self::CONTROLFILE - 256)) | (1 << (self::CON_UID_TO_ID - 256)) | (1 << (self::CONVERT - 256)) | (1 << (self::COOKIE - 256)) | (1 << (self::COPY - 256)) | (1 << (self::CORR_K - 256)) | (1 << (self::CORR_S - 256)) | (1 << (self::CORRUPTION - 256)) | (1 << (self::CORRUPT_XID_ALL - 256)) | (1 << (self::CORRUPT_XID - 256)) | (1 << (self::COS - 256)) | (1 << (self::COSH - 256)) | (1 << (self::COST - 256)) | (1 << (self::COST_XML_QUERY_REWRITE - 256)) | (1 << (self::COUNT - 256)) | (1 << (self::COVAR_POP - 256)) | (1 << (self::COVAR_SAMP - 256)) | (1 << (self::CPU_COSTING - 256)) | (1 << (self::CPU_PER_CALL - 256)) | (1 << (self::CPU_PER_SESSION - 256)) | (1 << (self::CRASH - 256)) | (1 << (self::CREATE_FILE_DEST - 256)) | (1 << (self::CREATE_STORED_OUTLINES - 256)) | (1 << (self::CREATION - 256)) | (1 << (self::CREDENTIAL - 256)) | (1 << (self::CRITICAL - 256)) | (1 << (self::CROSS - 256)) | (1 << (self::CROSSEDITION - 256)) | (1 << (self::CSCONVERT - 256)) | (1 << (self::CUBE_AJ - 256)) | (1 << (self::CUBE - 256)) | (1 << (self::CUBE_GB - 256)) | (1 << (self::CUBE_SJ - 256)) | (1 << (self::CUME_DISTM - 256)) | (1 << (self::CURRENT - 256)) | (1 << (self::CURRENT_DATE - 256)) | (1 << (self::CURRENT_SCHEMA - 256)) | (1 << (self::CURRENT_TIME - 256)) | (1 << (self::CURRENT_TIMESTAMP - 256)) | (1 << (self::CURRENT_USER - 256)) | (1 << (self::CURRENTV - 256)) | (1 << (self::CURSOR - 256)) | (1 << (self::CURSOR_SHARING_EXACT - 256)) | (1 << (self::CURSOR_SPECIFIC_SEGMENT - 256)) | (1 << (self::CUSTOMDATUM - 256)) | (1 << (self::CV - 256)) | (1 << (self::CYCLE - 256)) | (1 << (self::DANGLING - 256)) | (1 << (self::DATABASE - 256)) | (1 << (self::DATA - 256)) | (1 << (self::DATAFILE - 256)) | (1 << (self::DATAFILES - 256)))) !== 0) || (((($_la - 321)) & ~0x3f) === 0 && ((1 << ($_la - 321)) & ((1 << (self::DATAMOVEMENT - 321)) | (1 << (self::DATAOBJNO - 321)) | (1 << (self::DATAOBJ_TO_MAT_PARTITION - 321)) | (1 << (self::DATAOBJ_TO_PARTITION - 321)) | (1 << (self::DATAPUMP - 321)) | (1 << (self::DATA_SECURITY_REWRITE_LIMIT - 321)) | (1 << (self::DATE - 321)) | (1 << (self::DATE_MODE - 321)) | (1 << (self::DAY - 321)) | (1 << (self::DAYS - 321)) | (1 << (self::DBA - 321)) | (1 << (self::DBA_RECYCLEBIN - 321)) | (1 << (self::DBMS_STATS - 321)) | (1 << (self::DB_ROLE_CHANGE - 321)) | (1 << (self::DBTIMEZONE - 321)) | (1 << (self::DB_UNIQUE_NAME - 321)) | (1 << (self::DB_VERSION - 321)) | (1 << (self::DDL - 321)) | (1 << (self::DEALLOCATE - 321)) | (1 << (self::DEBUG - 321)) | (1 << (self::DEBUGGER - 321)) | (1 << (self::DEC - 321)) | (1 << (self::DECIMAL - 321)) | (1 << (self::DECLARE - 321)) | (1 << (self::DECOMPOSE - 321)) | (1 << (self::DECORRELATE - 321)) | (1 << (self::DECR - 321)) | (1 << (self::DECREMENT - 321)) | (1 << (self::DECRYPT - 321)) | (1 << (self::DEDUPLICATE - 321)) | (1 << (self::DEFAULTS - 321)) | (1 << (self::DEFERRABLE - 321)) | (1 << (self::DEFERRED - 321)) | (1 << (self::DEFINED - 321)) | (1 << (self::DEFINE - 321)) | (1 << (self::DEFINER - 321)) | (1 << (self::DEGREE - 321)) | (1 << (self::DELAY - 321)) | (1 << (self::DELEGATE - 321)) | (1 << (self::DELETE_ALL - 321)) | (1 << (self::DELETE - 321)) | (1 << (self::DELETEXML - 321)) | (1 << (self::DEMAND - 321)) | (1 << (self::DENSE_RANKM - 321)) | (1 << (self::DEPENDENT - 321)) | (1 << (self::DEPTH - 321)) | (1 << (self::DEQUEUE - 321)) | (1 << (self::DEREF - 321)) | (1 << (self::DEREF_NO_REWRITE - 321)) | (1 << (self::DESTROY - 321)) | (1 << (self::DETACHED - 321)) | (1 << (self::DETERMINES - 321)) | (1 << (self::DETERMINISTIC - 321)) | (1 << (self::DICTIONARY - 321)) | (1 << (self::DIMENSION - 321)) | (1 << (self::DIMENSIONS - 321)) | (1 << (self::DIRECT_LOAD - 321)) | (1 << (self::DIRECTORY - 321)) | (1 << (self::DIRECT_PATH - 321)) | (1 << (self::DISABLE_ALL - 321)) | (1 << (self::DISABLE - 321)) | (1 << (self::DISABLE_PARALLEL_DML - 321)))) !== 0) || (((($_la - 385)) & ~0x3f) === 0 && ((1 << ($_la - 385)) & ((1 << (self::DISABLE_PRESET - 385)) | (1 << (self::DISABLE_RPKE - 385)) | (1 << (self::DISALLOW - 385)) | (1 << (self::DISASSOCIATE - 385)) | (1 << (self::DISCARD - 385)) | (1 << (self::DISCONNECT - 385)) | (1 << (self::DISK - 385)) | (1 << (self::DISKGROUP - 385)) | (1 << (self::DISKS - 385)) | (1 << (self::DISMOUNT - 385)) | (1 << (self::DISTINGUISHED - 385)) | (1 << (self::DISTRIBUTED - 385)) | (1 << (self::DISTRIBUTE - 385)) | (1 << (self::DML - 385)) | (1 << (self::DML_UPDATE - 385)) | (1 << (self::DOCFIDELITY - 385)) | (1 << (self::DOCUMENT - 385)) | (1 << (self::DOMAIN_INDEX_FILTER - 385)) | (1 << (self::DOMAIN_INDEX_NO_SORT - 385)) | (1 << (self::DOMAIN_INDEX_SORT - 385)) | (1 << (self::DOUBLE - 385)) | (1 << (self::DOWNGRADE - 385)) | (1 << (self::DRIVING_SITE - 385)) | (1 << (self::DROP_COLUMN - 385)) | (1 << (self::DROP_GROUP - 385)) | (1 << (self::DSINTERVAL_UNCONSTRAINED - 385)) | (1 << (self::DST_UPGRADE_INSERT_CONV - 385)) | (1 << (self::DUMP - 385)) | (1 << (self::DUPLICATE - 385)) | (1 << (self::DV - 385)) | (1 << (self::DYNAMIC - 385)) | (1 << (self::DYNAMIC_SAMPLING - 385)) | (1 << (self::DYNAMIC_SAMPLING_EST_CDN - 385)) | (1 << (self::EACH - 385)) | (1 << (self::EDITIONABLE - 385)) | (1 << (self::EDITION - 385)) | (1 << (self::EDITIONING - 385)) | (1 << (self::EDITIONS - 385)) | (1 << (self::ELEMENT - 385)) | (1 << (self::ELIM_GROUPBY - 385)) | (1 << (self::ELIMINATE_JOIN - 385)) | (1 << (self::ELIMINATE_OBY - 385)) | (1 << (self::ELIMINATE_OUTER_JOIN - 385)) | (1 << (self::EM - 385)) | (1 << (self::EMPTY_BLOB - 385)) | (1 << (self::EMPTY_CLOB - 385)) | (1 << (self::EMPTY - 385)) | (1 << (self::ENABLE_ALL - 385)) | (1 << (self::ENABLE - 385)) | (1 << (self::ENABLE_PARALLEL_DML - 385)) | (1 << (self::ENABLE_PRESET - 385)) | (1 << (self::ENCODING - 385)) | (1 << (self::ENCRYPT - 385)) | (1 << (self::ENCRYPTION - 385)) | (1 << (self::END_OUTLINE_DATA - 385)) | (1 << (self::ENFORCED - 385)) | (1 << (self::ENFORCE - 385)))) !== 0) || (((($_la - 449)) & ~0x3f) === 0 && ((1 << ($_la - 449)) & ((1 << (self::ENQUEUE - 449)) | (1 << (self::ENTERPRISE - 449)) | (1 << (self::ENTITYESCAPING - 449)) | (1 << (self::ENTRY - 449)) | (1 << (self::EQUIPART - 449)) | (1 << (self::ERR - 449)) | (1 << (self::ERROR_ARGUMENT - 449)) | (1 << (self::ERROR - 449)) | (1 << (self::ERROR_ON_OVERLAP_TIME - 449)) | (1 << (self::ERRORS - 449)) | (1 << (self::ESCAPE - 449)) | (1 << (self::ESTIMATE - 449)) | (1 << (self::EVAL - 449)) | (1 << (self::EVALNAME - 449)) | (1 << (self::EVALUATE - 449)) | (1 << (self::EVALUATION - 449)) | (1 << (self::EVENTS - 449)) | (1 << (self::EVERY - 449)) | (1 << (self::EXCEPT - 449)) | (1 << (self::EXCEPTION - 449)) | (1 << (self::EXCEPTION_INIT - 449)) | (1 << (self::EXCEPTIONS - 449)) | (1 << (self::EXCHANGE - 449)) | (1 << (self::EXCLUDE - 449)) | (1 << (self::EXCLUDING - 449)) | (1 << (self::EXECUTE - 449)) | (1 << (self::EXEMPT - 449)) | (1 << (self::EXISTING - 449)) | (1 << (self::EXISTS - 449)) | (1 << (self::EXISTSNODE - 449)) | (1 << (self::EXIT - 449)) | (1 << (self::EXPAND_GSET_TO_UNION - 449)) | (1 << (self::EXPAND_TABLE - 449)) | (1 << (self::EXP - 449)) | (1 << (self::EXPIRE - 449)) | (1 << (self::EXPLAIN - 449)) | (1 << (self::EXPLOSION - 449)) | (1 << (self::EXPORT - 449)) | (1 << (self::EXPR_CORR_CHECK - 449)) | (1 << (self::EXPRESS - 449)) | (1 << (self::EXTENDS - 449)) | (1 << (self::EXTENT - 449)) | (1 << (self::EXTENTS - 449)) | (1 << (self::EXTERNAL - 449)) | (1 << (self::EXTERNALLY - 449)) | (1 << (self::EXTRACTCLOBXML - 449)) | (1 << (self::EXTRACT - 449)) | (1 << (self::EXTRACTVALUE - 449)) | (1 << (self::EXTRA - 449)) | (1 << (self::FACILITY - 449)) | (1 << (self::FACT - 449)) | (1 << (self::FACTOR - 449)) | (1 << (self::FACTORIZE_JOIN - 449)) | (1 << (self::FAILED - 449)) | (1 << (self::FAILED_LOGIN_ATTEMPTS - 449)) | (1 << (self::FAILGROUP - 449)) | (1 << (self::FAILOVER - 449)) | (1 << (self::FAILURE - 449)) | (1 << (self::FALSE - 449)) | (1 << (self::FAMILY - 449)) | (1 << (self::FAR - 449)) | (1 << (self::FAST - 449)) | (1 << (self::FASTSTART - 449)))) !== 0) || (((($_la - 513)) & ~0x3f) === 0 && ((1 << ($_la - 513)) & ((1 << (self::FBTSCAN - 513)) | (1 << (self::FEATURE_DETAILS - 513)) | (1 << (self::FEATURE_ID - 513)) | (1 << (self::FEATURE_SET - 513)) | (1 << (self::FEATURE_VALUE - 513)) | (1 << (self::FETCH - 513)) | (1 << (self::FILE - 513)) | (1 << (self::FILE_NAME_CONVERT - 513)) | (1 << (self::FILESYSTEM_LIKE_LOGGING - 513)) | (1 << (self::FILTER - 513)) | (1 << (self::FINAL - 513)) | (1 << (self::FINE - 513)) | (1 << (self::FINISH - 513)) | (1 << (self::FIRST - 513)) | (1 << (self::FIRSTM - 513)) | (1 << (self::FIRST_ROWS - 513)) | (1 << (self::FIRST_VALUE - 513)) | (1 << (self::FIXED_VIEW_DATA - 513)) | (1 << (self::FLAGGER - 513)) | (1 << (self::FLASHBACK - 513)) | (1 << (self::FLASH_CACHE - 513)) | (1 << (self::FLOAT - 513)) | (1 << (self::FLOB - 513)) | (1 << (self::FLOOR - 513)) | (1 << (self::FLUSH - 513)) | (1 << (self::FOLDER - 513)) | (1 << (self::FOLLOWING - 513)) | (1 << (self::FOLLOWS - 513)) | (1 << (self::FORALL - 513)) | (1 << (self::FORCE - 513)) | (1 << (self::FORCE_XML_QUERY_REWRITE - 513)) | (1 << (self::FOREIGN - 513)) | (1 << (self::FOREVER - 513)) | (1 << (self::FORMAT - 513)) | (1 << (self::FORWARD - 513)) | (1 << (self::FRAGMENT_NUMBER - 513)) | (1 << (self::FREELIST - 513)) | (1 << (self::FREELISTS - 513)) | (1 << (self::FREEPOOLS - 513)) | (1 << (self::FRESH - 513)) | (1 << (self::FROM_TZ - 513)) | (1 << (self::FULL - 513)) | (1 << (self::FULL_OUTER_JOIN_TO_OUTER - 513)) | (1 << (self::FUNCTION - 513)) | (1 << (self::FUNCTIONS - 513)) | (1 << (self::GATHER_OPTIMIZER_STATISTICS - 513)) | (1 << (self::GATHER_PLAN_STATISTICS - 513)) | (1 << (self::GBY_CONC_ROLLUP - 513)) | (1 << (self::GBY_PUSHDOWN - 513)) | (1 << (self::GENERATED - 513)) | (1 << (self::GET - 513)) | (1 << (self::GLOBAL - 513)) | (1 << (self::GLOBALLY - 513)) | (1 << (self::GLOBAL_NAME - 513)) | (1 << (self::GLOBAL_TOPIC_ENABLED - 513)) | (1 << (self::GROUP_BY - 513)) | (1 << (self::GROUP_ID - 513)) | (1 << (self::GROUPING - 513)) | (1 << (self::GROUPING_ID - 513)))) !== 0) || (((($_la - 577)) & ~0x3f) === 0 && ((1 << ($_la - 577)) & ((1 << (self::GROUPS - 577)) | (1 << (self::GUARANTEED - 577)) | (1 << (self::GUARANTEE - 577)) | (1 << (self::GUARD - 577)) | (1 << (self::HASH_AJ - 577)) | (1 << (self::HASH - 577)) | (1 << (self::HASHKEYS - 577)) | (1 << (self::HASH_SJ - 577)) | (1 << (self::HEADER - 577)) | (1 << (self::HEAP - 577)) | (1 << (self::HELP - 577)) | (1 << (self::HEXTORAW - 577)) | (1 << (self::HEXTOREF - 577)) | (1 << (self::HIDDEN_KEYWORD - 577)) | (1 << (self::HIDE - 577)) | (1 << (self::HIERARCHY - 577)) | (1 << (self::HIGH - 577)) | (1 << (self::HINTSET_BEGIN - 577)) | (1 << (self::HINTSET_END - 577)) | (1 << (self::HOT - 577)) | (1 << (self::HOUR - 577)) | (1 << (self::HWM_BROKERED - 577)) | (1 << (self::HYBRID - 577)) | (1 << (self::IDENTIFIER - 577)) | (1 << (self::IDENTITY - 577)) | (1 << (self::IDGENERATORS - 577)) | (1 << (self::ID - 577)) | (1 << (self::IDLE_TIME - 577)) | (1 << (self::IF - 577)) | (1 << (self::IGNORE - 577)) | (1 << (self::IGNORE_OPTIM_EMBEDDED_HINTS - 577)) | (1 << (self::IGNORE_ROW_ON_DUPKEY_INDEX - 577)) | (1 << (self::IGNORE_WHERE_CLAUSE - 577)) | (1 << (self::ILM - 577)) | (1 << (self::IMMEDIATE - 577)) | (1 << (self::IMPACT - 577)) | (1 << (self::IMPORT - 577)) | (1 << (self::INACTIVE - 577)) | (1 << (self::INCLUDE - 577)) | (1 << (self::INCLUDE_VERSION - 577)) | (1 << (self::INCLUDING - 577)) | (1 << (self::INCREMENTAL - 577)) | (1 << (self::INCREMENT - 577)) | (1 << (self::INCR - 577)) | (1 << (self::INDENT - 577)) | (1 << (self::INDEX_ASC - 577)) | (1 << (self::INDEX_COMBINE - 577)) | (1 << (self::INDEX_DESC - 577)) | (1 << (self::INDEXED - 577)) | (1 << (self::INDEXES - 577)) | (1 << (self::INDEX_FFS - 577)) | (1 << (self::INDEX_FILTER - 577)) | (1 << (self::INDEXING - 577)) | (1 << (self::INDEX_JOIN - 577)) | (1 << (self::INDEX_ROWS - 577)) | (1 << (self::INDEX_RRS - 577)) | (1 << (self::INDEX_RS_ASC - 577)) | (1 << (self::INDEX_RS_DESC - 577)) | (1 << (self::INDEX_RS - 577)) | (1 << (self::INDEX_SCAN - 577)) | (1 << (self::INDEX_SKIP_SCAN - 577)))) !== 0) || (((($_la - 641)) & ~0x3f) === 0 && ((1 << ($_la - 641)) & ((1 << (self::INDEX_SS_ASC - 641)) | (1 << (self::INDEX_SS_DESC - 641)) | (1 << (self::INDEX_SS - 641)) | (1 << (self::INDEX_STATS - 641)) | (1 << (self::INDEXTYPE - 641)) | (1 << (self::INDEXTYPES - 641)) | (1 << (self::INDICATOR - 641)) | (1 << (self::INDICES - 641)) | (1 << (self::INFINITE - 641)) | (1 << (self::INFORMATIONAL - 641)) | (1 << (self::INHERIT - 641)) | (1 << (self::INITCAP - 641)) | (1 << (self::INITIAL - 641)) | (1 << (self::INITIALIZED - 641)) | (1 << (self::INITIALLY - 641)) | (1 << (self::INITRANS - 641)) | (1 << (self::INLINE - 641)) | (1 << (self::INLINE_XMLTYPE_NT - 641)) | (1 << (self::INMEMORY - 641)) | (1 << (self::IN_MEMORY_METADATA - 641)) | (1 << (self::INMEMORY_PRUNING - 641)) | (1 << (self::INNER - 641)) | (1 << (self::INOUT - 641)) | (1 << (self::INPLACE - 641)) | (1 << (self::INSERTCHILDXMLAFTER - 641)) | (1 << (self::INSERTCHILDXMLBEFORE - 641)) | (1 << (self::INSERTCHILDXML - 641)) | (1 << (self::INSERTXMLAFTER - 641)) | (1 << (self::INSERTXMLBEFORE - 641)) | (1 << (self::INSTANCE - 641)) | (1 << (self::INSTANCES - 641)) | (1 << (self::INSTANTIABLE - 641)) | (1 << (self::INSTANTLY - 641)) | (1 << (self::INSTEAD - 641)) | (1 << (self::INSTR2 - 641)) | (1 << (self::INSTR4 - 641)) | (1 << (self::INSTRB - 641)) | (1 << (self::INSTRC - 641)) | (1 << (self::INSTR - 641)) | (1 << (self::INTEGER - 641)) | (1 << (self::INTERLEAVED - 641)) | (1 << (self::INTERMEDIATE - 641)) | (1 << (self::INTERNAL_CONVERT - 641)) | (1 << (self::INTERNAL_USE - 641)) | (1 << (self::INTERPRETED - 641)) | (1 << (self::INTERVAL - 641)) | (1 << (self::INT - 641)) | (1 << (self::INVALIDATE - 641)) | (1 << (self::INVISIBLE - 641)) | (1 << (self::IN_XQUERY - 641)) | (1 << (self::ISOLATION - 641)) | (1 << (self::ISOLATION_LEVEL - 641)) | (1 << (self::ITERATE - 641)) | (1 << (self::ITERATION_NUMBER - 641)) | (1 << (self::JAVA - 641)) | (1 << (self::JOB - 641)) | (1 << (self::JOIN - 641)) | (1 << (self::JSON_ARRAYAGG - 641)) | (1 << (self::JSON_ARRAY - 641)))) !== 0) || (((($_la - 705)) & ~0x3f) === 0 && ((1 << ($_la - 705)) & ((1 << (self::JSON_EQUAL - 705)) | (1 << (self::JSON_EXISTS2 - 705)) | (1 << (self::JSON_EXISTS - 705)) | (1 << (self::JSONGET - 705)) | (1 << (self::JSON - 705)) | (1 << (self::JSON_OBJECTAGG - 705)) | (1 << (self::JSON_OBJECT - 705)) | (1 << (self::JSONPARSE - 705)) | (1 << (self::JSON_QUERY - 705)) | (1 << (self::JSON_SERIALIZE - 705)) | (1 << (self::JSON_TABLE - 705)) | (1 << (self::JSON_TEXTCONTAINS2 - 705)) | (1 << (self::JSON_TEXTCONTAINS - 705)) | (1 << (self::JSON_VALUE - 705)) | (1 << (self::KEEP_DUPLICATES - 705)) | (1 << (self::KEEP - 705)) | (1 << (self::KERBEROS - 705)) | (1 << (self::KEY - 705)) | (1 << (self::KEY_LENGTH - 705)) | (1 << (self::KEYSIZE - 705)) | (1 << (self::KEYS - 705)) | (1 << (self::KEYSTORE - 705)) | (1 << (self::KILL - 705)) | (1 << (self::LABEL - 705)) | (1 << (self::LANGUAGE - 705)) | (1 << (self::LAST_DAY - 705)) | (1 << (self::LAST - 705)) | (1 << (self::LAST_VALUE - 705)) | (1 << (self::LATERAL - 705)) | (1 << (self::LAX - 705)) | (1 << (self::LAYER - 705)) | (1 << (self::LDAP_REGISTRATION_ENABLED - 705)) | (1 << (self::LDAP_REGISTRATION - 705)) | (1 << (self::LDAP_REG_SYNC_INTERVAL - 705)) | (1 << (self::LEADING - 705)) | (1 << (self::LEFT - 705)) | (1 << (self::LENGTH2 - 705)) | (1 << (self::LENGTH4 - 705)) | (1 << (self::LENGTHB - 705)) | (1 << (self::LENGTHC - 705)) | (1 << (self::LENGTH - 705)) | (1 << (self::LESS - 705)) | (1 << (self::LEVEL - 705)) | (1 << (self::LEVELS - 705)) | (1 << (self::LIBRARY - 705)) | (1 << (self::LIFECYCLE - 705)) | (1 << (self::LIFE - 705)) | (1 << (self::LIFETIME - 705)) | (1 << (self::LIKE2 - 705)) | (1 << (self::LIKE4 - 705)) | (1 << (self::LIKEC - 705)) | (1 << (self::LIKE_EXPAND - 705)) | (1 << (self::LIMIT - 705)) | (1 << (self::LINEAR - 705)) | (1 << (self::LINK - 705)) | (1 << (self::LIST - 705)) | (1 << (self::LN - 705)) | (1 << (self::LNNVL - 705)) | (1 << (self::LOAD - 705)) | (1 << (self::LOB - 705)) | (1 << (self::LOBNVL - 705)) | (1 << (self::LOBS - 705)) | (1 << (self::LOCAL_INDEXES - 705)))) !== 0) || (((($_la - 769)) & ~0x3f) === 0 && ((1 << ($_la - 769)) & ((1 << (self::LOCAL - 769)) | (1 << (self::LOCALTIME - 769)) | (1 << (self::LOCALTIMESTAMP - 769)) | (1 << (self::LOCATION - 769)) | (1 << (self::LOCATOR - 769)) | (1 << (self::LOCKED - 769)) | (1 << (self::LOCKING - 769)) | (1 << (self::LOGFILE - 769)) | (1 << (self::LOGFILES - 769)) | (1 << (self::LOGGING - 769)) | (1 << (self::LOGICAL - 769)) | (1 << (self::LOGICAL_READS_PER_CALL - 769)) | (1 << (self::LOGICAL_READS_PER_SESSION - 769)) | (1 << (self::LOG - 769)) | (1 << (self::LOGMINING - 769)) | (1 << (self::LOGOFF - 769)) | (1 << (self::LOGON - 769)) | (1 << (self::LOG_READ_ONLY_VIOLATIONS - 769)) | (1 << (self::LONG - 769)) | (1 << (self::LOOP - 769)) | (1 << (self::LOWER - 769)) | (1 << (self::LOW - 769)) | (1 << (self::LPAD - 769)) | (1 << (self::LTRIM - 769)) | (1 << (self::MAIN - 769)) | (1 << (self::MAKE_REF - 769)) | (1 << (self::MANAGED - 769)) | (1 << (self::MANAGE - 769)) | (1 << (self::MANAGEMENT - 769)) | (1 << (self::MANAGER - 769)) | (1 << (self::MANUAL - 769)) | (1 << (self::MAP - 769)) | (1 << (self::MAPPING - 769)) | (1 << (self::MASTER - 769)) | (1 << (self::MATCHED - 769)) | (1 << (self::MATCHES - 769)) | (1 << (self::MATCH - 769)) | (1 << (self::MATCH_NUMBER - 769)) | (1 << (self::MATCH_RECOGNIZE - 769)) | (1 << (self::MATERIALIZED - 769)) | (1 << (self::MATERIALIZE - 769)) | (1 << (self::MAXARCHLOGS - 769)) | (1 << (self::MAXDATAFILES - 769)) | (1 << (self::MAXEXTENTS - 769)) | (1 << (self::MAXIMIZE - 769)) | (1 << (self::MAXINSTANCES - 769)) | (1 << (self::MAXLOGFILES - 769)) | (1 << (self::MAXLOGHISTORY - 769)) | (1 << (self::MAXLOGMEMBERS - 769)) | (1 << (self::MAX_SHARED_TEMP_SIZE - 769)) | (1 << (self::MAXSIZE - 769)) | (1 << (self::MAXTRANS - 769)) | (1 << (self::MAXVALUE - 769)) | (1 << (self::MEASURE - 769)) | (1 << (self::MEASURES - 769)) | (1 << (self::MEDIUM - 769)) | (1 << (self::MEMBER - 769)) | (1 << (self::MEMCOMPRESS - 769)) | (1 << (self::MEMORY - 769)) | (1 << (self::MERGEACTIONS - 769)) | (1 << (self::MERGE_AJ - 769)) | (1 << (self::MERGE_CONST_ON - 769)) | (1 << (self::MERGE - 769)))) !== 0) || (((($_la - 833)) & ~0x3f) === 0 && ((1 << ($_la - 833)) & ((1 << (self::MERGE_SJ - 833)) | (1 << (self::METADATA - 833)) | (1 << (self::METHOD - 833)) | (1 << (self::MIGRATE - 833)) | (1 << (self::MIGRATION - 833)) | (1 << (self::MINEXTENTS - 833)) | (1 << (self::MINIMIZE - 833)) | (1 << (self::MINIMUM - 833)) | (1 << (self::MINING - 833)) | (1 << (self::MINUS_NULL - 833)) | (1 << (self::MINUTE - 833)) | (1 << (self::MINVALUE - 833)) | (1 << (self::MIRRORCOLD - 833)) | (1 << (self::MIRRORHOT - 833)) | (1 << (self::MIRROR - 833)) | (1 << (self::MLSLABEL - 833)) | (1 << (self::MODEL_COMPILE_SUBQUERY - 833)) | (1 << (self::MODEL_DONTVERIFY_UNIQUENESS - 833)) | (1 << (self::MODEL_DYNAMIC_SUBQUERY - 833)) | (1 << (self::MODEL_MIN_ANALYSIS - 833)) | (1 << (self::MODEL - 833)) | (1 << (self::MODEL_NB - 833)) | (1 << (self::MODEL_NO_ANALYSIS - 833)) | (1 << (self::MODEL_PBY - 833)) | (1 << (self::MODEL_PUSH_REF - 833)) | (1 << (self::MODEL_SV - 833)) | (1 << (self::MODIFICATION - 833)) | (1 << (self::MODIFY_COLUMN_TYPE - 833)) | (1 << (self::MODIFY - 833)) | (1 << (self::MOD - 833)) | (1 << (self::MODULE - 833)) | (1 << (self::MONITORING - 833)) | (1 << (self::MONITOR - 833)) | (1 << (self::MONTH - 833)) | (1 << (self::MONTHS_BETWEEN - 833)) | (1 << (self::MONTHS - 833)) | (1 << (self::MOUNT - 833)) | (1 << (self::MOUNTPATH - 833)) | (1 << (self::MOVEMENT - 833)) | (1 << (self::MOVE - 833)) | (1 << (self::MULTIDIMENSIONAL - 833)) | (1 << (self::MULTISET - 833)) | (1 << (self::MV_MERGE - 833)) | (1 << (self::NAMED - 833)) | (1 << (self::NAME - 833)) | (1 << (self::NAMESPACE - 833)) | (1 << (self::NAN - 833)) | (1 << (self::NANVL - 833)) | (1 << (self::NATIONAL - 833)) | (1 << (self::NATIVE_FULL_OUTER_JOIN - 833)) | (1 << (self::NATIVE - 833)) | (1 << (self::NATURAL - 833)) | (1 << (self::NATURALN - 833)) | (1 << (self::NAV - 833)) | (1 << (self::NCHAR_CS - 833)) | (1 << (self::NCHAR - 833)) | (1 << (self::NCHR - 833)) | (1 << (self::NCLOB - 833)) | (1 << (self::NEEDED - 833)) | (1 << (self::NEG - 833)) | (1 << (self::NESTED - 833)) | (1 << (self::NESTED_TABLE_FAST_INSERT - 833)))) !== 0) || (((($_la - 897)) & ~0x3f) === 0 && ((1 << ($_la - 897)) & ((1 << (self::NESTED_TABLE_GET_REFS - 897)) | (1 << (self::NESTED_TABLE_ID - 897)) | (1 << (self::NESTED_TABLE_SET_REFS - 897)) | (1 << (self::NESTED_TABLE_SET_SETID - 897)) | (1 << (self::NETWORK - 897)) | (1 << (self::NEVER - 897)) | (1 << (self::NEW - 897)) | (1 << (self::NEW_TIME - 897)) | (1 << (self::NEXT_DAY - 897)) | (1 << (self::NEXT - 897)) | (1 << (self::NL_AJ - 897)) | (1 << (self::NLJ_BATCHING - 897)) | (1 << (self::NLJ_INDEX_FILTER - 897)) | (1 << (self::NLJ_INDEX_SCAN - 897)) | (1 << (self::NLJ_PREFETCH - 897)) | (1 << (self::NLS_CALENDAR - 897)) | (1 << (self::NLS_CHARACTERSET - 897)) | (1 << (self::NLS_CHARSET_DECL_LEN - 897)) | (1 << (self::NLS_CHARSET_ID - 897)) | (1 << (self::NLS_CHARSET_NAME - 897)) | (1 << (self::NLS_COMP - 897)) | (1 << (self::NLS_CURRENCY - 897)) | (1 << (self::NLS_DATE_FORMAT - 897)) | (1 << (self::NLS_DATE_LANGUAGE - 897)) | (1 << (self::NLS_INITCAP - 897)) | (1 << (self::NLS_ISO_CURRENCY - 897)) | (1 << (self::NL_SJ - 897)) | (1 << (self::NLS_LANG - 897)) | (1 << (self::NLS_LANGUAGE - 897)) | (1 << (self::NLS_LENGTH_SEMANTICS - 897)) | (1 << (self::NLS_LOWER - 897)) | (1 << (self::NLS_NCHAR_CONV_EXCP - 897)) | (1 << (self::NLS_NUMERIC_CHARACTERS - 897)) | (1 << (self::NLS_SORT - 897)) | (1 << (self::NLSSORT - 897)) | (1 << (self::NLS_SPECIAL_CHARS - 897)) | (1 << (self::NLS_TERRITORY - 897)) | (1 << (self::NLS_UPPER - 897)) | (1 << (self::NO_ACCESS - 897)) | (1 << (self::NO_ADAPTIVE_PLAN - 897)) | (1 << (self::NO_ANSI_REARCH - 897)) | (1 << (self::NOAPPEND - 897)) | (1 << (self::NOARCHIVELOG - 897)) | (1 << (self::NOAUDIT - 897)) | (1 << (self::NO_AUTO_REOPTIMIZE - 897)) | (1 << (self::NO_BASETABLE_MULTIMV_REWRITE - 897)) | (1 << (self::NO_BATCH_TABLE_ACCESS_BY_ROWID - 897)) | (1 << (self::NO_BIND_AWARE - 897)) | (1 << (self::NO_BUFFER - 897)) | (1 << (self::NOCACHE - 897)) | (1 << (self::NO_CARTESIAN - 897)) | (1 << (self::NO_CHECK_ACL_REWRITE - 897)) | (1 << (self::NO_CLUSTER_BY_ROWID - 897)) | (1 << (self::NO_CLUSTERING - 897)) | (1 << (self::NO_COALESCE_SQ - 897)) | (1 << (self::NO_COMMON_DATA - 897)) | (1 << (self::NO_CONNECT_BY_CB_WHR_ONLY - 897)) | (1 << (self::NO_CONNECT_BY_COMBINE_SW - 897)) | (1 << (self::NO_CONNECT_BY_COST_BASED - 897)) | (1 << (self::NO_CONNECT_BY_ELIM_DUPS - 897)) | (1 << (self::NO_CONNECT_BY_FILTERING - 897)) | (1 << (self::NOCOPY - 897)) | (1 << (self::NO_COST_XML_QUERY_REWRITE - 897)))) !== 0) || (((($_la - 961)) & ~0x3f) === 0 && ((1 << ($_la - 961)) & ((1 << (self::NO_CPU_COSTING - 961)) | (1 << (self::NOCPU_COSTING - 961)) | (1 << (self::NOCYCLE - 961)) | (1 << (self::NO_DATA_SECURITY_REWRITE - 961)) | (1 << (self::NO_DECORRELATE - 961)) | (1 << (self::NODELAY - 961)) | (1 << (self::NO_DOMAIN_INDEX_FILTER - 961)) | (1 << (self::NO_DST_UPGRADE_INSERT_CONV - 961)) | (1 << (self::NO_ELIM_GROUPBY - 961)) | (1 << (self::NO_ELIMINATE_JOIN - 961)) | (1 << (self::NO_ELIMINATE_OBY - 961)) | (1 << (self::NO_ELIMINATE_OUTER_JOIN - 961)) | (1 << (self::NOENTITYESCAPING - 961)) | (1 << (self::NO_EXPAND_GSET_TO_UNION - 961)) | (1 << (self::NO_EXPAND - 961)) | (1 << (self::NO_EXPAND_TABLE - 961)) | (1 << (self::NO_FACT - 961)) | (1 << (self::NO_FACTORIZE_JOIN - 961)) | (1 << (self::NO_FILTERING - 961)) | (1 << (self::NOFORCE - 961)) | (1 << (self::NO_FULL_OUTER_JOIN_TO_OUTER - 961)) | (1 << (self::NO_GATHER_OPTIMIZER_STATISTICS - 961)) | (1 << (self::NO_GBY_PUSHDOWN - 961)) | (1 << (self::NOGUARANTEE - 961)) | (1 << (self::NO_INDEX_FFS - 961)) | (1 << (self::NO_INDEX - 961)) | (1 << (self::NO_INDEX_SS - 961)) | (1 << (self::NO_INMEMORY - 961)) | (1 << (self::NO_INMEMORY_PRUNING - 961)) | (1 << (self::NOKEEP - 961)) | (1 << (self::NO_LOAD - 961)) | (1 << (self::NOLOCAL - 961)) | (1 << (self::NOLOGGING - 961)) | (1 << (self::NOMAPPING - 961)) | (1 << (self::NOMAXVALUE - 961)) | (1 << (self::NO_MERGE - 961)) | (1 << (self::NOMINIMIZE - 961)) | (1 << (self::NOMINVALUE - 961)) | (1 << (self::NO_MODEL_PUSH_REF - 961)) | (1 << (self::NO_MONITORING - 961)) | (1 << (self::NOMONITORING - 961)) | (1 << (self::NO_MONITOR - 961)) | (1 << (self::NO_MULTIMV_REWRITE - 961)) | (1 << (self::NO_NATIVE_FULL_OUTER_JOIN - 961)) | (1 << (self::NONBLOCKING - 961)) | (1 << (self::NONEDITIONABLE - 961)) | (1 << (self::NONE - 961)) | (1 << (self::NO_NLJ_BATCHING - 961)) | (1 << (self::NO_NLJ_PREFETCH - 961)) | (1 << (self::NO - 961)) | (1 << (self::NONSCHEMA - 961)) | (1 << (self::NO_OBJECT_LINK - 961)) | (1 << (self::NOORDER - 961)) | (1 << (self::NO_ORDER_ROLLUPS - 961)) | (1 << (self::NO_OUTER_JOIN_TO_ANTI - 961)) | (1 << (self::NO_OUTER_JOIN_TO_INNER - 961)) | (1 << (self::NOOVERRIDE - 961)) | (1 << (self::NO_PARALLEL_INDEX - 961)) | (1 << (self::NOPARALLEL_INDEX - 961)) | (1 << (self::NO_PARALLEL - 961)) | (1 << (self::NOPARALLEL - 961)) | (1 << (self::NO_PARTIAL_COMMIT - 961)) | (1 << (self::NO_PARTIAL_JOIN - 961)) | (1 << (self::NO_PARTIAL_ROLLUP_PUSHDOWN - 961)))) !== 0) || (((($_la - 1025)) & ~0x3f) === 0 && ((1 << ($_la - 1025)) & ((1 << (self::NOPARTITION - 1025)) | (1 << (self::NO_PLACE_DISTINCT - 1025)) | (1 << (self::NO_PLACE_GROUP_BY - 1025)) | (1 << (self::NO_PQ_CONCURRENT_UNION - 1025)) | (1 << (self::NO_PQ_MAP - 1025)) | (1 << (self::NO_PQ_REPLICATE - 1025)) | (1 << (self::NO_PQ_SKEW - 1025)) | (1 << (self::NO_PRUNE_GSETS - 1025)) | (1 << (self::NO_PULL_PRED - 1025)) | (1 << (self::NO_PUSH_PRED - 1025)) | (1 << (self::NO_PUSH_SUBQ - 1025)) | (1 << (self::NO_PX_FAULT_TOLERANCE - 1025)) | (1 << (self::NO_PX_JOIN_FILTER - 1025)) | (1 << (self::NO_QKN_BUFF - 1025)) | (1 << (self::NO_QUERY_TRANSFORMATION - 1025)) | (1 << (self::NO_REF_CASCADE - 1025)) | (1 << (self::NORELOCATE - 1025)) | (1 << (self::NORELY - 1025)) | (1 << (self::NOREPAIR - 1025)) | (1 << (self::NOREPLAY - 1025)) | (1 << (self::NORESETLOGS - 1025)) | (1 << (self::NO_RESULT_CACHE - 1025)) | (1 << (self::NOREVERSE - 1025)) | (1 << (self::NO_REWRITE - 1025)) | (1 << (self::NOREWRITE - 1025)) | (1 << (self::NORMAL - 1025)) | (1 << (self::NO_ROOT_SW_FOR_LOCAL - 1025)) | (1 << (self::NOROWDEPENDENCIES - 1025)) | (1 << (self::NOSCHEMACHECK - 1025)) | (1 << (self::NOSEGMENT - 1025)) | (1 << (self::NO_SEMIJOIN - 1025)) | (1 << (self::NO_SEMI_TO_INNER - 1025)) | (1 << (self::NO_SET_TO_JOIN - 1025)) | (1 << (self::NOSORT - 1025)) | (1 << (self::NO_SQL_TRANSLATION - 1025)) | (1 << (self::NO_SQL_TUNE - 1025)) | (1 << (self::NO_STAR_TRANSFORMATION - 1025)) | (1 << (self::NO_STATEMENT_QUEUING - 1025)) | (1 << (self::NO_STATS_GSETS - 1025)) | (1 << (self::NOSTRICT - 1025)) | (1 << (self::NO_SUBQUERY_PRUNING - 1025)) | (1 << (self::NO_SUBSTRB_PAD - 1025)) | (1 << (self::NO_SWAP_JOIN_INPUTS - 1025)) | (1 << (self::NOSWITCH - 1025)) | (1 << (self::NO_TABLE_LOOKUP_BY_NL - 1025)) | (1 << (self::NO_TEMP_TABLE - 1025)) | (1 << (self::NOTHING - 1025)) | (1 << (self::NOTIFICATION - 1025)) | (1 << (self::NO_TRANSFORM_DISTINCT_AGG - 1025)) | (1 << (self::NO_UNNEST - 1025)) | (1 << (self::NO_USE_CUBE - 1025)) | (1 << (self::NO_USE_HASH_AGGREGATION - 1025)) | (1 << (self::NO_USE_HASH_GBY_FOR_PUSHDOWN - 1025)) | (1 << (self::NO_USE_HASH - 1025)) | (1 << (self::NO_USE_INVISIBLE_INDEXES - 1025)) | (1 << (self::NO_USE_MERGE - 1025)) | (1 << (self::NO_USE_NL - 1025)) | (1 << (self::NO_USE_VECTOR_AGGREGATION - 1025)) | (1 << (self::NOVALIDATE - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_DIMS - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM_FACT - 1025)) | (1 << (self::NO_VECTOR_TRANSFORM - 1025)))) !== 0) || (((($_la - 1089)) & ~0x3f) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::NO_XDB_FASTPATH_INSERT - 1089)) | (1 << (self::NO_XML_DML_REWRITE - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE_IN_SELECT - 1089)) | (1 << (self::NO_XMLINDEX_REWRITE - 1089)) | (1 << (self::NO_XML_QUERY_REWRITE - 1089)) | (1 << (self::NO_ZONEMAP - 1089)) | (1 << (self::NTH_VALUE - 1089)) | (1 << (self::NULLIF - 1089)) | (1 << (self::NULLS - 1089)) | (1 << (self::NUMBER - 1089)) | (1 << (self::NUMERIC - 1089)) | (1 << (self::NUM_INDEX_KEYS - 1089)) | (1 << (self::NUMTODSINTERVAL - 1089)) | (1 << (self::NUMTOYMINTERVAL - 1089)) | (1 << (self::NVARCHAR2 - 1089)) | (1 << (self::NVL2 - 1089)) | (1 << (self::OBJECT2XML - 1089)) | (1 << (self::OBJECT - 1089)) | (1 << (self::OBJ_ID - 1089)) | (1 << (self::OBJNO - 1089)) | (1 << (self::OBJNO_REUSE - 1089)) | (1 << (self::OCCURENCES - 1089)) | (1 << (self::OFFLINE - 1089)) | (1 << (self::OFF - 1089)) | (1 << (self::OFFSET - 1089)) | (1 << (self::OIDINDEX - 1089)) | (1 << (self::OID - 1089)) | (1 << (self::OLAP - 1089)) | (1 << (self::OLD - 1089)) | (1 << (self::OLD_PUSH_PRED - 1089)) | (1 << (self::OLS - 1089)) | (1 << (self::OLTP - 1089)) | (1 << (self::OMIT - 1089)) | (1 << (self::ONE - 1089)) | (1 << (self::ONLINE - 1089)) | (1 << (self::ONLY - 1089)) | (1 << (self::OPAQUE - 1089)) | (1 << (self::OPAQUE_TRANSFORM - 1089)) | (1 << (self::OPAQUE_XCANONICAL - 1089)) | (1 << (self::OPCODE - 1089)) | (1 << (self::OPEN - 1089)) | (1 << (self::OPERATIONS - 1089)) | (1 << (self::OPERATOR - 1089)) | (1 << (self::OPT_ESTIMATE - 1089)) | (1 << (self::OPTIMAL - 1089)) | (1 << (self::OPTIMIZE - 1089)) | (1 << (self::OPTIMIZER_FEATURES_ENABLE - 1089)) | (1 << (self::OPTIMIZER_GOAL - 1089)) | (1 << (self::OPT_PARAM - 1089)) | (1 << (self::ORA_BRANCH - 1089)) | (1 << (self::ORA_CHECK_ACL - 1089)) | (1 << (self::ORA_CHECK_PRIVILEGE - 1089)) | (1 << (self::ORA_CLUSTERING - 1089)) | (1 << (self::ORADATA - 1089)) | (1 << (self::ORADEBUG - 1089)) | (1 << (self::ORA_DST_AFFECTED - 1089)) | (1 << (self::ORA_DST_CONVERT - 1089)) | (1 << (self::ORA_DST_ERROR - 1089)) | (1 << (self::ORA_GET_ACLIDS - 1089)))) !== 0) || (((($_la - 1153)) & ~0x3f) === 0 && ((1 << ($_la - 1153)) & ((1 << (self::ORA_GET_PRIVILEGES - 1153)) | (1 << (self::ORA_HASH - 1153)) | (1 << (self::ORA_INVOKING_USERID - 1153)) | (1 << (self::ORA_INVOKING_USER - 1153)) | (1 << (self::ORA_INVOKING_XS_USER_GUID - 1153)) | (1 << (self::ORA_INVOKING_XS_USER - 1153)) | (1 << (self::ORA_RAWCOMPARE - 1153)) | (1 << (self::ORA_RAWCONCAT - 1153)) | (1 << (self::ORA_ROWSCN - 1153)) | (1 << (self::ORA_ROWSCN_RAW - 1153)) | (1 << (self::ORA_ROWVERSION - 1153)) | (1 << (self::ORA_TABVERSION - 1153)) | (1 << (self::ORA_WRITE_TIME - 1153)) | (1 << (self::ORDERED - 1153)) | (1 << (self::ORDERED_PREDICATES - 1153)) | (1 << (self::ORDINALITY - 1153)) | (1 << (self::OR_EXPAND - 1153)) | (1 << (self::ORGANIZATION - 1153)) | (1 << (self::OR_PREDICATES - 1153)) | (1 << (self::OSERROR - 1153)) | (1 << (self::OTHER - 1153)) | (1 << (self::OUTER_JOIN_TO_ANTI - 1153)) | (1 << (self::OUTER_JOIN_TO_INNER - 1153)) | (1 << (self::OUTER - 1153)) | (1 << (self::OUTLINE_LEAF - 1153)) | (1 << (self::OUTLINE - 1153)) | (1 << (self::OUT_OF_LINE - 1153)) | (1 << (self::OUT - 1153)) | (1 << (self::OVERFLOW_NOMOVE - 1153)) | (1 << (self::OVERFLOW - 1153)) | (1 << (self::OVERLAPS - 1153)) | (1 << (self::OVER - 1153)) | (1 << (self::OVERRIDING - 1153)) | (1 << (self::OWNER - 1153)) | (1 << (self::OWNERSHIP - 1153)) | (1 << (self::OWN - 1153)) | (1 << (self::PACKAGE - 1153)) | (1 << (self::PACKAGES - 1153)) | (1 << (self::PARALLEL_ENABLE - 1153)) | (1 << (self::PARALLEL_INDEX - 1153)) | (1 << (self::PARALLEL - 1153)) | (1 << (self::PARAMETERS - 1153)) | (1 << (self::PARAM - 1153)) | (1 << (self::PARENT - 1153)) | (1 << (self::PARITY - 1153)) | (1 << (self::PARTIAL_JOIN - 1153)) | (1 << (self::PARTIALLY - 1153)) | (1 << (self::PARTIAL - 1153)) | (1 << (self::PARTIAL_ROLLUP_PUSHDOWN - 1153)) | (1 << (self::PARTITION_HASH - 1153)) | (1 << (self::PARTITION_LIST - 1153)) | (1 << (self::PARTITION - 1153)) | (1 << (self::PARTITION_RANGE - 1153)) | (1 << (self::PARTITIONS - 1153)) | (1 << (self::PARTNUMINST - 1153)) | (1 << (self::PASSING - 1153)) | (1 << (self::PASSWORD_GRACE_TIME - 1153)) | (1 << (self::PASSWORD_LIFE_TIME - 1153)) | (1 << (self::PASSWORD_LOCK_TIME - 1153)) | (1 << (self::PASSWORD - 1153)) | (1 << (self::PASSWORD_REUSE_MAX - 1153)))) !== 0) || (((($_la - 1217)) & ~0x3f) === 0 && ((1 << ($_la - 1217)) & ((1 << (self::PASSWORD_REUSE_TIME - 1217)) | (1 << (self::PASSWORD_VERIFY_FUNCTION - 1217)) | (1 << (self::PAST - 1217)) | (1 << (self::PATCH - 1217)) | (1 << (self::PATH - 1217)) | (1 << (self::PATH_PREFIX - 1217)) | (1 << (self::PATHS - 1217)) | (1 << (self::PATTERN - 1217)) | (1 << (self::PBL_HS_BEGIN - 1217)) | (1 << (self::PBL_HS_END - 1217)) | (1 << (self::PCTINCREASE - 1217)) | (1 << (self::PCTTHRESHOLD - 1217)) | (1 << (self::PCTUSED - 1217)) | (1 << (self::PCTVERSION - 1217)) | (1 << (self::PENDING - 1217)) | (1 << (self::PERCENT_KEYWORD - 1217)) | (1 << (self::PERCENT_RANKM - 1217)) | (1 << (self::PERFORMANCE - 1217)) | (1 << (self::PERIOD_KEYWORD - 1217)) | (1 << (self::PERMANENT - 1217)) | (1 << (self::PERMISSION - 1217)) | (1 << (self::PERMUTE - 1217)) | (1 << (self::PER - 1217)) | (1 << (self::PFILE - 1217)) | (1 << (self::PHYSICAL - 1217)) | (1 << (self::PIKEY - 1217)) | (1 << (self::PIPELINED - 1217)) | (1 << (self::PIV_GB - 1217)) | (1 << (self::PIVOT - 1217)) | (1 << (self::PIV_SSF - 1217)) | (1 << (self::PLACE_DISTINCT - 1217)) | (1 << (self::PLACE_GROUP_BY - 1217)) | (1 << (self::PLAN - 1217)) | (1 << (self::PLSCOPE_SETTINGS - 1217)) | (1 << (self::PLS_INTEGER - 1217)) | (1 << (self::PLSQL_CCFLAGS - 1217)) | (1 << (self::PLSQL_CODE_TYPE - 1217)) | (1 << (self::PLSQL_DEBUG - 1217)) | (1 << (self::PLSQL_OPTIMIZE_LEVEL - 1217)) | (1 << (self::PLSQL_WARNINGS - 1217)) | (1 << (self::PLUGGABLE - 1217)) | (1 << (self::POINT - 1217)) | (1 << (self::POLICY - 1217)) | (1 << (self::POOL_16K - 1217)) | (1 << (self::POOL_2K - 1217)) | (1 << (self::POOL_32K - 1217)) | (1 << (self::POOL_4K - 1217)) | (1 << (self::POOL_8K - 1217)) | (1 << (self::POSITIVEN - 1217)) | (1 << (self::POSITIVE - 1217)) | (1 << (self::POST_TRANSACTION - 1217)) | (1 << (self::POWERMULTISET_BY_CARDINALITY - 1217)) | (1 << (self::POWERMULTISET - 1217)) | (1 << (self::POWER - 1217)) | (1 << (self::PQ_CONCURRENT_UNION - 1217)) | (1 << (self::PQ_DISTRIBUTE - 1217)))) !== 0) || (((($_la - 1281)) & ~0x3f) === 0 && ((1 << ($_la - 1281)) & ((1 << (self::PQ_DISTRIBUTE_WINDOW - 1281)) | (1 << (self::PQ_FILTER - 1281)) | (1 << (self::PQ_MAP - 1281)) | (1 << (self::PQ_NOMAP - 1281)) | (1 << (self::PQ_REPLICATE - 1281)) | (1 << (self::PQ_SKEW - 1281)) | (1 << (self::PRAGMA - 1281)) | (1 << (self::PREBUILT - 1281)) | (1 << (self::PRECEDES - 1281)) | (1 << (self::PRECEDING - 1281)) | (1 << (self::PRECISION - 1281)) | (1 << (self::PRECOMPUTE_SUBQUERY - 1281)) | (1 << (self::PREDICATE_REORDERS - 1281)) | (1 << (self::PRELOAD - 1281)) | (1 << (self::PREPARE - 1281)) | (1 << (self::PRESENTNNV - 1281)) | (1 << (self::PRESENT - 1281)) | (1 << (self::PRESENTV - 1281)) | (1 << (self::PRESERVE_OID - 1281)) | (1 << (self::PRESERVE - 1281)) | (1 << (self::PRETTY - 1281)) | (1 << (self::PREVIOUS - 1281)) | (1 << (self::PREV - 1281)) | (1 << (self::PRIMARY - 1281)) | (1 << (self::PRINTBLOBTOCLOB - 1281)) | (1 << (self::PRIORITY - 1281)) | (1 << (self::PRIVATE - 1281)) | (1 << (self::PRIVATE_SGA - 1281)) | (1 << (self::PRIVILEGED - 1281)) | (1 << (self::PRIVILEGE - 1281)) | (1 << (self::PRIVILEGES - 1281)) | (1 << (self::PROCEDURAL - 1281)) | (1 << (self::PROCEDURE - 1281)) | (1 << (self::PROCESS - 1281)) | (1 << (self::PROFILE - 1281)) | (1 << (self::PROGRAM - 1281)) | (1 << (self::PROJECT - 1281)) | (1 << (self::PROPAGATE - 1281)) | (1 << (self::PROTECTED - 1281)) | (1 << (self::PROTECTION - 1281)) | (1 << (self::PROXY - 1281)) | (1 << (self::PRUNING - 1281)) | (1 << (self::PULL_PRED - 1281)) | (1 << (self::PURGE - 1281)) | (1 << (self::PUSH_PRED - 1281)) | (1 << (self::PUSH_SUBQ - 1281)) | (1 << (self::PX_FAULT_TOLERANCE - 1281)) | (1 << (self::PX_GRANULE - 1281)) | (1 << (self::PX_JOIN_FILTER - 1281)) | (1 << (self::QB_NAME - 1281)) | (1 << (self::QUERY_BLOCK - 1281)) | (1 << (self::QUERY - 1281)) | (1 << (self::QUEUE_CURR - 1281)) | (1 << (self::QUEUE - 1281)) | (1 << (self::QUEUE_ROWP - 1281)) | (1 << (self::QUIESCE - 1281)) | (1 << (self::QUORUM - 1281)) | (1 << (self::QUOTA - 1281)) | (1 << (self::RAISE - 1281)) | (1 << (self::RANDOM_LOCAL - 1281)) | (1 << (self::RANDOM - 1281)) | (1 << (self::RANGE - 1281)))) !== 0) || (((($_la - 1345)) & ~0x3f) === 0 && ((1 << ($_la - 1345)) & ((1 << (self::RANKM - 1345)) | (1 << (self::RAPIDLY - 1345)) | (1 << (self::RAW - 1345)) | (1 << (self::RAWTOHEX - 1345)) | (1 << (self::RAWTONHEX - 1345)) | (1 << (self::RBA - 1345)) | (1 << (self::RBO_OUTLINE - 1345)) | (1 << (self::RDBA - 1345)) | (1 << (self::READ - 1345)) | (1 << (self::READS - 1345)) | (1 << (self::REALM - 1345)) | (1 << (self::REAL - 1345)) | (1 << (self::REBALANCE - 1345)) | (1 << (self::REBUILD - 1345)) | (1 << (self::RECORD - 1345)) | (1 << (self::RECORDS_PER_BLOCK - 1345)) | (1 << (self::RECOVERABLE - 1345)) | (1 << (self::RECOVER - 1345)) | (1 << (self::RECOVERY - 1345)) | (1 << (self::RECYCLEBIN - 1345)) | (1 << (self::RECYCLE - 1345)) | (1 << (self::REDACTION - 1345)) | (1 << (self::REDEFINE - 1345)) | (1 << (self::REDO - 1345)) | (1 << (self::REDUCED - 1345)) | (1 << (self::REDUNDANCY - 1345)) | (1 << (self::REF_CASCADE_CURSOR - 1345)) | (1 << (self::REFERENCED - 1345)) | (1 << (self::REFERENCE - 1345)) | (1 << (self::REFERENCES - 1345)) | (1 << (self::REFERENCING - 1345)) | (1 << (self::REF - 1345)) | (1 << (self::REFRESH - 1345)) | (1 << (self::REFTOHEX - 1345)) | (1 << (self::REGEXP_COUNT - 1345)) | (1 << (self::REGEXP_INSTR - 1345)) | (1 << (self::REGEXP_LIKE - 1345)) | (1 << (self::REGEXP_REPLACE - 1345)) | (1 << (self::REGEXP_SUBSTR - 1345)) | (1 << (self::REGISTER - 1345)) | (1 << (self::REGR_AVGX - 1345)) | (1 << (self::REGR_AVGY - 1345)) | (1 << (self::REGR_COUNT - 1345)) | (1 << (self::REGR_INTERCEPT - 1345)) | (1 << (self::REGR_R2 - 1345)) | (1 << (self::REGR_SLOPE - 1345)) | (1 << (self::REGR_SXX - 1345)) | (1 << (self::REGR_SXY - 1345)) | (1 << (self::REGR_SYY - 1345)) | (1 << (self::REGULAR - 1345)) | (1 << (self::REJECT - 1345)) | (1 << (self::REKEY - 1345)) | (1 << (self::RELATIONAL - 1345)) | (1 << (self::RELOCATE - 1345)) | (1 << (self::RELY - 1345)) | (1 << (self::REMAINDER - 1345)) | (1 << (self::REMOTE_MAPPED - 1345)) | (1 << (self::REMOVE - 1345)) | (1 << (self::RENAME - 1345)) | (1 << (self::REPAIR - 1345)) | (1 << (self::REPEAT - 1345)) | (1 << (self::REPLACE - 1345)) | (1 << (self::REPLICATION - 1345)))) !== 0) || (((($_la - 1409)) & ~0x3f) === 0 && ((1 << ($_la - 1409)) & ((1 << (self::REQUIRED - 1409)) | (1 << (self::RESETLOGS - 1409)) | (1 << (self::RESET - 1409)) | (1 << (self::RESIZE - 1409)) | (1 << (self::RESOLVE - 1409)) | (1 << (self::RESOLVER - 1409)) | (1 << (self::RESPECT - 1409)) | (1 << (self::RESTART - 1409)) | (1 << (self::RESTORE_AS_INTERVALS - 1409)) | (1 << (self::RESTORE - 1409)) | (1 << (self::RESTRICT_ALL_REF_CONS - 1409)) | (1 << (self::RESTRICTED - 1409)) | (1 << (self::RESTRICT_REFERENCES - 1409)) | (1 << (self::RESTRICT - 1409)) | (1 << (self::RESULT_CACHE - 1409)) | (1 << (self::RESULT - 1409)) | (1 << (self::RESUMABLE - 1409)) | (1 << (self::RESUME - 1409)) | (1 << (self::RETENTION - 1409)) | (1 << (self::RETRY_ON_ROW_CHANGE - 1409)) | (1 << (self::RETURNING - 1409)) | (1 << (self::RETURN - 1409)) | (1 << (self::REUSE - 1409)) | (1 << (self::REVERSE - 1409)) | (1 << (self::REWRITE_OR_ERROR - 1409)) | (1 << (self::REWRITE - 1409)) | (1 << (self::RIGHT - 1409)) | (1 << (self::ROLE - 1409)) | (1 << (self::ROLESET - 1409)) | (1 << (self::ROLES - 1409)) | (1 << (self::ROLLBACK - 1409)) | (1 << (self::ROLLING - 1409)) | (1 << (self::ROLLUP - 1409)) | (1 << (self::ROWDEPENDENCIES - 1409)) | (1 << (self::ROWID_MAPPING_TABLE - 1409)) | (1 << (self::ROWID - 1409)) | (1 << (self::ROWIDTOCHAR - 1409)) | (1 << (self::ROWIDTONCHAR - 1409)) | (1 << (self::ROW_LENGTH - 1409)) | (1 << (self::ROWNUM - 1409)) | (1 << (self::ROW - 1409)) | (1 << (self::ROWS - 1409)) | (1 << (self::RPAD - 1409)) | (1 << (self::RTRIM - 1409)) | (1 << (self::RULE - 1409)) | (1 << (self::RULES - 1409)) | (1 << (self::RUNNING - 1409)) | (1 << (self::SALT - 1409)) | (1 << (self::SAMPLE - 1409)) | (1 << (self::SAVE_AS_INTERVALS - 1409)) | (1 << (self::SAVEPOINT - 1409)) | (1 << (self::SAVE - 1409)) | (1 << (self::SB4 - 1409)) | (1 << (self::SCALE_ROWS - 1409)) | (1 << (self::SCALE - 1409)) | (1 << (self::SCAN_INSTANCES - 1409)) | (1 << (self::SCAN - 1409)) | (1 << (self::SCHEDULER - 1409)) | (1 << (self::SCHEMACHECK - 1409)) | (1 << (self::SCHEMA - 1409)) | (1 << (self::SCN_ASCENDING - 1409)) | (1 << (self::SCN - 1409)))) !== 0) || (((($_la - 1473)) & ~0x3f) === 0 && ((1 << ($_la - 1473)) & ((1 << (self::SCOPE - 1473)) | (1 << (self::SCRUB - 1473)) | (1 << (self::SD_ALL - 1473)) | (1 << (self::SD_INHIBIT - 1473)) | (1 << (self::SDO_GEOM_MBR - 1473)) | (1 << (self::SD_SHOW - 1473)) | (1 << (self::SEARCH - 1473)) | (1 << (self::SECOND - 1473)) | (1 << (self::SECRET - 1473)) | (1 << (self::SECUREFILE_DBA - 1473)) | (1 << (self::SECUREFILE - 1473)) | (1 << (self::SECURITY - 1473)) | (1 << (self::SEED - 1473)) | (1 << (self::SEG_BLOCK - 1473)) | (1 << (self::SEG_FILE - 1473)) | (1 << (self::SEGMENT - 1473)) | (1 << (self::SELECTIVITY - 1473)) | (1 << (self::SELF - 1473)) | (1 << (self::SEMIJOIN_DRIVER - 1473)) | (1 << (self::SEMIJOIN - 1473)) | (1 << (self::SEMI_TO_INNER - 1473)) | (1 << (self::SEQUENCED - 1473)) | (1 << (self::SEQUENCE - 1473)) | (1 << (self::SEQUENTIAL - 1473)) | (1 << (self::SERIALIZABLE - 1473)) | (1 << (self::SERIALLY_REUSABLE - 1473)) | (1 << (self::SERIAL - 1473)) | (1 << (self::SERVERERROR - 1473)) | (1 << (self::SERVICE_NAME_CONVERT - 1473)) | (1 << (self::SERVICES - 1473)) | (1 << (self::SESSION_CACHED_CURSORS - 1473)) | (1 << (self::SESSION - 1473)) | (1 << (self::SESSIONS_PER_USER - 1473)) | (1 << (self::SESSIONTIMEZONE - 1473)) | (1 << (self::SESSIONTZNAME - 1473)) | (1 << (self::SET - 1473)) | (1 << (self::SETS - 1473)) | (1 << (self::SETTINGS - 1473)) | (1 << (self::SET_TO_JOIN - 1473)) | (1 << (self::SEVERE - 1473)) | (1 << (self::SHARED_POOL - 1473)) | (1 << (self::SHARED - 1473)) | (1 << (self::SHARING - 1473)) | (1 << (self::SHELFLIFE - 1473)) | (1 << (self::SHOW - 1473)) | (1 << (self::SHRINK - 1473)) | (1 << (self::SHUTDOWN - 1473)) | (1 << (self::SIBLINGS - 1473)) | (1 << (self::SID - 1473)) | (1 << (self::SIGNAL_COMPONENT - 1473)) | (1 << (self::SIGNAL_FUNCTION - 1473)) | (1 << (self::SIGN - 1473)) | (1 << (self::SIGNTYPE - 1473)) | (1 << (self::SIMPLE_INTEGER - 1473)) | (1 << (self::SIMPLE - 1473)) | (1 << (self::SINGLE - 1473)) | (1 << (self::SINGLETASK - 1473)) | (1 << (self::SINH - 1473)) | (1 << (self::SIN - 1473)) | (1 << (self::SKIP_EXT_OPTIMIZER - 1473)))) !== 0) || (((($_la - 1537)) & ~0x3f) === 0 && ((1 << ($_la - 1537)) & ((1 << (self::SKIP_ - 1537)) | (1 << (self::SKIP_UNQ_UNUSABLE_IDX - 1537)) | (1 << (self::SKIP_UNUSABLE_INDEXES - 1537)) | (1 << (self::SMALLFILE - 1537)) | (1 << (self::SMALLINT - 1537)) | (1 << (self::SNAPSHOT - 1537)) | (1 << (self::SOME - 1537)) | (1 << (self::SORT - 1537)) | (1 << (self::SOUNDEX - 1537)) | (1 << (self::SOURCE_FILE_DIRECTORY - 1537)) | (1 << (self::SOURCE_FILE_NAME_CONVERT - 1537)) | (1 << (self::SOURCE - 1537)) | (1 << (self::SPACE_KEYWORD - 1537)) | (1 << (self::SPECIFICATION - 1537)) | (1 << (self::SPFILE - 1537)) | (1 << (self::SPLIT - 1537)) | (1 << (self::SPREADSHEET - 1537)) | (1 << (self::SQLDATA - 1537)) | (1 << (self::SQLERROR - 1537)) | (1 << (self::SQLLDR - 1537)) | (1 << (self::SQL - 1537)) | (1 << (self::SQL_TRACE - 1537)) | (1 << (self::SQL_TRANSLATION_PROFILE - 1537)) | (1 << (self::SQRT - 1537)) | (1 << (self::STALE - 1537)) | (1 << (self::STANDALONE - 1537)) | (1 << (self::STANDARD_HASH - 1537)) | (1 << (self::STANDBY_MAX_DATA_DELAY - 1537)) | (1 << (self::STANDBYS - 1537)) | (1 << (self::STANDBY - 1537)) | (1 << (self::STAR - 1537)) | (1 << (self::STAR_TRANSFORMATION - 1537)) | (1 << (self::STARTUP - 1537)) | (1 << (self::STATEMENT_ID - 1537)) | (1 << (self::STATEMENT_QUEUING - 1537)) | (1 << (self::STATEMENTS - 1537)) | (1 << (self::STATEMENT - 1537)) | (1 << (self::STATE - 1537)) | (1 << (self::STATIC - 1537)) | (1 << (self::STATISTICS - 1537)) | (1 << (self::STATS_BINOMIAL_TEST - 1537)) | (1 << (self::STATS_CROSSTAB - 1537)) | (1 << (self::STATS_F_TEST - 1537)) | (1 << (self::STATS_KS_TEST - 1537)) | (1 << (self::STATS_MODE - 1537)) | (1 << (self::STATS_MW_TEST - 1537)) | (1 << (self::STATS_ONE_WAY_ANOVA - 1537)) | (1 << (self::STATS_T_TEST_INDEP - 1537)) | (1 << (self::STATS_T_TEST_INDEPU - 1537)) | (1 << (self::STATS_T_TEST_ONE - 1537)) | (1 << (self::STATS_T_TEST_PAIRED - 1537)) | (1 << (self::STATS_WSR_TEST - 1537)) | (1 << (self::STDDEV_POP - 1537)) | (1 << (self::STDDEV_SAMP - 1537)) | (1 << (self::STOP - 1537)) | (1 << (self::STORAGE - 1537)) | (1 << (self::STORE - 1537)) | (1 << (self::STREAMS - 1537)) | (1 << (self::STREAM - 1537)) | (1 << (self::STRICT - 1537)) | (1 << (self::STRING - 1537)) | (1 << (self::STRIPE_COLUMNS - 1537)) | (1 << (self::STRIPE_WIDTH - 1537)))) !== 0) || (((($_la - 1601)) & ~0x3f) === 0 && ((1 << ($_la - 1601)) & ((1 << (self::STRIP - 1601)) | (1 << (self::STRUCTURE - 1601)) | (1 << (self::SUBMULTISET - 1601)) | (1 << (self::SUBPARTITION_REL - 1601)) | (1 << (self::SUBPARTITIONS - 1601)) | (1 << (self::SUBPARTITION - 1601)) | (1 << (self::SUBQUERIES - 1601)) | (1 << (self::SUBQUERY_PRUNING - 1601)) | (1 << (self::SUBSCRIBE - 1601)) | (1 << (self::SUBSET - 1601)) | (1 << (self::SUBSTITUTABLE - 1601)) | (1 << (self::SUBSTR2 - 1601)) | (1 << (self::SUBSTR4 - 1601)) | (1 << (self::SUBSTRB - 1601)) | (1 << (self::SUBSTRC - 1601)) | (1 << (self::SUBTYPE - 1601)) | (1 << (self::SUCCESSFUL - 1601)) | (1 << (self::SUCCESS - 1601)) | (1 << (self::SUMMARY - 1601)) | (1 << (self::SUPPLEMENTAL - 1601)) | (1 << (self::SUSPEND - 1601)) | (1 << (self::SWAP_JOIN_INPUTS - 1601)) | (1 << (self::SWITCHOVER - 1601)) | (1 << (self::SWITCH - 1601)) | (1 << (self::SYNCHRONOUS - 1601)) | (1 << (self::SYNC - 1601)) | (1 << (self::SYSASM - 1601)) | (1 << (self::SYS_AUDIT - 1601)) | (1 << (self::SYSAUX - 1601)) | (1 << (self::SYSBACKUP - 1601)) | (1 << (self::SYS_CHECKACL - 1601)) | (1 << (self::SYS_CHECK_PRIVILEGE - 1601)) | (1 << (self::SYS_CONNECT_BY_PATH - 1601)) | (1 << (self::SYS_CONTEXT - 1601)) | (1 << (self::SYSDATE - 1601)) | (1 << (self::SYSDBA - 1601)) | (1 << (self::SYS_DBURIGEN - 1601)) | (1 << (self::SYSDG - 1601)) | (1 << (self::SYS_DL_CURSOR - 1601)) | (1 << (self::SYS_DM_RXFORM_CHR - 1601)) | (1 << (self::SYS_DM_RXFORM_NUM - 1601)) | (1 << (self::SYS_DOM_COMPARE - 1601)) | (1 << (self::SYS_DST_PRIM2SEC - 1601)) | (1 << (self::SYS_DST_SEC2PRIM - 1601)) | (1 << (self::SYS_ET_BFILE_TO_RAW - 1601)) | (1 << (self::SYS_ET_BLOB_TO_IMAGE - 1601)) | (1 << (self::SYS_ET_IMAGE_TO_BLOB - 1601)) | (1 << (self::SYS_ET_RAW_TO_BFILE - 1601)) | (1 << (self::SYS_EXTPDTXT - 1601)) | (1 << (self::SYS_EXTRACT_UTC - 1601)) | (1 << (self::SYS_FBT_INSDEL - 1601)) | (1 << (self::SYS_FILTER_ACLS - 1601)) | (1 << (self::SYS_FNMATCHES - 1601)) | (1 << (self::SYS_FNREPLACE - 1601)) | (1 << (self::SYS_GET_ACLIDS - 1601)) | (1 << (self::SYS_GET_COL_ACLIDS - 1601)) | (1 << (self::SYS_GET_PRIVILEGES - 1601)) | (1 << (self::SYS_GETTOKENID - 1601)) | (1 << (self::SYS_GETXTIVAL - 1601)) | (1 << (self::SYS_GUID - 1601)) | (1 << (self::SYSGUID - 1601)) | (1 << (self::SYSKM - 1601)) | (1 << (self::SYS_MAKE_XMLNODEID - 1601)))) !== 0) || (((($_la - 1665)) & ~0x3f) === 0 && ((1 << ($_la - 1665)) & ((1 << (self::SYS_MAKEXML - 1665)) | (1 << (self::SYS_MKXMLATTR - 1665)) | (1 << (self::SYS_MKXTI - 1665)) | (1 << (self::SYSOBJ - 1665)) | (1 << (self::SYS_OP_ADT2BIN - 1665)) | (1 << (self::SYS_OP_ADTCONS - 1665)) | (1 << (self::SYS_OP_ALSCRVAL - 1665)) | (1 << (self::SYS_OP_ATG - 1665)) | (1 << (self::SYS_OP_BIN2ADT - 1665)) | (1 << (self::SYS_OP_BITVEC - 1665)) | (1 << (self::SYS_OP_BL2R - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_BLOOM_FILTER - 1665)) | (1 << (self::SYS_OP_C2C - 1665)) | (1 << (self::SYS_OP_CAST - 1665)) | (1 << (self::SYS_OP_CEG - 1665)) | (1 << (self::SYS_OP_CL2C - 1665)) | (1 << (self::SYS_OP_COMBINED_HASH - 1665)) | (1 << (self::SYS_OP_COMP - 1665)) | (1 << (self::SYS_OP_CONVERT - 1665)) | (1 << (self::SYS_OP_COUNTCHG - 1665)) | (1 << (self::SYS_OP_CSCONV - 1665)) | (1 << (self::SYS_OP_CSCONVTEST - 1665)) | (1 << (self::SYS_OP_CSR - 1665)) | (1 << (self::SYS_OP_CSX_PATCH - 1665)) | (1 << (self::SYS_OP_CYCLED_SEQ - 1665)) | (1 << (self::SYS_OP_DECOMP - 1665)) | (1 << (self::SYS_OP_DESCEND - 1665)) | (1 << (self::SYS_OP_DISTINCT - 1665)) | (1 << (self::SYS_OP_DRA - 1665)) | (1 << (self::SYS_OP_DUMP - 1665)) | (1 << (self::SYS_OP_DV_CHECK - 1665)) | (1 << (self::SYS_OP_ENFORCE_NOT_NULL - 1665)) | (1 << (self::SYSOPER - 1665)) | (1 << (self::SYS_OP_EXTRACT - 1665)) | (1 << (self::SYS_OP_GROUPING - 1665)) | (1 << (self::SYS_OP_GUID - 1665)) | (1 << (self::SYS_OP_HASH - 1665)) | (1 << (self::SYS_OP_IIX - 1665)) | (1 << (self::SYS_OP_ITR - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_CREATE - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER_LIST - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_SUCCEEDED - 1665)) | (1 << (self::SYS_OP_KEY_VECTOR_USE - 1665)) | (1 << (self::SYS_OP_LBID - 1665)) | (1 << (self::SYS_OP_LOBLOC2BLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2CLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2ID - 1665)) | (1 << (self::SYS_OP_LOBLOC2NCLOB - 1665)) | (1 << (self::SYS_OP_LOBLOC2TYP - 1665)) | (1 << (self::SYS_OP_LSVI - 1665)) | (1 << (self::SYS_OP_LVL - 1665)) | (1 << (self::SYS_OP_MAKEOID - 1665)) | (1 << (self::SYS_OP_MAP_NONNULL - 1665)) | (1 << (self::SYS_OP_MSR - 1665)) | (1 << (self::SYS_OP_NICOMBINE - 1665)) | (1 << (self::SYS_OP_NIEXTRACT - 1665)) | (1 << (self::SYS_OP_NII - 1665)) | (1 << (self::SYS_OP_NIX - 1665)) | (1 << (self::SYS_OP_NOEXPAND - 1665)) | (1 << (self::SYS_OP_NTCIMG - 1665)) | (1 << (self::SYS_OP_NUMTORAW - 1665)) | (1 << (self::SYS_OP_OIDVALUE - 1665)))) !== 0) || (((($_la - 1729)) & ~0x3f) === 0 && ((1 << ($_la - 1729)) & ((1 << (self::SYS_OP_OPNSIZE - 1729)) | (1 << (self::SYS_OP_PAR_1 - 1729)) | (1 << (self::SYS_OP_PARGID_1 - 1729)) | (1 << (self::SYS_OP_PARGID - 1729)) | (1 << (self::SYS_OP_PAR - 1729)) | (1 << (self::SYS_OP_PART_ID - 1729)) | (1 << (self::SYS_OP_PIVOT - 1729)) | (1 << (self::SYS_OP_R2O - 1729)) | (1 << (self::SYS_OP_RAWTONUM - 1729)) | (1 << (self::SYS_OP_RDTM - 1729)) | (1 << (self::SYS_OP_REF - 1729)) | (1 << (self::SYS_OP_RMTD - 1729)) | (1 << (self::SYS_OP_ROWIDTOOBJ - 1729)) | (1 << (self::SYS_OP_RPB - 1729)) | (1 << (self::SYS_OPTLOBPRBSC - 1729)) | (1 << (self::SYS_OP_TOSETID - 1729)) | (1 << (self::SYS_OP_TPR - 1729)) | (1 << (self::SYS_OP_TRTB - 1729)) | (1 << (self::SYS_OPTXICMP - 1729)) | (1 << (self::SYS_OPTXQCASTASNQ - 1729)) | (1 << (self::SYS_OP_UNDESCEND - 1729)) | (1 << (self::SYS_OP_VECAND - 1729)) | (1 << (self::SYS_OP_VECBIT - 1729)) | (1 << (self::SYS_OP_VECOR - 1729)) | (1 << (self::SYS_OP_VECXOR - 1729)) | (1 << (self::SYS_OP_VERSION - 1729)) | (1 << (self::SYS_OP_VREF - 1729)) | (1 << (self::SYS_OP_VVD - 1729)) | (1 << (self::SYS_OP_XMLCONS_FOR_CSX - 1729)) | (1 << (self::SYS_OP_XPTHATG - 1729)) | (1 << (self::SYS_OP_XPTHIDX - 1729)) | (1 << (self::SYS_OP_XPTHOP - 1729)) | (1 << (self::SYS_OP_XTXT2SQLT - 1729)) | (1 << (self::SYS_OP_ZONE_ID - 1729)) | (1 << (self::SYS_ORDERKEY_DEPTH - 1729)) | (1 << (self::SYS_ORDERKEY_MAXCHILD - 1729)) | (1 << (self::SYS_ORDERKEY_PARENT - 1729)) | (1 << (self::SYS_PARALLEL_TXN - 1729)) | (1 << (self::SYS_PATHID_IS_ATTR - 1729)) | (1 << (self::SYS_PATHID_IS_NMSPC - 1729)) | (1 << (self::SYS_PATHID_LASTNAME - 1729)) | (1 << (self::SYS_PATHID_LASTNMSPC - 1729)) | (1 << (self::SYS_PATH_REVERSE - 1729)) | (1 << (self::SYS_PXQEXTRACT - 1729)) | (1 << (self::SYS_RAW_TO_XSID - 1729)) | (1 << (self::SYS_RID_ORDER - 1729)) | (1 << (self::SYS_ROW_DELTA - 1729)) | (1 << (self::SYS_SC_2_XMLT - 1729)) | (1 << (self::SYS_SYNRCIREDO - 1729)) | (1 << (self::SYSTEM_DEFINED - 1729)) | (1 << (self::SYSTEM - 1729)) | (1 << (self::SYSTIMESTAMP - 1729)) | (1 << (self::SYS_TYPEID - 1729)) | (1 << (self::SYS_UMAKEXML - 1729)) | (1 << (self::SYS_XMLANALYZE - 1729)) | (1 << (self::SYS_XMLCONTAINS - 1729)) | (1 << (self::SYS_XMLCONV - 1729)) | (1 << (self::SYS_XMLEXNSURI - 1729)) | (1 << (self::SYS_XMLGEN - 1729)) | (1 << (self::SYS_XMLI_LOC_ISNODE - 1729)) | (1 << (self::SYS_XMLI_LOC_ISTEXT - 1729)) | (1 << (self::SYS_XMLINSTR - 1729)) | (1 << (self::SYS_XMLLOCATOR_GETSVAL - 1729)) | (1 << (self::SYS_XMLNODEID_GETCID - 1729)))) !== 0) || (((($_la - 1793)) & ~0x3f) === 0 && ((1 << ($_la - 1793)) & ((1 << (self::SYS_XMLNODEID_GETLOCATOR - 1793)) | (1 << (self::SYS_XMLNODEID_GETOKEY - 1793)) | (1 << (self::SYS_XMLNODEID_GETPATHID - 1793)) | (1 << (self::SYS_XMLNODEID_GETPTRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETRID - 1793)) | (1 << (self::SYS_XMLNODEID_GETSVAL - 1793)) | (1 << (self::SYS_XMLNODEID_GETTID - 1793)) | (1 << (self::SYS_XMLNODEID - 1793)) | (1 << (self::SYS_XMLT_2_SC - 1793)) | (1 << (self::SYS_XMLTRANSLATE - 1793)) | (1 << (self::SYS_XMLTYPE2SQL - 1793)) | (1 << (self::SYS_XQ_ASQLCNV - 1793)) | (1 << (self::SYS_XQ_ATOMCNVCHK - 1793)) | (1 << (self::SYS_XQBASEURI - 1793)) | (1 << (self::SYS_XQCASTABLEERRH - 1793)) | (1 << (self::SYS_XQCODEP2STR - 1793)) | (1 << (self::SYS_XQCODEPEQ - 1793)) | (1 << (self::SYS_XQCON2SEQ - 1793)) | (1 << (self::SYS_XQCONCAT - 1793)) | (1 << (self::SYS_XQDELETE - 1793)) | (1 << (self::SYS_XQDFLTCOLATION - 1793)) | (1 << (self::SYS_XQDOC - 1793)) | (1 << (self::SYS_XQDOCURI - 1793)) | (1 << (self::SYS_XQDURDIV - 1793)) | (1 << (self::SYS_XQED4URI - 1793)) | (1 << (self::SYS_XQENDSWITH - 1793)) | (1 << (self::SYS_XQERRH - 1793)) | (1 << (self::SYS_XQERR - 1793)) | (1 << (self::SYS_XQESHTMLURI - 1793)) | (1 << (self::SYS_XQEXLOBVAL - 1793)) | (1 << (self::SYS_XQEXSTWRP - 1793)) | (1 << (self::SYS_XQEXTRACT - 1793)) | (1 << (self::SYS_XQEXTRREF - 1793)) | (1 << (self::SYS_XQEXVAL - 1793)) | (1 << (self::SYS_XQFB2STR - 1793)) | (1 << (self::SYS_XQFNBOOL - 1793)) | (1 << (self::SYS_XQFNCMP - 1793)) | (1 << (self::SYS_XQFNDATIM - 1793)) | (1 << (self::SYS_XQFNLNAME - 1793)) | (1 << (self::SYS_XQFNNM - 1793)) | (1 << (self::SYS_XQFNNSURI - 1793)) | (1 << (self::SYS_XQFNPREDTRUTH - 1793)) | (1 << (self::SYS_XQFNQNM - 1793)) | (1 << (self::SYS_XQFNROOT - 1793)) | (1 << (self::SYS_XQFORMATNUM - 1793)) | (1 << (self::SYS_XQFTCONTAIN - 1793)) | (1 << (self::SYS_XQFUNCR - 1793)) | (1 << (self::SYS_XQGETCONTENT - 1793)) | (1 << (self::SYS_XQINDXOF - 1793)) | (1 << (self::SYS_XQINSERT - 1793)) | (1 << (self::SYS_XQINSPFX - 1793)) | (1 << (self::SYS_XQIRI2URI - 1793)) | (1 << (self::SYS_XQLANG - 1793)) | (1 << (self::SYS_XQLLNMFRMQNM - 1793)) | (1 << (self::SYS_XQMKNODEREF - 1793)) | (1 << (self::SYS_XQNILLED - 1793)) | (1 << (self::SYS_XQNODENAME - 1793)) | (1 << (self::SYS_XQNORMSPACE - 1793)) | (1 << (self::SYS_XQNORMUCODE - 1793)) | (1 << (self::SYS_XQ_NRNG - 1793)) | (1 << (self::SYS_XQNSP4PFX - 1793)) | (1 << (self::SYS_XQNSPFRMQNM - 1793)) | (1 << (self::SYS_XQPFXFRMQNM - 1793)) | (1 << (self::SYS_XQ_PKSQL2XML - 1793)))) !== 0) || (((($_la - 1857)) & ~0x3f) === 0 && ((1 << ($_la - 1857)) & ((1 << (self::SYS_XQPOLYABS - 1857)) | (1 << (self::SYS_XQPOLYADD - 1857)) | (1 << (self::SYS_XQPOLYCEL - 1857)) | (1 << (self::SYS_XQPOLYCSTBL - 1857)) | (1 << (self::SYS_XQPOLYCST - 1857)) | (1 << (self::SYS_XQPOLYDIV - 1857)) | (1 << (self::SYS_XQPOLYFLR - 1857)) | (1 << (self::SYS_XQPOLYMOD - 1857)) | (1 << (self::SYS_XQPOLYMUL - 1857)) | (1 << (self::SYS_XQPOLYRND - 1857)) | (1 << (self::SYS_XQPOLYSQRT - 1857)) | (1 << (self::SYS_XQPOLYSUB - 1857)) | (1 << (self::SYS_XQPOLYUMUS - 1857)) | (1 << (self::SYS_XQPOLYUPLS - 1857)) | (1 << (self::SYS_XQPOLYVEQ - 1857)) | (1 << (self::SYS_XQPOLYVGE - 1857)) | (1 << (self::SYS_XQPOLYVGT - 1857)) | (1 << (self::SYS_XQPOLYVLE - 1857)) | (1 << (self::SYS_XQPOLYVLT - 1857)) | (1 << (self::SYS_XQPOLYVNE - 1857)) | (1 << (self::SYS_XQREF2VAL - 1857)) | (1 << (self::SYS_XQRENAME - 1857)) | (1 << (self::SYS_XQREPLACE - 1857)) | (1 << (self::SYS_XQRESVURI - 1857)) | (1 << (self::SYS_XQRNDHALF2EVN - 1857)) | (1 << (self::SYS_XQRSLVQNM - 1857)) | (1 << (self::SYS_XQRYENVPGET - 1857)) | (1 << (self::SYS_XQRYVARGET - 1857)) | (1 << (self::SYS_XQRYWRP - 1857)) | (1 << (self::SYS_XQSEQ2CON4XC - 1857)) | (1 << (self::SYS_XQSEQ2CON - 1857)) | (1 << (self::SYS_XQSEQDEEPEQ - 1857)) | (1 << (self::SYS_XQSEQINSB - 1857)) | (1 << (self::SYS_XQSEQRM - 1857)) | (1 << (self::SYS_XQSEQRVS - 1857)) | (1 << (self::SYS_XQSEQSUB - 1857)) | (1 << (self::SYS_XQSEQTYPMATCH - 1857)) | (1 << (self::SYS_XQSTARTSWITH - 1857)) | (1 << (self::SYS_XQSTATBURI - 1857)) | (1 << (self::SYS_XQSTR2CODEP - 1857)) | (1 << (self::SYS_XQSTRJOIN - 1857)) | (1 << (self::SYS_XQSUBSTRAFT - 1857)) | (1 << (self::SYS_XQSUBSTRBEF - 1857)) | (1 << (self::SYS_XQTOKENIZE - 1857)) | (1 << (self::SYS_XQTREATAS - 1857)) | (1 << (self::SYS_XQ_UPKXML2SQL - 1857)) | (1 << (self::SYS_XQXFORM - 1857)) | (1 << (self::SYS_XSID_TO_RAW - 1857)) | (1 << (self::SYS_ZMAP_FILTER - 1857)) | (1 << (self::SYS_ZMAP_REFRESH - 1857)) | (1 << (self::TABLE_LOOKUP_BY_NL - 1857)) | (1 << (self::TABLESPACE_NO - 1857)) | (1 << (self::TABLESPACE - 1857)) | (1 << (self::TABLES - 1857)) | (1 << (self::TABLE_STATS - 1857)) | (1 << (self::TABLE - 1857)) | (1 << (self::TABNO - 1857)) | (1 << (self::TAG - 1857)) | (1 << (self::TANH - 1857)) | (1 << (self::TAN - 1857)) | (1 << (self::TBLORIDXPARTNUM - 1857)) | (1 << (self::TEMPFILE - 1857)) | (1 << (self::TEMPLATE - 1857)) | (1 << (self::TEMPORARY - 1857)))) !== 0) || (((($_la - 1921)) & ~0x3f) === 0 && ((1 << ($_la - 1921)) & ((1 << (self::TEMP_TABLE - 1921)) | (1 << (self::TEST - 1921)) | (1 << (self::TEXT - 1921)) | (1 << (self::THAN - 1921)) | (1 << (self::THEN - 1921)) | (1 << (self::THE - 1921)) | (1 << (self::THREAD - 1921)) | (1 << (self::THROUGH - 1921)) | (1 << (self::TIER - 1921)) | (1 << (self::TIES - 1921)) | (1 << (self::TIMEOUT - 1921)) | (1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP - 1921)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1921)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1921)) | (1 << (self::TIMES - 1921)) | (1 << (self::TIME - 1921)) | (1 << (self::TIMEZONE_ABBR - 1921)) | (1 << (self::TIMEZONE_HOUR - 1921)) | (1 << (self::TIMEZONE_MINUTE - 1921)) | (1 << (self::TIMEZONE_OFFSET - 1921)) | (1 << (self::TIMEZONE_REGION - 1921)) | (1 << (self::TIME_ZONE - 1921)) | (1 << (self::TIV_GB - 1921)) | (1 << (self::TIV_SSF - 1921)) | (1 << (self::TO_ACLID - 1921)) | (1 << (self::TO_BINARY_DOUBLE - 1921)) | (1 << (self::TO_BINARY_FLOAT - 1921)) | (1 << (self::TO_BLOB - 1921)) | (1 << (self::TO_CLOB - 1921)) | (1 << (self::TO_DSINTERVAL - 1921)) | (1 << (self::TO_LOB - 1921)) | (1 << (self::TO_MULTI_BYTE - 1921)) | (1 << (self::TO_NCHAR - 1921)) | (1 << (self::TO_NCLOB - 1921)) | (1 << (self::TO_NUMBER - 1921)) | (1 << (self::TOPLEVEL - 1921)) | (1 << (self::TO_SINGLE_BYTE - 1921)) | (1 << (self::TO_TIMESTAMP - 1921)) | (1 << (self::TO_TIMESTAMP_TZ - 1921)) | (1 << (self::TO_TIME - 1921)) | (1 << (self::TO_TIME_TZ - 1921)) | (1 << (self::TO_YMINTERVAL - 1921)) | (1 << (self::TRACE - 1921)) | (1 << (self::TRACING - 1921)) | (1 << (self::TRACKING - 1921)) | (1 << (self::TRAILING - 1921)) | (1 << (self::TRANSACTION - 1921)) | (1 << (self::TRANSFORM_DISTINCT_AGG - 1921)) | (1 << (self::TRANSITIONAL - 1921)) | (1 << (self::TRANSITION - 1921)) | (1 << (self::TRANSLATE - 1921)) | (1 << (self::TRANSLATION - 1921)) | (1 << (self::TREAT - 1921)) | (1 << (self::TRIGGERS - 1921)) | (1 << (self::TRIGGER - 1921)) | (1 << (self::TRUE - 1921)) | (1 << (self::TRUNCATE - 1921)) | (1 << (self::TRUNC - 1921)) | (1 << (self::TRUSTED - 1921)) | (1 << (self::TRUST - 1921)) | (1 << (self::TUNING - 1921)))) !== 0) || (((($_la - 1985)) & ~0x3f) === 0 && ((1 << ($_la - 1985)) & ((1 << (self::TX - 1985)) | (1 << (self::TYPES - 1985)) | (1 << (self::TYPE - 1985)) | (1 << (self::TZ_OFFSET - 1985)) | (1 << (self::UB2 - 1985)) | (1 << (self::UBA - 1985)) | (1 << (self::UCS2 - 1985)) | (1 << (self::UID - 1985)) | (1 << (self::UNARCHIVED - 1985)) | (1 << (self::UNBOUNDED - 1985)) | (1 << (self::UNBOUND - 1985)) | (1 << (self::UNCONDITIONAL - 1985)) | (1 << (self::UNDER - 1985)) | (1 << (self::UNDO - 1985)) | (1 << (self::UNDROP - 1985)) | (1 << (self::UNIFORM - 1985)) | (1 << (self::UNISTR - 1985)) | (1 << (self::UNLIMITED - 1985)) | (1 << (self::UNLOAD - 1985)) | (1 << (self::UNLOCK - 1985)) | (1 << (self::UNMATCHED - 1985)) | (1 << (self::UNNEST_INNERJ_DISTINCT_VIEW - 1985)) | (1 << (self::UNNEST_NOSEMIJ_NODISTINCTVIEW - 1985)) | (1 << (self::UNNEST_SEMIJ_VIEW - 1985)) | (1 << (self::UNNEST - 1985)) | (1 << (self::UNPACKED - 1985)) | (1 << (self::UNPIVOT - 1985)) | (1 << (self::UNPLUG - 1985)) | (1 << (self::UNPROTECTED - 1985)) | (1 << (self::UNQUIESCE - 1985)) | (1 << (self::UNRECOVERABLE - 1985)) | (1 << (self::UNRESTRICTED - 1985)) | (1 << (self::UNSUBSCRIBE - 1985)) | (1 << (self::UNTIL - 1985)) | (1 << (self::UNUSABLE - 1985)) | (1 << (self::UNUSED - 1985)) | (1 << (self::UPDATABLE - 1985)) | (1 << (self::UPDATED - 1985)) | (1 << (self::UPDATEXML - 1985)) | (1 << (self::UPD_INDEXES - 1985)) | (1 << (self::UPD_JOININDEX - 1985)) | (1 << (self::UPGRADE - 1985)) | (1 << (self::UPPER - 1985)) | (1 << (self::UPSERT - 1985)) | (1 << (self::UROWID - 1985)) | (1 << (self::USABLE - 1985)) | (1 << (self::USAGE - 1985)) | (1 << (self::USE_ANTI - 1985)) | (1 << (self::USE_CONCAT - 1985)) | (1 << (self::USE_CUBE - 1985)) | (1 << (self::USE_HASH_AGGREGATION - 1985)) | (1 << (self::USE_HASH_GBY_FOR_PUSHDOWN - 1985)) | (1 << (self::USE_HASH - 1985)) | (1 << (self::USE_HIDDEN_PARTITIONS - 1985)) | (1 << (self::USE_INVISIBLE_INDEXES - 1985)) | (1 << (self::USE_MERGE_CARTESIAN - 1985)) | (1 << (self::USE_MERGE - 1985)) | (1 << (self::USE_NL - 1985)) | (1 << (self::USE_NL_WITH_INDEX - 1985)) | (1 << (self::USE_PRIVATE_OUTLINES - 1985)) | (1 << (self::USER_DATA - 1985)))) !== 0) || (((($_la - 2049)) & ~0x3f) === 0 && ((1 << ($_la - 2049)) & ((1 << (self::USER_DEFINED - 2049)) | (1 << (self::USERENV - 2049)) | (1 << (self::USERGROUP - 2049)) | (1 << (self::USER_RECYCLEBIN - 2049)) | (1 << (self::USERS - 2049)) | (1 << (self::USER_TABLESPACES - 2049)) | (1 << (self::USER - 2049)) | (1 << (self::USE_SEMI - 2049)) | (1 << (self::USE_STORED_OUTLINES - 2049)) | (1 << (self::USE_TTT_FOR_GSETS - 2049)) | (1 << (self::USE - 2049)) | (1 << (self::USE_VECTOR_AGGREGATION - 2049)) | (1 << (self::USE_WEAK_NAME_RESL - 2049)) | (1 << (self::USING_NO_EXPAND - 2049)) | (1 << (self::USING - 2049)) | (1 << (self::UTF16BE - 2049)) | (1 << (self::UTF16LE - 2049)) | (1 << (self::UTF32 - 2049)) | (1 << (self::UTF8 - 2049)) | (1 << (self::V1 - 2049)) | (1 << (self::V2 - 2049)) | (1 << (self::VALIDATE - 2049)) | (1 << (self::VALIDATION - 2049)) | (1 << (self::VALID_TIME_END - 2049)) | (1 << (self::VALUE - 2049)) | (1 << (self::VARCHAR2 - 2049)) | (1 << (self::VARCHAR - 2049)) | (1 << (self::VARIABLE - 2049)) | (1 << (self::VAR_POP - 2049)) | (1 << (self::VARRAYS - 2049)) | (1 << (self::VARRAY - 2049)) | (1 << (self::VAR_SAMP - 2049)) | (1 << (self::VARYING - 2049)) | (1 << (self::VECTOR_READ_TRACE - 2049)) | (1 << (self::VECTOR_READ - 2049)) | (1 << (self::VECTOR_TRANSFORM_DIMS - 2049)) | (1 << (self::VECTOR_TRANSFORM_FACT - 2049)) | (1 << (self::VECTOR_TRANSFORM - 2049)) | (1 << (self::VERIFIER - 2049)) | (1 << (self::VERIFY - 2049)) | (1 << (self::VERSIONING - 2049)) | (1 << (self::VERSIONS_ENDSCN - 2049)) | (1 << (self::VERSIONS_ENDTIME - 2049)) | (1 << (self::VERSIONS_OPERATION - 2049)) | (1 << (self::VERSIONS_STARTSCN - 2049)) | (1 << (self::VERSIONS_STARTTIME - 2049)) | (1 << (self::VERSIONS - 2049)) | (1 << (self::VERSIONS_XID - 2049)) | (1 << (self::VERSION - 2049)) | (1 << (self::VIOLATION - 2049)) | (1 << (self::VIRTUAL - 2049)) | (1 << (self::VISIBILITY - 2049)) | (1 << (self::VISIBLE - 2049)) | (1 << (self::VOLUME - 2049)) | (1 << (self::VSIZE - 2049)) | (1 << (self::WAIT - 2049)) | (1 << (self::WALLET - 2049)) | (1 << (self::WARNING - 2049)) | (1 << (self::WEEKS - 2049)) | (1 << (self::WEEK - 2049)) | (1 << (self::WELLFORMED - 2049)) | (1 << (self::WHENEVER - 2049)))) !== 0) || (((($_la - 2113)) & ~0x3f) === 0 && ((1 << ($_la - 2113)) & ((1 << (self::WHEN - 2113)) | (1 << (self::WHILE - 2113)) | (1 << (self::WHITESPACE - 2113)) | (1 << (self::WIDTH_BUCKET - 2113)) | (1 << (self::WITHIN - 2113)) | (1 << (self::WITHOUT - 2113)) | (1 << (self::WITH_PLSQL - 2113)) | (1 << (self::WORK - 2113)) | (1 << (self::WRAPPED - 2113)) | (1 << (self::WRAPPER - 2113)) | (1 << (self::WRITE - 2113)) | (1 << (self::XDB_FASTPATH_INSERT - 2113)) | (1 << (self::X_DYN_PRUNE - 2113)) | (1 << (self::XID - 2113)) | (1 << (self::XML2OBJECT - 2113)) | (1 << (self::XMLAGG - 2113)) | (1 << (self::XMLATTRIBUTES - 2113)) | (1 << (self::XMLCAST - 2113)) | (1 << (self::XMLCDATA - 2113)) | (1 << (self::XMLCOLATTVAL - 2113)) | (1 << (self::XMLCOMMENT - 2113)) | (1 << (self::XMLCONCAT - 2113)) | (1 << (self::XMLDIFF - 2113)) | (1 << (self::XML_DML_RWT_STMT - 2113)) | (1 << (self::XMLELEMENT - 2113)) | (1 << (self::XMLEXISTS2 - 2113)) | (1 << (self::XMLEXISTS - 2113)) | (1 << (self::XMLFOREST - 2113)) | (1 << (self::XMLINDEX_REWRITE_IN_SELECT - 2113)) | (1 << (self::XMLINDEX_REWRITE - 2113)) | (1 << (self::XMLINDEX_SEL_IDX_TBL - 2113)) | (1 << (self::XMLISNODE - 2113)) | (1 << (self::XMLISVALID - 2113)) | (1 << (self::XMLNAMESPACES - 2113)) | (1 << (self::XMLPARSE - 2113)) | (1 << (self::XMLPATCH - 2113)) | (1 << (self::XMLPI - 2113)) | (1 << (self::XMLQUERYVAL - 2113)) | (1 << (self::XMLQUERY - 2113)) | (1 << (self::XMLROOT - 2113)) | (1 << (self::XMLSCHEMA - 2113)) | (1 << (self::XMLSERIALIZE - 2113)) | (1 << (self::XMLTABLE - 2113)) | (1 << (self::XMLTRANSFORMBLOB - 2113)) | (1 << (self::XMLTRANSFORM - 2113)) | (1 << (self::XMLTYPE - 2113)) | (1 << (self::XML - 2113)) | (1 << (self::XPATHTABLE - 2113)) | (1 << (self::XS_SYS_CONTEXT - 2113)) | (1 << (self::XS - 2113)) | (1 << (self::YEARS - 2113)) | (1 << (self::YEAR - 2113)) | (1 << (self::YES - 2113)) | (1 << (self::YMINTERVAL_UNCONSTRAINED - 2113)) | (1 << (self::ZONEMAP - 2113)) | (1 << (self::ZONE - 2113)) | (1 << (self::PREDICTION - 2113)) | (1 << (self::PREDICTION_BOUNDS - 2113)) | (1 << (self::PREDICTION_COST - 2113)))) !== 0) || (((($_la - 2177)) & ~0x3f) === 0 && ((1 << ($_la - 2177)) & ((1 << (self::PREDICTION_DETAILS - 2177)) | (1 << (self::PREDICTION_PROBABILITY - 2177)) | (1 << (self::PREDICTION_SET - 2177)) | (1 << (self::CUME_DIST - 2177)) | (1 << (self::DENSE_RANK - 2177)) | (1 << (self::LISTAGG - 2177)) | (1 << (self::PERCENT_RANK - 2177)) | (1 << (self::PERCENTILE_CONT - 2177)) | (1 << (self::PERCENTILE_DISC - 2177)) | (1 << (self::RANK - 2177)) | (1 << (self::AVG - 2177)) | (1 << (self::CORR - 2177)) | (1 << (self::COVAR_ - 2177)) | (1 << (self::LAG - 2177)) | (1 << (self::LEAD - 2177)) | (1 << (self::MAX - 2177)) | (1 << (self::MEDIAN - 2177)) | (1 << (self::MIN - 2177)) | (1 << (self::NTILE - 2177)) | (1 << (self::NVL - 2177)) | (1 << (self::RATIO_TO_REPORT - 2177)) | (1 << (self::REGR_ - 2177)) | (1 << (self::ROUND - 2177)) | (1 << (self::ROW_NUMBER - 2177)) | (1 << (self::SUBSTR - 2177)) | (1 << (self::TO_CHAR - 2177)) | (1 << (self::TRIM - 2177)) | (1 << (self::SUM - 2177)) | (1 << (self::STDDEV - 2177)) | (1 << (self::VAR_ - 2177)) | (1 << (self::VARIANCE - 2177)) | (1 << (self::LEAST - 2177)) | (1 << (self::GREATEST - 2177)) | (1 << (self::TO_DATE - 2177)) | (1 << (self::PERIOD - 2177)) | (1 << (self::DELIMITED_ID - 2177)))) !== 0) || $_la === self::REGULAR_ID) {
                $this->setState(8429);
                $this->type_spec();
            }
            $this->setState(8434);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(8432);
                $this->match(self::NOT);
                $this->setState(8433);
                $this->match(self::NULL_);
            }
            $this->setState(8437);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT || $_la === self::ASSIGN_OP) {
                $this->setState(8436);
                $this->default_value_part();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function ref_cursor_type_def(): Context\Ref_cursor_type_defContext
    {
        $localContext = new Context\Ref_cursor_type_defContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 940, self::RULE_ref_cursor_type_def);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8439);
            $this->match(self::REF);
            $this->setState(8440);
            $this->match(self::CURSOR);
            $this->setState(8443);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::RETURN) {
                $this->setState(8441);
                $this->match(self::RETURN);
                $this->setState(8442);
                $this->type_spec();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function type_declaration(): Context\Type_declarationContext
    {
        $localContext = new Context\Type_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 942, self::RULE_type_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8445);
            $this->match(self::TYPE);
            $this->setState(8446);
            $this->identifier();
            $this->setState(8447);
            $this->match(self::IS);
            $this->setState(8452);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::TABLE:
                    $this->setState(8448);
                    $this->table_type_def();
                    break;

                case self::VARRAY:
                case self::VARYING:
                    $this->setState(8449);
                    $this->varray_type_def();
                    break;

                case self::RECORD:
                    $this->setState(8450);
                    $this->record_type_def();
                    break;

                case self::REF:
                    $this->setState(8451);
                    $this->ref_cursor_type_def();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(8454);
            $this->match(self::SEMICOLON);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function table_type_def(): Context\Table_type_defContext
    {
        $localContext = new Context\Table_type_defContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 944, self::RULE_table_type_def);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8456);
            $this->match(self::TABLE);
            $this->setState(8457);
            $this->match(self::OF);
            $this->setState(8458);
            $this->type_spec();
            $this->setState(8460);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INDEXED || $_la === self::INDEX) {
                $this->setState(8459);
                $this->table_indexed_by_part();
            }
            $this->setState(8464);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(8462);
                $this->match(self::NOT);
                $this->setState(8463);
                $this->match(self::NULL_);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function table_indexed_by_part(): Context\Table_indexed_by_partContext
    {
        $localContext = new Context\Table_indexed_by_partContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 946, self::RULE_table_indexed_by_part);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8468);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::INDEXED:
                    $this->setState(8466);
                    $localContext->idx1 = $this->match(self::INDEXED);
                    break;

                case self::INDEX:
                    $this->setState(8467);
                    $localContext->idx2 = $this->match(self::INDEX);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(8470);
            $this->match(self::BY);
            $this->setState(8471);
            $this->type_spec();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function varray_type_def(): Context\Varray_type_defContext
    {
        $localContext = new Context\Varray_type_defContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 948, self::RULE_varray_type_def);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8476);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::VARRAY:
                    $this->setState(8473);
                    $this->match(self::VARRAY);
                    break;

                case self::VARYING:
                    $this->setState(8474);
                    $this->match(self::VARYING);
                    $this->setState(8475);
                    $this->match(self::ARRAY);
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(8478);
            $this->match(self::LEFT_PAREN);
            $this->setState(8479);
            $this->expression();
            $this->setState(8480);
            $this->match(self::RIGHT_PAREN);
            $this->setState(8481);
            $this->match(self::OF);
            $this->setState(8482);
            $this->type_spec();
            $this->setState(8485);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1098, $this->ctx)) {
                case 1:
                    $this->setState(8483);
                    $this->match(self::NOT);
                    $this->setState(8484);
                    $this->match(self::NULL_);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function seq_of_statements(): Context\Seq_of_statementsContext
    {
        $localContext = new Context\Seq_of_statementsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 950, self::RULE_seq_of_statements);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8491);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(8491);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 1099, $this->ctx)) {
                            case 1:
                                $this->setState(8487);
                                $this->statement();
                                $this->setState(8488);

                                $_la = $this->input->LA(1);

                                if (!($_la === self::EOF || $_la === self::SEMICOLON)) {
                                    $this->errorHandler->recoverInline($this);
                                } else {
                                    if ($this->input->LA(1) === Token::EOF) {
                                        $this->matchedEOF = true;
                                    }

                                    $this->errorHandler->reportMatch($this);
                                    $this->consume();
                                }
                                break;

                            case 2:
                                $this->setState(8490);
                                $this->label_declaration();
                                break;
                        }
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(8493);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 1100, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function label_declaration(): Context\Label_declarationContext
    {
        $localContext = new Context\Label_declarationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 952, self::RULE_label_declaration);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8495);
            $localContext->ltp1 = $this->match(self::LESS_THAN_OP);
            $this->setState(8496);
            $this->match(self::LESS_THAN_OP);
            $this->setState(8497);
            $this->label_name();
            $this->setState(8498);
            $this->match(self::GREATER_THAN_OP);
            $this->setState(8499);
            $this->match(self::GREATER_THAN_OP);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function statement(): Context\StatementContext
    {
        $localContext = new Context\StatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 954, self::RULE_statement);

        try {
            $this->setState(8518);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 1101, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(8501);
                    $this->body();
                    break;

                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(8502);
                    $this->block();
                    break;

                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(8503);
                    $this->assignment_statement();
                    break;

                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(8504);
                    $this->continue_statement();
                    break;

                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(8505);
                    $this->exit_statement();
                    break;

                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(8506);
                    $this->goto_statement();
                    break;

                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(8507);
                    $this->if_statement();
                    break;

                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(8508);
                    $this->loop_statement();
                    break;

                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(8509);
                    $this->forall_statement();
                    break;

                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(8510);
                    $this->null_statement();
                    break;

                case 11:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(8511);
                    $this->raise_statement();
                    break;

                case 12:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(8512);
                    $this->return_statement();
                    break;

                case 13:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(8513);
                    $this->case_statement();
                    break;

                case 14:
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(8514);
                    $this->sql_statement();
                    break;

                case 15:
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(8515);
                    $this->function_call();
                    break;

                case 16:
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(8516);
                    $this->pipe_row_statement();
                    break;

                case 17:
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(8517);
                    $this->procedure_call();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function swallow_to_semi(): Context\Swallow_to_semiContext
    {
        $localContext = new Context\Swallow_to_semiContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 956, self::RULE_swallow_to_semi);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8521);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(8520);

                $_la = $this->input->LA(1);

                if ($_la <= 0 || ($_la === self::SEMICOLON)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
                $this->setState(8523);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ABORT) | (1 << self::ABS) | (1 << self::ACCESS) | (1 << self::ACCESSED) | (1 << self::ACCOUNT) | (1 << self::ACL) | (1 << self::ACOS) | (1 << self::ACTION) | (1 << self::ACTIONS) | (1 << self::ACTIVATE) | (1 << self::ACTIVE) | (1 << self::ACTIVE_COMPONENT) | (1 << self::ACTIVE_DATA) | (1 << self::ACTIVE_FUNCTION) | (1 << self::ACTIVE_TAG) | (1 << self::ACTIVITY) | (1 << self::ADAPTIVE_PLAN) | (1 << self::ADD) | (1 << self::ADD_COLUMN) | (1 << self::ADD_GROUP) | (1 << self::ADD_MONTHS) | (1 << self::ADJ_DATE) | (1 << self::ADMIN) | (1 << self::ADMINISTER) | (1 << self::ADMINISTRATOR) | (1 << self::ADVANCED) | (1 << self::ADVISE) | (1 << self::ADVISOR) | (1 << self::AFD_DISKSTRING) | (1 << self::AFTER) | (1 << self::AGENT) | (1 << self::AGGREGATE) | (1 << self::A_LETTER) | (1 << self::ALIAS) | (1 << self::ALL) | (1 << self::ALLOCATE) | (1 << self::ALLOW) | (1 << self::ALL_ROWS) | (1 << self::ALTER) | (1 << self::ALWAYS) | (1 << self::ANALYZE) | (1 << self::ANCILLARY) | (1 << self:: AND) | (1 << self::AND_EQUAL) | (1 << self::ANOMALY) | (1 << self::ANSI_REARCH) | (1 << self::ANTIJOIN) | (1 << self::ANY) | (1 << self::ANYSCHEMA) | (1 << self::APPEND) | (1 << self::APPENDCHILDXML) | (1 << self::APPEND_VALUES) | (1 << self::APPLICATION) | (1 << self::APPLY) | (1 << self::APPROX_COUNT_DISTINCT) | (1 << self::ARCHIVAL) | (1 << self::ARCHIVE) | (1 << self::ARCHIVED) | (1 << self::ARCHIVELOG) | (1 << self::ARRAY) | (1 << self::AS) | (1 << self::ASC) | (1 << self::ASCII))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::ASCIISTR - 64)) | (1 << (self::ASIN - 64)) | (1 << (self::ASIS - 64)) | (1 << (self::ASSEMBLY - 64)) | (1 << (self::ASSIGN - 64)) | (1 << (self::ASSOCIATE - 64)) | (1 << (self::ASYNC - 64)) | (1 << (self::ASYNCHRONOUS - 64)) | (1 << (self::ATAN2 - 64)) | (1 << (self::ATAN - 64)) | (1 << (self::AT - 64)) | (1 << (self::ATTRIBUTE - 64)) | (1 << (self::ATTRIBUTES - 64)) | (1 << (self::AUDIT - 64)) | (1 << (self::AUTHENTICATED - 64)) | (1 << (self::AUTHENTICATION - 64)) | (1 << (self::AUTHID - 64)) | (1 << (self::AUTHORIZATION - 64)) | (1 << (self::AUTOALLOCATE - 64)) | (1 << (self::AUTO - 64)) | (1 << (self::AUTOBACKUP - 64)) | (1 << (self::AUTOEXTEND - 64)) | (1 << (self::AUTO_LOGIN - 64)) | (1 << (self::AUTOMATIC - 64)) | (1 << (self::AUTONOMOUS_TRANSACTION - 64)) | (1 << (self::AUTO_REOPTIMIZE - 64)) | (1 << (self::AVAILABILITY - 64)) | (1 << (self::AVRO - 64)) | (1 << (self::BACKGROUND - 64)) | (1 << (self::BACKUP - 64)) | (1 << (self::BACKUPSET - 64)) | (1 << (self::BASIC - 64)) | (1 << (self::BASICFILE - 64)) | (1 << (self::BATCH - 64)) | (1 << (self::BATCHSIZE - 64)) | (1 << (self::BATCH_TABLE_ACCESS_BY_ROWID - 64)) | (1 << (self::BECOME - 64)) | (1 << (self::BEFORE - 64)) | (1 << (self::BEGIN - 64)) | (1 << (self::BEGINNING - 64)) | (1 << (self::BEGIN_OUTLINE_DATA - 64)) | (1 << (self::BEHALF - 64)) | (1 << (self::BEQUEATH - 64)) | (1 << (self::BETWEEN - 64)) | (1 << (self::BFILE - 64)) | (1 << (self::BFILENAME - 64)) | (1 << (self::BIGFILE - 64)) | (1 << (self::BINARY - 64)) | (1 << (self::BINARY_DOUBLE - 64)) | (1 << (self::BINARY_DOUBLE_INFINITY - 64)) | (1 << (self::BINARY_DOUBLE_NAN - 64)) | (1 << (self::BINARY_FLOAT - 64)) | (1 << (self::BINARY_FLOAT_INFINITY - 64)) | (1 << (self::BINARY_FLOAT_NAN - 64)) | (1 << (self::BINARY_INTEGER - 64)) | (1 << (self::BIND_AWARE - 64)) | (1 << (self::BINDING - 64)) | (1 << (self::BIN_TO_NUM - 64)) | (1 << (self::BITAND - 64)) | (1 << (self::BITMAP_AND - 64)) | (1 << (self::BITMAP - 64)) | (1 << (self::BITMAPS - 64)) | (1 << (self::BITMAP_TREE - 64)) | (1 << (self::BITS - 64)))) !== 0) || (((($_la - 128)) & ~0x3f) === 0 && ((1 << ($_la - 128)) & ((1 << (self::BLOB - 128)) | (1 << (self::BLOCK - 128)) | (1 << (self::BLOCK_RANGE - 128)) | (1 << (self::BLOCKS - 128)) | (1 << (self::BLOCKSIZE - 128)) | (1 << (self::BODY - 128)) | (1 << (self::BOOLEAN - 128)) | (1 << (self::BOTH - 128)) | (1 << (self::BOUND - 128)) | (1 << (self::BRANCH - 128)) | (1 << (self::BREADTH - 128)) | (1 << (self::BROADCAST - 128)) | (1 << (self::BSON - 128)) | (1 << (self::BUFFER - 128)) | (1 << (self::BUFFER_CACHE - 128)) | (1 << (self::BUFFER_POOL - 128)) | (1 << (self::BUILD - 128)) | (1 << (self::BULK - 128)) | (1 << (self::BY - 128)) | (1 << (self::BYPASS_RECURSIVE_CHECK - 128)) | (1 << (self::BYPASS_UJVC - 128)) | (1 << (self::BYTE - 128)) | (1 << (self::CACHE - 128)) | (1 << (self::CACHE_CB - 128)) | (1 << (self::CACHE_INSTANCES - 128)) | (1 << (self::CACHE_TEMP_TABLE - 128)) | (1 << (self::CACHING - 128)) | (1 << (self::CALCULATED - 128)) | (1 << (self::CALLBACK - 128)) | (1 << (self::CALL - 128)) | (1 << (self::CANCEL - 128)) | (1 << (self::CANONICAL - 128)) | (1 << (self::CAPACITY - 128)) | (1 << (self::CARDINALITY - 128)) | (1 << (self::CASCADE - 128)) | (1 << (self::CASE - 128)) | (1 << (self::CAST - 128)) | (1 << (self::CATEGORY - 128)) | (1 << (self::CDBDEFAULT - 128)) | (1 << (self::CEIL - 128)) | (1 << (self::CELL_FLASH_CACHE - 128)) | (1 << (self::CERTIFICATE - 128)) | (1 << (self::CFILE - 128)) | (1 << (self::CHAINED - 128)) | (1 << (self::CHANGE - 128)) | (1 << (self::CHANGETRACKING - 128)) | (1 << (self::CHANGE_DUPKEY_ERROR_INDEX - 128)) | (1 << (self::CHARACTER - 128)) | (1 << (self::CHAR - 128)) | (1 << (self::CHAR_CS - 128)) | (1 << (self::CHARTOROWID - 128)) | (1 << (self::CHECK_ACL_REWRITE - 128)) | (1 << (self::CHECK - 128)) | (1 << (self::CHECKPOINT - 128)) | (1 << (self::CHILD - 128)) | (1 << (self::CHOOSE - 128)) | (1 << (self::CHR - 128)) | (1 << (self::CHUNK - 128)) | (1 << (self::CLASS - 128)) | (1 << (self::CLASSIFIER - 128)) | (1 << (self::CLEANUP - 128)) | (1 << (self::CLEAR - 128)) | (1 << (self::C_LETTER - 128)) | (1 << (self::CLIENT - 128)))) !== 0) || (((($_la - 192)) & ~0x3f) === 0 && ((1 << ($_la - 192)) & ((1 << (self::CLOB - 192)) | (1 << (self::CLONE - 192)) | (1 << (self::CLOSE_CACHED_OPEN_CURSORS - 192)) | (1 << (self::CLOSE - 192)) | (1 << (self::CLUSTER_BY_ROWID - 192)) | (1 << (self::CLUSTER - 192)) | (1 << (self::CLUSTER_DETAILS - 192)) | (1 << (self::CLUSTER_DISTANCE - 192)) | (1 << (self::CLUSTER_ID - 192)) | (1 << (self::CLUSTERING - 192)) | (1 << (self::CLUSTERING_FACTOR - 192)) | (1 << (self::CLUSTER_PROBABILITY - 192)) | (1 << (self::CLUSTER_SET - 192)) | (1 << (self::COALESCE - 192)) | (1 << (self::COALESCE_SQ - 192)) | (1 << (self::COARSE - 192)) | (1 << (self::CO_AUTH_IND - 192)) | (1 << (self::COLD - 192)) | (1 << (self::COLLECT - 192)) | (1 << (self::COLUMNAR - 192)) | (1 << (self::COLUMN_AUTH_INDICATOR - 192)) | (1 << (self::COLUMN - 192)) | (1 << (self::COLUMNS - 192)) | (1 << (self::COLUMN_STATS - 192)) | (1 << (self::COLUMN_VALUE - 192)) | (1 << (self::COMMENT - 192)) | (1 << (self::COMMIT - 192)) | (1 << (self::COMMITTED - 192)) | (1 << (self::COMMON_DATA - 192)) | (1 << (self::COMPACT - 192)) | (1 << (self::COMPATIBILITY - 192)) | (1 << (self::COMPILE - 192)) | (1 << (self::COMPLETE - 192)) | (1 << (self::COMPLIANCE - 192)) | (1 << (self::COMPONENT - 192)) | (1 << (self::COMPONENTS - 192)) | (1 << (self::COMPOSE - 192)) | (1 << (self::COMPOSITE - 192)) | (1 << (self::COMPOSITE_LIMIT - 192)) | (1 << (self::COMPOUND - 192)) | (1 << (self::COMPRESS - 192)) | (1 << (self::COMPUTE - 192)) | (1 << (self::CONCAT - 192)) | (1 << (self::CON_DBID_TO_ID - 192)) | (1 << (self::CONDITIONAL - 192)) | (1 << (self::CONDITION - 192)) | (1 << (self::CONFIRM - 192)) | (1 << (self::CONFORMING - 192)) | (1 << (self::CON_GUID_TO_ID - 192)) | (1 << (self::CON_ID - 192)) | (1 << (self::CON_NAME_TO_ID - 192)) | (1 << (self::CONNECT_BY_CB_WHR_ONLY - 192)) | (1 << (self::CONNECT_BY_COMBINE_SW - 192)) | (1 << (self::CONNECT_BY_COST_BASED - 192)) | (1 << (self::CONNECT_BY_ELIM_DUPS - 192)) | (1 << (self::CONNECT_BY_FILTERING - 192)) | (1 << (self::CONNECT_BY_ISCYCLE - 192)) | (1 << (self::CONNECT_BY_ISLEAF - 192)) | (1 << (self::CONNECT_BY_ROOT - 192)) | (1 << (self::CONNECT - 192)) | (1 << (self::CONNECT_TIME - 192)) | (1 << (self::CONSIDER - 192)) | (1 << (self::CONSISTENT - 192)) | (1 << (self::CONSTANT - 192)))) !== 0) || (((($_la - 256)) & ~0x3f) === 0 && ((1 << ($_la - 256)) & ((1 << (self::CONST - 256)) | (1 << (self::CONSTRAINT - 256)) | (1 << (self::CONSTRAINTS - 256)) | (1 << (self::CONSTRUCTOR - 256)) | (1 << (self::CONTAINER - 256)) | (1 << (self::CONTAINER_DATA - 256)) | (1 << (self::CONTAINERS - 256)) | (1 << (self::CONTENT - 256)) | (1 << (self::CONTENTS - 256)) | (1 << (self::CONTEXT - 256)) | (1 << (self::CONTINUE - 256)) | (1 << (self::CONTROLFILE - 256)) | (1 << (self::CON_UID_TO_ID - 256)) | (1 << (self::CONVERT - 256)) | (1 << (self::COOKIE - 256)) | (1 << (self::COPY - 256)) | (1 << (self::CORR_K - 256)) | (1 << (self::CORR_S - 256)) | (1 << (self::CORRUPTION - 256)) | (1 << (self::CORRUPT_XID_ALL - 256)) | (1 << (self::CORRUPT_XID - 256)) | (1 << (self::COS - 256)) | (1 << (self::COSH - 256)) | (1 << (self::COST - 256)) | (1 << (self::COST_XML_QUERY_REWRITE - 256)) | (1 << (self::COUNT - 256)) | (1 << (self::COVAR_POP - 256)) | (1 << (self::COVAR_SAMP - 256)) | (1 << (self::CPU_COSTING - 256)) | (1 << (self::CPU_PER_CALL - 256)) | (1 << (self::CPU_PER_SESSION - 256)) | (1 << (self::CRASH - 256)) | (1 << (self::CREATE - 256)) | (1 << (self::CREATE_FILE_DEST - 256)) | (1 << (self::CREATE_STORED_OUTLINES - 256)) | (1 << (self::CREATION - 256)) | (1 << (self::CREDENTIAL - 256)) | (1 << (self::CRITICAL - 256)) | (1 << (self::CROSS - 256)) | (1 << (self::CROSSEDITION - 256)) | (1 << (self::CSCONVERT - 256)) | (1 << (self::CUBE_AJ - 256)) | (1 << (self::CUBE - 256)) | (1 << (self::CUBE_GB - 256)) | (1 << (self::CUBE_SJ - 256)) | (1 << (self::CUME_DISTM - 256)) | (1 << (self::CURRENT - 256)) | (1 << (self::CURRENT_DATE - 256)) | (1 << (self::CURRENT_SCHEMA - 256)) | (1 << (self::CURRENT_TIME - 256)) | (1 << (self::CURRENT_TIMESTAMP - 256)) | (1 << (self::CURRENT_USER - 256)) | (1 << (self::CURRENTV - 256)) | (1 << (self::CURSOR - 256)) | (1 << (self::CURSOR_SHARING_EXACT - 256)) | (1 << (self::CURSOR_SPECIFIC_SEGMENT - 256)) | (1 << (self::CUSTOMDATUM - 256)) | (1 << (self::CV - 256)) | (1 << (self::CYCLE - 256)) | (1 << (self::DANGLING - 256)) | (1 << (self::DATABASE - 256)) | (1 << (self::DATA - 256)) | (1 << (self::DATAFILE - 256)) | (1 << (self::DATAFILES - 256)))) !== 0) || (((($_la - 320)) & ~0x3f) === 0 && ((1 << ($_la - 320)) & ((1 << (self::DATAGUARDCONFIG - 320)) | (1 << (self::DATAMOVEMENT - 320)) | (1 << (self::DATAOBJNO - 320)) | (1 << (self::DATAOBJ_TO_MAT_PARTITION - 320)) | (1 << (self::DATAOBJ_TO_PARTITION - 320)) | (1 << (self::DATAPUMP - 320)) | (1 << (self::DATA_SECURITY_REWRITE_LIMIT - 320)) | (1 << (self::DATE - 320)) | (1 << (self::DATE_MODE - 320)) | (1 << (self::DAY - 320)) | (1 << (self::DAYS - 320)) | (1 << (self::DBA - 320)) | (1 << (self::DBA_RECYCLEBIN - 320)) | (1 << (self::DBMS_STATS - 320)) | (1 << (self::DB_ROLE_CHANGE - 320)) | (1 << (self::DBTIMEZONE - 320)) | (1 << (self::DB_UNIQUE_NAME - 320)) | (1 << (self::DB_VERSION - 320)) | (1 << (self::DDL - 320)) | (1 << (self::DEALLOCATE - 320)) | (1 << (self::DEBUG - 320)) | (1 << (self::DEBUGGER - 320)) | (1 << (self::DEC - 320)) | (1 << (self::DECIMAL - 320)) | (1 << (self::DECLARE - 320)) | (1 << (self::DECOMPOSE - 320)) | (1 << (self::DECORRELATE - 320)) | (1 << (self::DECR - 320)) | (1 << (self::DECREMENT - 320)) | (1 << (self::DECRYPT - 320)) | (1 << (self::DEDUPLICATE - 320)) | (1 << (self::DEFAULT - 320)) | (1 << (self::DEFAULTS - 320)) | (1 << (self::DEFERRABLE - 320)) | (1 << (self::DEFERRED - 320)) | (1 << (self::DEFINED - 320)) | (1 << (self::DEFINE - 320)) | (1 << (self::DEFINER - 320)) | (1 << (self::DEGREE - 320)) | (1 << (self::DELAY - 320)) | (1 << (self::DELEGATE - 320)) | (1 << (self::DELETE_ALL - 320)) | (1 << (self::DELETE - 320)) | (1 << (self::DELETEXML - 320)) | (1 << (self::DEMAND - 320)) | (1 << (self::DENSE_RANKM - 320)) | (1 << (self::DEPENDENT - 320)) | (1 << (self::DEPTH - 320)) | (1 << (self::DEQUEUE - 320)) | (1 << (self::DEREF - 320)) | (1 << (self::DEREF_NO_REWRITE - 320)) | (1 << (self::DESC - 320)) | (1 << (self::DESTROY - 320)) | (1 << (self::DETACHED - 320)) | (1 << (self::DETERMINES - 320)) | (1 << (self::DETERMINISTIC - 320)) | (1 << (self::DICTIONARY - 320)) | (1 << (self::DIMENSION - 320)) | (1 << (self::DIMENSIONS - 320)) | (1 << (self::DIRECT_LOAD - 320)) | (1 << (self::DIRECTORY - 320)) | (1 << (self::DIRECT_PATH - 320)) | (1 << (self::DISABLE_ALL - 320)) | (1 << (self::DISABLE - 320)))) !== 0) || (((($_la - 384)) & ~0x3f) === 0 && ((1 << ($_la - 384)) & ((1 << (self::DISABLE_PARALLEL_DML - 384)) | (1 << (self::DISABLE_PRESET - 384)) | (1 << (self::DISABLE_RPKE - 384)) | (1 << (self::DISALLOW - 384)) | (1 << (self::DISASSOCIATE - 384)) | (1 << (self::DISCARD - 384)) | (1 << (self::DISCONNECT - 384)) | (1 << (self::DISK - 384)) | (1 << (self::DISKGROUP - 384)) | (1 << (self::DISKGROUP_PLUS - 384)) | (1 << (self::DISKS - 384)) | (1 << (self::DISMOUNT - 384)) | (1 << (self::DISTINCT - 384)) | (1 << (self::DISTINGUISHED - 384)) | (1 << (self::DISTRIBUTED - 384)) | (1 << (self::DISTRIBUTE - 384)) | (1 << (self::DML - 384)) | (1 << (self::DML_UPDATE - 384)) | (1 << (self::DOCFIDELITY - 384)) | (1 << (self::DOCUMENT - 384)) | (1 << (self::DOMAIN_INDEX_FILTER - 384)) | (1 << (self::DOMAIN_INDEX_NO_SORT - 384)) | (1 << (self::DOMAIN_INDEX_SORT - 384)) | (1 << (self::DOUBLE - 384)) | (1 << (self::DOWNGRADE - 384)) | (1 << (self::DRIVING_SITE - 384)) | (1 << (self::DROP_COLUMN - 384)) | (1 << (self::DROP - 384)) | (1 << (self::DROP_GROUP - 384)) | (1 << (self::DSINTERVAL_UNCONSTRAINED - 384)) | (1 << (self::DST_UPGRADE_INSERT_CONV - 384)) | (1 << (self::DUMP - 384)) | (1 << (self::DUMPSET - 384)) | (1 << (self::DUPLICATE - 384)) | (1 << (self::DV - 384)) | (1 << (self::DYNAMIC - 384)) | (1 << (self::DYNAMIC_SAMPLING - 384)) | (1 << (self::DYNAMIC_SAMPLING_EST_CDN - 384)) | (1 << (self::EACH - 384)) | (1 << (self::EDITIONABLE - 384)) | (1 << (self::EDITION - 384)) | (1 << (self::EDITIONING - 384)) | (1 << (self::EDITIONS - 384)) | (1 << (self::ELEMENT - 384)) | (1 << (self::ELIM_GROUPBY - 384)) | (1 << (self::ELIMINATE_JOIN - 384)) | (1 << (self::ELIMINATE_OBY - 384)) | (1 << (self::ELIMINATE_OUTER_JOIN - 384)) | (1 << (self::ELSE - 384)) | (1 << (self::ELSIF - 384)) | (1 << (self::EM - 384)) | (1 << (self::EMPTY_BLOB - 384)) | (1 << (self::EMPTY_CLOB - 384)) | (1 << (self::EMPTY - 384)) | (1 << (self::ENABLE_ALL - 384)) | (1 << (self::ENABLE - 384)) | (1 << (self::ENABLE_PARALLEL_DML - 384)) | (1 << (self::ENABLE_PRESET - 384)) | (1 << (self::ENCODING - 384)) | (1 << (self::ENCRYPT - 384)) | (1 << (self::ENCRYPTION - 384)) | (1 << (self::END - 384)) | (1 << (self::END_OUTLINE_DATA - 384)) | (1 << (self::ENFORCED - 384)))) !== 0) || (((($_la - 448)) & ~0x3f) === 0 && ((1 << ($_la - 448)) & ((1 << (self::ENFORCE - 448)) | (1 << (self::ENQUEUE - 448)) | (1 << (self::ENTERPRISE - 448)) | (1 << (self::ENTITYESCAPING - 448)) | (1 << (self::ENTRY - 448)) | (1 << (self::EQUIPART - 448)) | (1 << (self::ERR - 448)) | (1 << (self::ERROR_ARGUMENT - 448)) | (1 << (self::ERROR - 448)) | (1 << (self::ERROR_ON_OVERLAP_TIME - 448)) | (1 << (self::ERRORS - 448)) | (1 << (self::ESCAPE - 448)) | (1 << (self::ESTIMATE - 448)) | (1 << (self::EVAL - 448)) | (1 << (self::EVALNAME - 448)) | (1 << (self::EVALUATE - 448)) | (1 << (self::EVALUATION - 448)) | (1 << (self::EVENTS - 448)) | (1 << (self::EVERY - 448)) | (1 << (self::EXCEPT - 448)) | (1 << (self::EXCEPTION - 448)) | (1 << (self::EXCEPTION_INIT - 448)) | (1 << (self::EXCEPTIONS - 448)) | (1 << (self::EXCHANGE - 448)) | (1 << (self::EXCLUDE - 448)) | (1 << (self::EXCLUDING - 448)) | (1 << (self::EXCLUSIVE - 448)) | (1 << (self::EXECUTE - 448)) | (1 << (self::EXEMPT - 448)) | (1 << (self::EXISTING - 448)) | (1 << (self::EXISTS - 448)) | (1 << (self::EXISTSNODE - 448)) | (1 << (self::EXIT - 448)) | (1 << (self::EXPAND_GSET_TO_UNION - 448)) | (1 << (self::EXPAND_TABLE - 448)) | (1 << (self::EXP - 448)) | (1 << (self::EXPIRE - 448)) | (1 << (self::EXPLAIN - 448)) | (1 << (self::EXPLOSION - 448)) | (1 << (self::EXPORT - 448)) | (1 << (self::EXPR_CORR_CHECK - 448)) | (1 << (self::EXPRESS - 448)) | (1 << (self::EXTENDS - 448)) | (1 << (self::EXTENT - 448)) | (1 << (self::EXTENTS - 448)) | (1 << (self::EXTERNAL - 448)) | (1 << (self::EXTERNALLY - 448)) | (1 << (self::EXTRACTCLOBXML - 448)) | (1 << (self::EXTRACT - 448)) | (1 << (self::EXTRACTVALUE - 448)) | (1 << (self::EXTRA - 448)) | (1 << (self::FACILITY - 448)) | (1 << (self::FACT - 448)) | (1 << (self::FACTOR - 448)) | (1 << (self::FACTORIZE_JOIN - 448)) | (1 << (self::FAILED - 448)) | (1 << (self::FAILED_LOGIN_ATTEMPTS - 448)) | (1 << (self::FAILGROUP - 448)) | (1 << (self::FAILOVER - 448)) | (1 << (self::FAILURE - 448)) | (1 << (self::FALSE - 448)) | (1 << (self::FAMILY - 448)) | (1 << (self::FAR - 448)) | (1 << (self::FAST - 448)))) !== 0) || (((($_la - 512)) & ~0x3f) === 0 && ((1 << ($_la - 512)) & ((1 << (self::FASTSTART - 512)) | (1 << (self::FBTSCAN - 512)) | (1 << (self::FEATURE_DETAILS - 512)) | (1 << (self::FEATURE_ID - 512)) | (1 << (self::FEATURE_SET - 512)) | (1 << (self::FEATURE_VALUE - 512)) | (1 << (self::FETCH - 512)) | (1 << (self::FILE - 512)) | (1 << (self::FILE_NAME_CONVERT - 512)) | (1 << (self::FILESYSTEM_LIKE_LOGGING - 512)) | (1 << (self::FILTER - 512)) | (1 << (self::FINAL - 512)) | (1 << (self::FINE - 512)) | (1 << (self::FINISH - 512)) | (1 << (self::FIRST - 512)) | (1 << (self::FIRSTM - 512)) | (1 << (self::FIRST_ROWS - 512)) | (1 << (self::FIRST_VALUE - 512)) | (1 << (self::FIXED_VIEW_DATA - 512)) | (1 << (self::FLAGGER - 512)) | (1 << (self::FLASHBACK - 512)) | (1 << (self::FLASH_CACHE - 512)) | (1 << (self::FLOAT - 512)) | (1 << (self::FLOB - 512)) | (1 << (self::FLOOR - 512)) | (1 << (self::FLUSH - 512)) | (1 << (self::FOLDER - 512)) | (1 << (self::FOLLOWING - 512)) | (1 << (self::FOLLOWS - 512)) | (1 << (self::FORALL - 512)) | (1 << (self::FORCE - 512)) | (1 << (self::FORCE_XML_QUERY_REWRITE - 512)) | (1 << (self::FOREIGN - 512)) | (1 << (self::FOREVER - 512)) | (1 << (self::FOR - 512)) | (1 << (self::FORMAT - 512)) | (1 << (self::FORWARD - 512)) | (1 << (self::FRAGMENT_NUMBER - 512)) | (1 << (self::FREELIST - 512)) | (1 << (self::FREELISTS - 512)) | (1 << (self::FREEPOOLS - 512)) | (1 << (self::FRESH - 512)) | (1 << (self::FROM - 512)) | (1 << (self::FROM_TZ - 512)) | (1 << (self::FULL - 512)) | (1 << (self::FULL_OUTER_JOIN_TO_OUTER - 512)) | (1 << (self::FUNCTION - 512)) | (1 << (self::FUNCTIONS - 512)) | (1 << (self::GATHER_OPTIMIZER_STATISTICS - 512)) | (1 << (self::GATHER_PLAN_STATISTICS - 512)) | (1 << (self::GBY_CONC_ROLLUP - 512)) | (1 << (self::GBY_PUSHDOWN - 512)) | (1 << (self::GENERATED - 512)) | (1 << (self::GET - 512)) | (1 << (self::GLOBAL - 512)) | (1 << (self::GLOBALLY - 512)) | (1 << (self::GLOBAL_NAME - 512)) | (1 << (self::GLOBAL_TOPIC_ENABLED - 512)) | (1 << (self::GOTO - 512)) | (1 << (self::GRANT - 512)) | (1 << (self::GROUP_BY - 512)) | (1 << (self::GROUP - 512)) | (1 << (self::GROUP_ID - 512)) | (1 << (self::GROUPING - 512)))) !== 0) || (((($_la - 576)) & ~0x3f) === 0 && ((1 << ($_la - 576)) & ((1 << (self::GROUPING_ID - 576)) | (1 << (self::GROUPS - 576)) | (1 << (self::GUARANTEED - 576)) | (1 << (self::GUARANTEE - 576)) | (1 << (self::GUARD - 576)) | (1 << (self::HASH_AJ - 576)) | (1 << (self::HASH - 576)) | (1 << (self::HASHKEYS - 576)) | (1 << (self::HASH_SJ - 576)) | (1 << (self::HAVING - 576)) | (1 << (self::HEADER - 576)) | (1 << (self::HEAP - 576)) | (1 << (self::HELP - 576)) | (1 << (self::HEXTORAW - 576)) | (1 << (self::HEXTOREF - 576)) | (1 << (self::HIDDEN_KEYWORD - 576)) | (1 << (self::HIDE - 576)) | (1 << (self::HIERARCHY - 576)) | (1 << (self::HIGH - 576)) | (1 << (self::HINTSET_BEGIN - 576)) | (1 << (self::HINTSET_END - 576)) | (1 << (self::HOT - 576)) | (1 << (self::HOUR - 576)) | (1 << (self::HWM_BROKERED - 576)) | (1 << (self::HYBRID - 576)) | (1 << (self::IDENTIFIED - 576)) | (1 << (self::IDENTIFIER - 576)) | (1 << (self::IDENTITY - 576)) | (1 << (self::IDGENERATORS - 576)) | (1 << (self::ID - 576)) | (1 << (self::IDLE_TIME - 576)) | (1 << (self::IF - 576)) | (1 << (self::IGNORE - 576)) | (1 << (self::IGNORE_OPTIM_EMBEDDED_HINTS - 576)) | (1 << (self::IGNORE_ROW_ON_DUPKEY_INDEX - 576)) | (1 << (self::IGNORE_WHERE_CLAUSE - 576)) | (1 << (self::ILM - 576)) | (1 << (self::IMMEDIATE - 576)) | (1 << (self::IMPACT - 576)) | (1 << (self::IMPORT - 576)) | (1 << (self::INACTIVE - 576)) | (1 << (self::INCLUDE - 576)) | (1 << (self::INCLUDE_VERSION - 576)) | (1 << (self::INCLUDING - 576)) | (1 << (self::INCREMENTAL - 576)) | (1 << (self::INCREMENT - 576)) | (1 << (self::INCR - 576)) | (1 << (self::INDENT - 576)) | (1 << (self::INDEX_ASC - 576)) | (1 << (self::INDEX_COMBINE - 576)) | (1 << (self::INDEX_DESC - 576)) | (1 << (self::INDEXED - 576)) | (1 << (self::INDEXES - 576)) | (1 << (self::INDEX_FFS - 576)) | (1 << (self::INDEX_FILTER - 576)) | (1 << (self::INDEX - 576)) | (1 << (self::INDEXING - 576)) | (1 << (self::INDEX_JOIN - 576)) | (1 << (self::INDEX_ROWS - 576)) | (1 << (self::INDEX_RRS - 576)) | (1 << (self::INDEX_RS_ASC - 576)) | (1 << (self::INDEX_RS_DESC - 576)) | (1 << (self::INDEX_RS - 576)) | (1 << (self::INDEX_SCAN - 576)))) !== 0) || (((($_la - 640)) & ~0x3f) === 0 && ((1 << ($_la - 640)) & ((1 << (self::INDEX_SKIP_SCAN - 640)) | (1 << (self::INDEX_SS_ASC - 640)) | (1 << (self::INDEX_SS_DESC - 640)) | (1 << (self::INDEX_SS - 640)) | (1 << (self::INDEX_STATS - 640)) | (1 << (self::INDEXTYPE - 640)) | (1 << (self::INDEXTYPES - 640)) | (1 << (self::INDICATOR - 640)) | (1 << (self::INDICES - 640)) | (1 << (self::INFINITE - 640)) | (1 << (self::INFORMATIONAL - 640)) | (1 << (self::INHERIT - 640)) | (1 << (self::IN - 640)) | (1 << (self::INITCAP - 640)) | (1 << (self::INITIAL - 640)) | (1 << (self::INITIALIZED - 640)) | (1 << (self::INITIALLY - 640)) | (1 << (self::INITRANS - 640)) | (1 << (self::INLINE - 640)) | (1 << (self::INLINE_XMLTYPE_NT - 640)) | (1 << (self::INMEMORY - 640)) | (1 << (self::IN_MEMORY_METADATA - 640)) | (1 << (self::INMEMORY_PRUNING - 640)) | (1 << (self::INNER - 640)) | (1 << (self::INOUT - 640)) | (1 << (self::INPLACE - 640)) | (1 << (self::INSERTCHILDXMLAFTER - 640)) | (1 << (self::INSERTCHILDXMLBEFORE - 640)) | (1 << (self::INSERTCHILDXML - 640)) | (1 << (self::INSERT - 640)) | (1 << (self::INSERTXMLAFTER - 640)) | (1 << (self::INSERTXMLBEFORE - 640)) | (1 << (self::INSTANCE - 640)) | (1 << (self::INSTANCES - 640)) | (1 << (self::INSTANTIABLE - 640)) | (1 << (self::INSTANTLY - 640)) | (1 << (self::INSTEAD - 640)) | (1 << (self::INSTR2 - 640)) | (1 << (self::INSTR4 - 640)) | (1 << (self::INSTRB - 640)) | (1 << (self::INSTRC - 640)) | (1 << (self::INSTR - 640)) | (1 << (self::INTEGER - 640)) | (1 << (self::INTERLEAVED - 640)) | (1 << (self::INTERMEDIATE - 640)) | (1 << (self::INTERNAL_CONVERT - 640)) | (1 << (self::INTERNAL_USE - 640)) | (1 << (self::INTERPRETED - 640)) | (1 << (self::INTERSECT - 640)) | (1 << (self::INTERVAL - 640)) | (1 << (self::INT - 640)) | (1 << (self::INTO - 640)) | (1 << (self::INVALIDATE - 640)) | (1 << (self::INVISIBLE - 640)) | (1 << (self::IN_XQUERY - 640)) | (1 << (self::IS - 640)) | (1 << (self::ISOLATION - 640)) | (1 << (self::ISOLATION_LEVEL - 640)) | (1 << (self::ITERATE - 640)) | (1 << (self::ITERATION_NUMBER - 640)) | (1 << (self::JAVA - 640)) | (1 << (self::JOB - 640)) | (1 << (self::JOIN - 640)) | (1 << (self::JSON_ARRAYAGG - 640)))) !== 0) || (((($_la - 704)) & ~0x3f) === 0 && ((1 << ($_la - 704)) & ((1 << (self::JSON_ARRAY - 704)) | (1 << (self::JSON_EQUAL - 704)) | (1 << (self::JSON_EXISTS2 - 704)) | (1 << (self::JSON_EXISTS - 704)) | (1 << (self::JSONGET - 704)) | (1 << (self::JSON - 704)) | (1 << (self::JSON_OBJECTAGG - 704)) | (1 << (self::JSON_OBJECT - 704)) | (1 << (self::JSONPARSE - 704)) | (1 << (self::JSON_QUERY - 704)) | (1 << (self::JSON_SERIALIZE - 704)) | (1 << (self::JSON_TABLE - 704)) | (1 << (self::JSON_TEXTCONTAINS2 - 704)) | (1 << (self::JSON_TEXTCONTAINS - 704)) | (1 << (self::JSON_VALUE - 704)) | (1 << (self::KEEP_DUPLICATES - 704)) | (1 << (self::KEEP - 704)) | (1 << (self::KERBEROS - 704)) | (1 << (self::KEY - 704)) | (1 << (self::KEY_LENGTH - 704)) | (1 << (self::KEYSIZE - 704)) | (1 << (self::KEYS - 704)) | (1 << (self::KEYSTORE - 704)) | (1 << (self::KILL - 704)) | (1 << (self::LABEL - 704)) | (1 << (self::LANGUAGE - 704)) | (1 << (self::LAST_DAY - 704)) | (1 << (self::LAST - 704)) | (1 << (self::LAST_VALUE - 704)) | (1 << (self::LATERAL - 704)) | (1 << (self::LAX - 704)) | (1 << (self::LAYER - 704)) | (1 << (self::LDAP_REGISTRATION_ENABLED - 704)) | (1 << (self::LDAP_REGISTRATION - 704)) | (1 << (self::LDAP_REG_SYNC_INTERVAL - 704)) | (1 << (self::LEADING - 704)) | (1 << (self::LEFT - 704)) | (1 << (self::LENGTH2 - 704)) | (1 << (self::LENGTH4 - 704)) | (1 << (self::LENGTHB - 704)) | (1 << (self::LENGTHC - 704)) | (1 << (self::LENGTH - 704)) | (1 << (self::LESS - 704)) | (1 << (self::LEVEL - 704)) | (1 << (self::LEVELS - 704)) | (1 << (self::LIBRARY - 704)) | (1 << (self::LIFECYCLE - 704)) | (1 << (self::LIFE - 704)) | (1 << (self::LIFETIME - 704)) | (1 << (self::LIKE2 - 704)) | (1 << (self::LIKE4 - 704)) | (1 << (self::LIKEC - 704)) | (1 << (self::LIKE_EXPAND - 704)) | (1 << (self::LIKE - 704)) | (1 << (self::LIMIT - 704)) | (1 << (self::LINEAR - 704)) | (1 << (self::LINK - 704)) | (1 << (self::LIST - 704)) | (1 << (self::LN - 704)) | (1 << (self::LNNVL - 704)) | (1 << (self::LOAD - 704)) | (1 << (self::LOB - 704)) | (1 << (self::LOBNVL - 704)) | (1 << (self::LOBS - 704)))) !== 0) || (((($_la - 768)) & ~0x3f) === 0 && ((1 << ($_la - 768)) & ((1 << (self::LOCAL_INDEXES - 768)) | (1 << (self::LOCAL - 768)) | (1 << (self::LOCALTIME - 768)) | (1 << (self::LOCALTIMESTAMP - 768)) | (1 << (self::LOCATION - 768)) | (1 << (self::LOCATOR - 768)) | (1 << (self::LOCKED - 768)) | (1 << (self::LOCKING - 768)) | (1 << (self::LOCK - 768)) | (1 << (self::LOGFILE - 768)) | (1 << (self::LOGFILES - 768)) | (1 << (self::LOGGING - 768)) | (1 << (self::LOGICAL - 768)) | (1 << (self::LOGICAL_READS_PER_CALL - 768)) | (1 << (self::LOGICAL_READS_PER_SESSION - 768)) | (1 << (self::LOG - 768)) | (1 << (self::LOGMINING - 768)) | (1 << (self::LOGOFF - 768)) | (1 << (self::LOGON - 768)) | (1 << (self::LOG_READ_ONLY_VIOLATIONS - 768)) | (1 << (self::LONG - 768)) | (1 << (self::LOOP - 768)) | (1 << (self::LOWER - 768)) | (1 << (self::LOW - 768)) | (1 << (self::LPAD - 768)) | (1 << (self::LTRIM - 768)) | (1 << (self::MAIN - 768)) | (1 << (self::MAKE_REF - 768)) | (1 << (self::MANAGED - 768)) | (1 << (self::MANAGE - 768)) | (1 << (self::MANAGEMENT - 768)) | (1 << (self::MANAGER - 768)) | (1 << (self::MANUAL - 768)) | (1 << (self::MAP - 768)) | (1 << (self::MAPPING - 768)) | (1 << (self::MASTER - 768)) | (1 << (self::MATCHED - 768)) | (1 << (self::MATCHES - 768)) | (1 << (self::MATCH - 768)) | (1 << (self::MATCH_NUMBER - 768)) | (1 << (self::MATCH_RECOGNIZE - 768)) | (1 << (self::MATERIALIZED - 768)) | (1 << (self::MATERIALIZE - 768)) | (1 << (self::MAXARCHLOGS - 768)) | (1 << (self::MAXDATAFILES - 768)) | (1 << (self::MAXEXTENTS - 768)) | (1 << (self::MAXIMIZE - 768)) | (1 << (self::MAXINSTANCES - 768)) | (1 << (self::MAXLOGFILES - 768)) | (1 << (self::MAXLOGHISTORY - 768)) | (1 << (self::MAXLOGMEMBERS - 768)) | (1 << (self::MAX_SHARED_TEMP_SIZE - 768)) | (1 << (self::MAXSIZE - 768)) | (1 << (self::MAXTRANS - 768)) | (1 << (self::MAXVALUE - 768)) | (1 << (self::MEASURE - 768)) | (1 << (self::MEASURES - 768)) | (1 << (self::MEDIUM - 768)) | (1 << (self::MEMBER - 768)) | (1 << (self::MEMCOMPRESS - 768)) | (1 << (self::MEMORY - 768)) | (1 << (self::MERGEACTIONS - 768)) | (1 << (self::MERGE_AJ - 768)) | (1 << (self::MERGE_CONST_ON - 768)))) !== 0) || (((($_la - 832)) & ~0x3f) === 0 && ((1 << ($_la - 832)) & ((1 << (self::MERGE - 832)) | (1 << (self::MERGE_SJ - 832)) | (1 << (self::METADATA - 832)) | (1 << (self::METHOD - 832)) | (1 << (self::MIGRATE - 832)) | (1 << (self::MIGRATION - 832)) | (1 << (self::MINEXTENTS - 832)) | (1 << (self::MINIMIZE - 832)) | (1 << (self::MINIMUM - 832)) | (1 << (self::MINING - 832)) | (1 << (self::MINUS - 832)) | (1 << (self::MINUS_NULL - 832)) | (1 << (self::MINUTE - 832)) | (1 << (self::MINVALUE - 832)) | (1 << (self::MIRRORCOLD - 832)) | (1 << (self::MIRRORHOT - 832)) | (1 << (self::MIRROR - 832)) | (1 << (self::MLSLABEL - 832)) | (1 << (self::MODEL_COMPILE_SUBQUERY - 832)) | (1 << (self::MODEL_DONTVERIFY_UNIQUENESS - 832)) | (1 << (self::MODEL_DYNAMIC_SUBQUERY - 832)) | (1 << (self::MODEL_MIN_ANALYSIS - 832)) | (1 << (self::MODEL - 832)) | (1 << (self::MODEL_NB - 832)) | (1 << (self::MODEL_NO_ANALYSIS - 832)) | (1 << (self::MODEL_PBY - 832)) | (1 << (self::MODEL_PUSH_REF - 832)) | (1 << (self::MODEL_SV - 832)) | (1 << (self::MODE - 832)) | (1 << (self::MODIFICATION - 832)) | (1 << (self::MODIFY_COLUMN_TYPE - 832)) | (1 << (self::MODIFY - 832)) | (1 << (self::MOD - 832)) | (1 << (self::MODULE - 832)) | (1 << (self::MONITORING - 832)) | (1 << (self::MONITOR - 832)) | (1 << (self::MONTH - 832)) | (1 << (self::MONTHS_BETWEEN - 832)) | (1 << (self::MONTHS - 832)) | (1 << (self::MOUNT - 832)) | (1 << (self::MOUNTPATH - 832)) | (1 << (self::MOVEMENT - 832)) | (1 << (self::MOVE - 832)) | (1 << (self::MULTIDIMENSIONAL - 832)) | (1 << (self::MULTISET - 832)) | (1 << (self::MV_MERGE - 832)) | (1 << (self::NAMED - 832)) | (1 << (self::NAME - 832)) | (1 << (self::NAMESPACE - 832)) | (1 << (self::NAN - 832)) | (1 << (self::NANVL - 832)) | (1 << (self::NATIONAL - 832)) | (1 << (self::NATIVE_FULL_OUTER_JOIN - 832)) | (1 << (self::NATIVE - 832)) | (1 << (self::NATURAL - 832)) | (1 << (self::NATURALN - 832)) | (1 << (self::NAV - 832)) | (1 << (self::NCHAR_CS - 832)) | (1 << (self::NCHAR - 832)) | (1 << (self::NCHR - 832)) | (1 << (self::NCLOB - 832)) | (1 << (self::NEEDED - 832)) | (1 << (self::NEG - 832)) | (1 << (self::NESTED - 832)))) !== 0) || (((($_la - 896)) & ~0x3f) === 0 && ((1 << ($_la - 896)) & ((1 << (self::NESTED_TABLE_FAST_INSERT - 896)) | (1 << (self::NESTED_TABLE_GET_REFS - 896)) | (1 << (self::NESTED_TABLE_ID - 896)) | (1 << (self::NESTED_TABLE_SET_REFS - 896)) | (1 << (self::NESTED_TABLE_SET_SETID - 896)) | (1 << (self::NETWORK - 896)) | (1 << (self::NEVER - 896)) | (1 << (self::NEW - 896)) | (1 << (self::NEW_TIME - 896)) | (1 << (self::NEXT_DAY - 896)) | (1 << (self::NEXT - 896)) | (1 << (self::NL_AJ - 896)) | (1 << (self::NLJ_BATCHING - 896)) | (1 << (self::NLJ_INDEX_FILTER - 896)) | (1 << (self::NLJ_INDEX_SCAN - 896)) | (1 << (self::NLJ_PREFETCH - 896)) | (1 << (self::NLS_CALENDAR - 896)) | (1 << (self::NLS_CHARACTERSET - 896)) | (1 << (self::NLS_CHARSET_DECL_LEN - 896)) | (1 << (self::NLS_CHARSET_ID - 896)) | (1 << (self::NLS_CHARSET_NAME - 896)) | (1 << (self::NLS_COMP - 896)) | (1 << (self::NLS_CURRENCY - 896)) | (1 << (self::NLS_DATE_FORMAT - 896)) | (1 << (self::NLS_DATE_LANGUAGE - 896)) | (1 << (self::NLS_INITCAP - 896)) | (1 << (self::NLS_ISO_CURRENCY - 896)) | (1 << (self::NL_SJ - 896)) | (1 << (self::NLS_LANG - 896)) | (1 << (self::NLS_LANGUAGE - 896)) | (1 << (self::NLS_LENGTH_SEMANTICS - 896)) | (1 << (self::NLS_LOWER - 896)) | (1 << (self::NLS_NCHAR_CONV_EXCP - 896)) | (1 << (self::NLS_NUMERIC_CHARACTERS - 896)) | (1 << (self::NLS_SORT - 896)) | (1 << (self::NLSSORT - 896)) | (1 << (self::NLS_SPECIAL_CHARS - 896)) | (1 << (self::NLS_TERRITORY - 896)) | (1 << (self::NLS_UPPER - 896)) | (1 << (self::NO_ACCESS - 896)) | (1 << (self::NO_ADAPTIVE_PLAN - 896)) | (1 << (self::NO_ANSI_REARCH - 896)) | (1 << (self::NOAPPEND - 896)) | (1 << (self::NOARCHIVELOG - 896)) | (1 << (self::NOAUDIT - 896)) | (1 << (self::NO_AUTO_REOPTIMIZE - 896)) | (1 << (self::NO_BASETABLE_MULTIMV_REWRITE - 896)) | (1 << (self::NO_BATCH_TABLE_ACCESS_BY_ROWID - 896)) | (1 << (self::NO_BIND_AWARE - 896)) | (1 << (self::NO_BUFFER - 896)) | (1 << (self::NOCACHE - 896)) | (1 << (self::NO_CARTESIAN - 896)) | (1 << (self::NO_CHECK_ACL_REWRITE - 896)) | (1 << (self::NO_CLUSTER_BY_ROWID - 896)) | (1 << (self::NO_CLUSTERING - 896)) | (1 << (self::NO_COALESCE_SQ - 896)) | (1 << (self::NO_COMMON_DATA - 896)) | (1 << (self::NOCOMPRESS - 896)) | (1 << (self::NO_CONNECT_BY_CB_WHR_ONLY - 896)) | (1 << (self::NO_CONNECT_BY_COMBINE_SW - 896)) | (1 << (self::NO_CONNECT_BY_COST_BASED - 896)) | (1 << (self::NO_CONNECT_BY_ELIM_DUPS - 896)) | (1 << (self::NO_CONNECT_BY_FILTERING - 896)) | (1 << (self::NOCOPY - 896)))) !== 0) || (((($_la - 960)) & ~0x3f) === 0 && ((1 << ($_la - 960)) & ((1 << (self::NO_COST_XML_QUERY_REWRITE - 960)) | (1 << (self::NO_CPU_COSTING - 960)) | (1 << (self::NOCPU_COSTING - 960)) | (1 << (self::NOCYCLE - 960)) | (1 << (self::NO_DATA_SECURITY_REWRITE - 960)) | (1 << (self::NO_DECORRELATE - 960)) | (1 << (self::NODELAY - 960)) | (1 << (self::NO_DOMAIN_INDEX_FILTER - 960)) | (1 << (self::NO_DST_UPGRADE_INSERT_CONV - 960)) | (1 << (self::NO_ELIM_GROUPBY - 960)) | (1 << (self::NO_ELIMINATE_JOIN - 960)) | (1 << (self::NO_ELIMINATE_OBY - 960)) | (1 << (self::NO_ELIMINATE_OUTER_JOIN - 960)) | (1 << (self::NOENTITYESCAPING - 960)) | (1 << (self::NO_EXPAND_GSET_TO_UNION - 960)) | (1 << (self::NO_EXPAND - 960)) | (1 << (self::NO_EXPAND_TABLE - 960)) | (1 << (self::NO_FACT - 960)) | (1 << (self::NO_FACTORIZE_JOIN - 960)) | (1 << (self::NO_FILTERING - 960)) | (1 << (self::NOFORCE - 960)) | (1 << (self::NO_FULL_OUTER_JOIN_TO_OUTER - 960)) | (1 << (self::NO_GATHER_OPTIMIZER_STATISTICS - 960)) | (1 << (self::NO_GBY_PUSHDOWN - 960)) | (1 << (self::NOGUARANTEE - 960)) | (1 << (self::NO_INDEX_FFS - 960)) | (1 << (self::NO_INDEX - 960)) | (1 << (self::NO_INDEX_SS - 960)) | (1 << (self::NO_INMEMORY - 960)) | (1 << (self::NO_INMEMORY_PRUNING - 960)) | (1 << (self::NOKEEP - 960)) | (1 << (self::NO_LOAD - 960)) | (1 << (self::NOLOCAL - 960)) | (1 << (self::NOLOGGING - 960)) | (1 << (self::NOMAPPING - 960)) | (1 << (self::NOMAXVALUE - 960)) | (1 << (self::NO_MERGE - 960)) | (1 << (self::NOMINIMIZE - 960)) | (1 << (self::NOMINVALUE - 960)) | (1 << (self::NO_MODEL_PUSH_REF - 960)) | (1 << (self::NO_MONITORING - 960)) | (1 << (self::NOMONITORING - 960)) | (1 << (self::NO_MONITOR - 960)) | (1 << (self::NO_MULTIMV_REWRITE - 960)) | (1 << (self::NO_NATIVE_FULL_OUTER_JOIN - 960)) | (1 << (self::NONBLOCKING - 960)) | (1 << (self::NONEDITIONABLE - 960)) | (1 << (self::NONE - 960)) | (1 << (self::NO_NLJ_BATCHING - 960)) | (1 << (self::NO_NLJ_PREFETCH - 960)) | (1 << (self::NO - 960)) | (1 << (self::NONSCHEMA - 960)) | (1 << (self::NO_OBJECT_LINK - 960)) | (1 << (self::NOORDER - 960)) | (1 << (self::NO_ORDER_ROLLUPS - 960)) | (1 << (self::NO_OUTER_JOIN_TO_ANTI - 960)) | (1 << (self::NO_OUTER_JOIN_TO_INNER - 960)) | (1 << (self::NOOVERRIDE - 960)) | (1 << (self::NO_PARALLEL_INDEX - 960)) | (1 << (self::NOPARALLEL_INDEX - 960)) | (1 << (self::NO_PARALLEL - 960)) | (1 << (self::NOPARALLEL - 960)) | (1 << (self::NO_PARTIAL_COMMIT - 960)) | (1 << (self::NO_PARTIAL_JOIN - 960)))) !== 0) || (((($_la - 1024)) & ~0x3f) === 0 && ((1 << ($_la - 1024)) & ((1 << (self::NO_PARTIAL_ROLLUP_PUSHDOWN - 1024)) | (1 << (self::NOPARTITION - 1024)) | (1 << (self::NO_PLACE_DISTINCT - 1024)) | (1 << (self::NO_PLACE_GROUP_BY - 1024)) | (1 << (self::NO_PQ_CONCURRENT_UNION - 1024)) | (1 << (self::NO_PQ_MAP - 1024)) | (1 << (self::NO_PQ_REPLICATE - 1024)) | (1 << (self::NO_PQ_SKEW - 1024)) | (1 << (self::NO_PRUNE_GSETS - 1024)) | (1 << (self::NO_PULL_PRED - 1024)) | (1 << (self::NO_PUSH_PRED - 1024)) | (1 << (self::NO_PUSH_SUBQ - 1024)) | (1 << (self::NO_PX_FAULT_TOLERANCE - 1024)) | (1 << (self::NO_PX_JOIN_FILTER - 1024)) | (1 << (self::NO_QKN_BUFF - 1024)) | (1 << (self::NO_QUERY_TRANSFORMATION - 1024)) | (1 << (self::NO_REF_CASCADE - 1024)) | (1 << (self::NORELOCATE - 1024)) | (1 << (self::NORELY - 1024)) | (1 << (self::NOREPAIR - 1024)) | (1 << (self::NOREPLAY - 1024)) | (1 << (self::NORESETLOGS - 1024)) | (1 << (self::NO_RESULT_CACHE - 1024)) | (1 << (self::NOREVERSE - 1024)) | (1 << (self::NO_REWRITE - 1024)) | (1 << (self::NOREWRITE - 1024)) | (1 << (self::NORMAL - 1024)) | (1 << (self::NO_ROOT_SW_FOR_LOCAL - 1024)) | (1 << (self::NOROWDEPENDENCIES - 1024)) | (1 << (self::NOSCHEMACHECK - 1024)) | (1 << (self::NOSEGMENT - 1024)) | (1 << (self::NO_SEMIJOIN - 1024)) | (1 << (self::NO_SEMI_TO_INNER - 1024)) | (1 << (self::NO_SET_TO_JOIN - 1024)) | (1 << (self::NOSORT - 1024)) | (1 << (self::NO_SQL_TRANSLATION - 1024)) | (1 << (self::NO_SQL_TUNE - 1024)) | (1 << (self::NO_STAR_TRANSFORMATION - 1024)) | (1 << (self::NO_STATEMENT_QUEUING - 1024)) | (1 << (self::NO_STATS_GSETS - 1024)) | (1 << (self::NOSTRICT - 1024)) | (1 << (self::NO_SUBQUERY_PRUNING - 1024)) | (1 << (self::NO_SUBSTRB_PAD - 1024)) | (1 << (self::NO_SWAP_JOIN_INPUTS - 1024)) | (1 << (self::NOSWITCH - 1024)) | (1 << (self::NO_TABLE_LOOKUP_BY_NL - 1024)) | (1 << (self::NO_TEMP_TABLE - 1024)) | (1 << (self::NOTHING - 1024)) | (1 << (self::NOTIFICATION - 1024)) | (1 << (self::NOT - 1024)) | (1 << (self::NO_TRANSFORM_DISTINCT_AGG - 1024)) | (1 << (self::NO_UNNEST - 1024)) | (1 << (self::NO_USE_CUBE - 1024)) | (1 << (self::NO_USE_HASH_AGGREGATION - 1024)) | (1 << (self::NO_USE_HASH_GBY_FOR_PUSHDOWN - 1024)) | (1 << (self::NO_USE_HASH - 1024)) | (1 << (self::NO_USE_INVISIBLE_INDEXES - 1024)) | (1 << (self::NO_USE_MERGE - 1024)) | (1 << (self::NO_USE_NL - 1024)) | (1 << (self::NO_USE_VECTOR_AGGREGATION - 1024)) | (1 << (self::NOVALIDATE - 1024)) | (1 << (self::NO_VECTOR_TRANSFORM_DIMS - 1024)) | (1 << (self::NO_VECTOR_TRANSFORM_FACT - 1024)) | (1 << (self::NO_VECTOR_TRANSFORM - 1024)))) !== 0) || (((($_la - 1088)) & ~0x3f) === 0 && ((1 << ($_la - 1088)) & ((1 << (self::NOWAIT - 1088)) | (1 << (self::NO_XDB_FASTPATH_INSERT - 1088)) | (1 << (self::NO_XML_DML_REWRITE - 1088)) | (1 << (self::NO_XMLINDEX_REWRITE_IN_SELECT - 1088)) | (1 << (self::NO_XMLINDEX_REWRITE - 1088)) | (1 << (self::NO_XML_QUERY_REWRITE - 1088)) | (1 << (self::NO_ZONEMAP - 1088)) | (1 << (self::NTH_VALUE - 1088)) | (1 << (self::NULLIF - 1088)) | (1 << (self::NULL_ - 1088)) | (1 << (self::NULLS - 1088)) | (1 << (self::NUMBER - 1088)) | (1 << (self::NUMERIC - 1088)) | (1 << (self::NUM_INDEX_KEYS - 1088)) | (1 << (self::NUMTODSINTERVAL - 1088)) | (1 << (self::NUMTOYMINTERVAL - 1088)) | (1 << (self::NVARCHAR2 - 1088)) | (1 << (self::NVL2 - 1088)) | (1 << (self::OBJECT2XML - 1088)) | (1 << (self::OBJECT - 1088)) | (1 << (self::OBJ_ID - 1088)) | (1 << (self::OBJNO - 1088)) | (1 << (self::OBJNO_REUSE - 1088)) | (1 << (self::OCCURENCES - 1088)) | (1 << (self::OFFLINE - 1088)) | (1 << (self::OFF - 1088)) | (1 << (self::OFFSET - 1088)) | (1 << (self::OF - 1088)) | (1 << (self::OIDINDEX - 1088)) | (1 << (self::OID - 1088)) | (1 << (self::OLAP - 1088)) | (1 << (self::OLD - 1088)) | (1 << (self::OLD_PUSH_PRED - 1088)) | (1 << (self::OLS - 1088)) | (1 << (self::OLTP - 1088)) | (1 << (self::OMIT - 1088)) | (1 << (self::ONE - 1088)) | (1 << (self::ONLINE - 1088)) | (1 << (self::ONLINELOG - 1088)) | (1 << (self::ONLY - 1088)) | (1 << (self::ON - 1088)) | (1 << (self::OPAQUE - 1088)) | (1 << (self::OPAQUE_TRANSFORM - 1088)) | (1 << (self::OPAQUE_XCANONICAL - 1088)) | (1 << (self::OPCODE - 1088)) | (1 << (self::OPEN - 1088)) | (1 << (self::OPERATIONS - 1088)) | (1 << (self::OPERATOR - 1088)) | (1 << (self::OPT_ESTIMATE - 1088)) | (1 << (self::OPTIMAL - 1088)) | (1 << (self::OPTIMIZE - 1088)) | (1 << (self::OPTIMIZER_FEATURES_ENABLE - 1088)) | (1 << (self::OPTIMIZER_GOAL - 1088)) | (1 << (self::OPTION - 1088)) | (1 << (self::OPT_PARAM - 1088)) | (1 << (self::ORA_BRANCH - 1088)) | (1 << (self::ORA_CHECK_ACL - 1088)) | (1 << (self::ORA_CHECK_PRIVILEGE - 1088)) | (1 << (self::ORA_CLUSTERING - 1088)) | (1 << (self::ORADATA - 1088)) | (1 << (self::ORADEBUG - 1088)) | (1 << (self::ORA_DST_AFFECTED - 1088)) | (1 << (self::ORA_DST_CONVERT - 1088)) | (1 << (self::ORA_DST_ERROR - 1088)))) !== 0) || (((($_la - 1152)) & ~0x3f) === 0 && ((1 << ($_la - 1152)) & ((1 << (self::ORA_GET_ACLIDS - 1152)) | (1 << (self::ORA_GET_PRIVILEGES - 1152)) | (1 << (self::ORA_HASH - 1152)) | (1 << (self::ORA_INVOKING_USERID - 1152)) | (1 << (self::ORA_INVOKING_USER - 1152)) | (1 << (self::ORA_INVOKING_XS_USER_GUID - 1152)) | (1 << (self::ORA_INVOKING_XS_USER - 1152)) | (1 << (self::ORA_RAWCOMPARE - 1152)) | (1 << (self::ORA_RAWCONCAT - 1152)) | (1 << (self::ORA_ROWSCN - 1152)) | (1 << (self::ORA_ROWSCN_RAW - 1152)) | (1 << (self::ORA_ROWVERSION - 1152)) | (1 << (self::ORA_TABVERSION - 1152)) | (1 << (self::ORA_WRITE_TIME - 1152)) | (1 << (self::ORDERED - 1152)) | (1 << (self::ORDERED_PREDICATES - 1152)) | (1 << (self::ORDER - 1152)) | (1 << (self::ORDINALITY - 1152)) | (1 << (self::OR_EXPAND - 1152)) | (1 << (self::ORGANIZATION - 1152)) | (1 << (self:: OR - 1152)) | (1 << (self::OR_PREDICATES - 1152)) | (1 << (self::OSERROR - 1152)) | (1 << (self::OTHER - 1152)) | (1 << (self::OUTER_JOIN_TO_ANTI - 1152)) | (1 << (self::OUTER_JOIN_TO_INNER - 1152)) | (1 << (self::OUTER - 1152)) | (1 << (self::OUTLINE_LEAF - 1152)) | (1 << (self::OUTLINE - 1152)) | (1 << (self::OUT_OF_LINE - 1152)) | (1 << (self::OUT - 1152)) | (1 << (self::OVERFLOW_NOMOVE - 1152)) | (1 << (self::OVERFLOW - 1152)) | (1 << (self::OVERLAPS - 1152)) | (1 << (self::OVER - 1152)) | (1 << (self::OVERRIDING - 1152)) | (1 << (self::OWNER - 1152)) | (1 << (self::OWNERSHIP - 1152)) | (1 << (self::OWN - 1152)) | (1 << (self::PACKAGE - 1152)) | (1 << (self::PACKAGES - 1152)) | (1 << (self::PARALLEL_ENABLE - 1152)) | (1 << (self::PARALLEL_INDEX - 1152)) | (1 << (self::PARALLEL - 1152)) | (1 << (self::PARAMETERFILE - 1152)) | (1 << (self::PARAMETERS - 1152)) | (1 << (self::PARAM - 1152)) | (1 << (self::PARENT - 1152)) | (1 << (self::PARITY - 1152)) | (1 << (self::PARTIAL_JOIN - 1152)) | (1 << (self::PARTIALLY - 1152)) | (1 << (self::PARTIAL - 1152)) | (1 << (self::PARTIAL_ROLLUP_PUSHDOWN - 1152)) | (1 << (self::PARTITION_HASH - 1152)) | (1 << (self::PARTITION_LIST - 1152)) | (1 << (self::PARTITION - 1152)) | (1 << (self::PARTITION_RANGE - 1152)) | (1 << (self::PARTITIONS - 1152)) | (1 << (self::PARTNUMINST - 1152)) | (1 << (self::PASSING - 1152)) | (1 << (self::PASSWORD_GRACE_TIME - 1152)) | (1 << (self::PASSWORD_LIFE_TIME - 1152)) | (1 << (self::PASSWORD_LOCK_TIME - 1152)) | (1 << (self::PASSWORD - 1152)))) !== 0) || (((($_la - 1216)) & ~0x3f) === 0 && ((1 << ($_la - 1216)) & ((1 << (self::PASSWORD_REUSE_MAX - 1216)) | (1 << (self::PASSWORD_REUSE_TIME - 1216)) | (1 << (self::PASSWORD_VERIFY_FUNCTION - 1216)) | (1 << (self::PAST - 1216)) | (1 << (self::PATCH - 1216)) | (1 << (self::PATH - 1216)) | (1 << (self::PATH_PREFIX - 1216)) | (1 << (self::PATHS - 1216)) | (1 << (self::PATTERN - 1216)) | (1 << (self::PBL_HS_BEGIN - 1216)) | (1 << (self::PBL_HS_END - 1216)) | (1 << (self::PCTFREE - 1216)) | (1 << (self::PCTINCREASE - 1216)) | (1 << (self::PCTTHRESHOLD - 1216)) | (1 << (self::PCTUSED - 1216)) | (1 << (self::PCTVERSION - 1216)) | (1 << (self::PENDING - 1216)) | (1 << (self::PERCENT_FOUND - 1216)) | (1 << (self::PERCENT_ISOPEN - 1216)) | (1 << (self::PERCENT_NOTFOUND - 1216)) | (1 << (self::PERCENT_KEYWORD - 1216)) | (1 << (self::PERCENT_RANKM - 1216)) | (1 << (self::PERCENT_ROWCOUNT - 1216)) | (1 << (self::PERCENT_ROWTYPE - 1216)) | (1 << (self::PERCENT_TYPE - 1216)) | (1 << (self::PERFORMANCE - 1216)) | (1 << (self::PERIOD_KEYWORD - 1216)) | (1 << (self::PERMANENT - 1216)) | (1 << (self::PERMISSION - 1216)) | (1 << (self::PERMUTE - 1216)) | (1 << (self::PER - 1216)) | (1 << (self::PFILE - 1216)) | (1 << (self::PHYSICAL - 1216)) | (1 << (self::PIKEY - 1216)) | (1 << (self::PIPELINED - 1216)) | (1 << (self::PIPE - 1216)) | (1 << (self::PIV_GB - 1216)) | (1 << (self::PIVOT - 1216)) | (1 << (self::PIV_SSF - 1216)) | (1 << (self::PLACE_DISTINCT - 1216)) | (1 << (self::PLACE_GROUP_BY - 1216)) | (1 << (self::PLAN - 1216)) | (1 << (self::PLSCOPE_SETTINGS - 1216)) | (1 << (self::PLS_INTEGER - 1216)) | (1 << (self::PLSQL_CCFLAGS - 1216)) | (1 << (self::PLSQL_CODE_TYPE - 1216)) | (1 << (self::PLSQL_DEBUG - 1216)) | (1 << (self::PLSQL_OPTIMIZE_LEVEL - 1216)) | (1 << (self::PLSQL_WARNINGS - 1216)) | (1 << (self::PLUGGABLE - 1216)) | (1 << (self::POINT - 1216)) | (1 << (self::POLICY - 1216)) | (1 << (self::POOL_16K - 1216)) | (1 << (self::POOL_2K - 1216)) | (1 << (self::POOL_32K - 1216)) | (1 << (self::POOL_4K - 1216)) | (1 << (self::POOL_8K - 1216)) | (1 << (self::POSITIVEN - 1216)) | (1 << (self::POSITIVE - 1216)) | (1 << (self::POST_TRANSACTION - 1216)) | (1 << (self::POWERMULTISET_BY_CARDINALITY - 1216)) | (1 << (self::POWERMULTISET - 1216)) | (1 << (self::POWER - 1216)) | (1 << (self::PQ_CONCURRENT_UNION - 1216)))) !== 0) || (((($_la - 1280)) & ~0x3f) === 0 && ((1 << ($_la - 1280)) & ((1 << (self::PQ_DISTRIBUTE - 1280)) | (1 << (self::PQ_DISTRIBUTE_WINDOW - 1280)) | (1 << (self::PQ_FILTER - 1280)) | (1 << (self::PQ_MAP - 1280)) | (1 << (self::PQ_NOMAP - 1280)) | (1 << (self::PQ_REPLICATE - 1280)) | (1 << (self::PQ_SKEW - 1280)) | (1 << (self::PRAGMA - 1280)) | (1 << (self::PREBUILT - 1280)) | (1 << (self::PRECEDES - 1280)) | (1 << (self::PRECEDING - 1280)) | (1 << (self::PRECISION - 1280)) | (1 << (self::PRECOMPUTE_SUBQUERY - 1280)) | (1 << (self::PREDICATE_REORDERS - 1280)) | (1 << (self::PRELOAD - 1280)) | (1 << (self::PREPARE - 1280)) | (1 << (self::PRESENTNNV - 1280)) | (1 << (self::PRESENT - 1280)) | (1 << (self::PRESENTV - 1280)) | (1 << (self::PRESERVE_OID - 1280)) | (1 << (self::PRESERVE - 1280)) | (1 << (self::PRETTY - 1280)) | (1 << (self::PREVIOUS - 1280)) | (1 << (self::PREV - 1280)) | (1 << (self::PRIMARY - 1280)) | (1 << (self::PRINTBLOBTOCLOB - 1280)) | (1 << (self::PRIORITY - 1280)) | (1 << (self::PRIOR - 1280)) | (1 << (self::PRIVATE - 1280)) | (1 << (self::PRIVATE_SGA - 1280)) | (1 << (self::PRIVILEGED - 1280)) | (1 << (self::PRIVILEGE - 1280)) | (1 << (self::PRIVILEGES - 1280)) | (1 << (self::PROCEDURAL - 1280)) | (1 << (self::PROCEDURE - 1280)) | (1 << (self::PROCESS - 1280)) | (1 << (self::PROFILE - 1280)) | (1 << (self::PROGRAM - 1280)) | (1 << (self::PROJECT - 1280)) | (1 << (self::PROPAGATE - 1280)) | (1 << (self::PROTECTED - 1280)) | (1 << (self::PROTECTION - 1280)) | (1 << (self::PROXY - 1280)) | (1 << (self::PRUNING - 1280)) | (1 << (self::PUBLIC - 1280)) | (1 << (self::PULL_PRED - 1280)) | (1 << (self::PURGE - 1280)) | (1 << (self::PUSH_PRED - 1280)) | (1 << (self::PUSH_SUBQ - 1280)) | (1 << (self::PX_FAULT_TOLERANCE - 1280)) | (1 << (self::PX_GRANULE - 1280)) | (1 << (self::PX_JOIN_FILTER - 1280)) | (1 << (self::QB_NAME - 1280)) | (1 << (self::QUERY_BLOCK - 1280)) | (1 << (self::QUERY - 1280)) | (1 << (self::QUEUE_CURR - 1280)) | (1 << (self::QUEUE - 1280)) | (1 << (self::QUEUE_ROWP - 1280)) | (1 << (self::QUIESCE - 1280)) | (1 << (self::QUORUM - 1280)) | (1 << (self::QUOTA - 1280)) | (1 << (self::RAISE - 1280)) | (1 << (self::RANDOM_LOCAL - 1280)) | (1 << (self::RANDOM - 1280)))) !== 0) || (((($_la - 1344)) & ~0x3f) === 0 && ((1 << ($_la - 1344)) & ((1 << (self::RANGE - 1344)) | (1 << (self::RANKM - 1344)) | (1 << (self::RAPIDLY - 1344)) | (1 << (self::RAW - 1344)) | (1 << (self::RAWTOHEX - 1344)) | (1 << (self::RAWTONHEX - 1344)) | (1 << (self::RBA - 1344)) | (1 << (self::RBO_OUTLINE - 1344)) | (1 << (self::RDBA - 1344)) | (1 << (self::READ - 1344)) | (1 << (self::READS - 1344)) | (1 << (self::REALM - 1344)) | (1 << (self::REAL - 1344)) | (1 << (self::REBALANCE - 1344)) | (1 << (self::REBUILD - 1344)) | (1 << (self::RECORD - 1344)) | (1 << (self::RECORDS_PER_BLOCK - 1344)) | (1 << (self::RECOVERABLE - 1344)) | (1 << (self::RECOVER - 1344)) | (1 << (self::RECOVERY - 1344)) | (1 << (self::RECYCLEBIN - 1344)) | (1 << (self::RECYCLE - 1344)) | (1 << (self::REDACTION - 1344)) | (1 << (self::REDEFINE - 1344)) | (1 << (self::REDO - 1344)) | (1 << (self::REDUCED - 1344)) | (1 << (self::REDUNDANCY - 1344)) | (1 << (self::REF_CASCADE_CURSOR - 1344)) | (1 << (self::REFERENCED - 1344)) | (1 << (self::REFERENCE - 1344)) | (1 << (self::REFERENCES - 1344)) | (1 << (self::REFERENCING - 1344)) | (1 << (self::REF - 1344)) | (1 << (self::REFRESH - 1344)) | (1 << (self::REFTOHEX - 1344)) | (1 << (self::REGEXP_COUNT - 1344)) | (1 << (self::REGEXP_INSTR - 1344)) | (1 << (self::REGEXP_LIKE - 1344)) | (1 << (self::REGEXP_REPLACE - 1344)) | (1 << (self::REGEXP_SUBSTR - 1344)) | (1 << (self::REGISTER - 1344)) | (1 << (self::REGR_AVGX - 1344)) | (1 << (self::REGR_AVGY - 1344)) | (1 << (self::REGR_COUNT - 1344)) | (1 << (self::REGR_INTERCEPT - 1344)) | (1 << (self::REGR_R2 - 1344)) | (1 << (self::REGR_SLOPE - 1344)) | (1 << (self::REGR_SXX - 1344)) | (1 << (self::REGR_SXY - 1344)) | (1 << (self::REGR_SYY - 1344)) | (1 << (self::REGULAR - 1344)) | (1 << (self::REJECT - 1344)) | (1 << (self::REKEY - 1344)) | (1 << (self::RELATIONAL - 1344)) | (1 << (self::RELIES_ON - 1344)) | (1 << (self::RELOCATE - 1344)) | (1 << (self::RELY - 1344)) | (1 << (self::REMAINDER - 1344)) | (1 << (self::REMOTE_MAPPED - 1344)) | (1 << (self::REMOVE - 1344)) | (1 << (self::RENAME - 1344)) | (1 << (self::REPAIR - 1344)) | (1 << (self::REPEAT - 1344)) | (1 << (self::REPLACE - 1344)))) !== 0) || (((($_la - 1408)) & ~0x3f) === 0 && ((1 << ($_la - 1408)) & ((1 << (self::REPLICATION - 1408)) | (1 << (self::REQUIRED - 1408)) | (1 << (self::RESETLOGS - 1408)) | (1 << (self::RESET - 1408)) | (1 << (self::RESIZE - 1408)) | (1 << (self::RESOLVE - 1408)) | (1 << (self::RESOLVER - 1408)) | (1 << (self::RESOURCE - 1408)) | (1 << (self::RESPECT - 1408)) | (1 << (self::RESTART - 1408)) | (1 << (self::RESTORE_AS_INTERVALS - 1408)) | (1 << (self::RESTORE - 1408)) | (1 << (self::RESTRICT_ALL_REF_CONS - 1408)) | (1 << (self::RESTRICTED - 1408)) | (1 << (self::RESTRICT_REFERENCES - 1408)) | (1 << (self::RESTRICT - 1408)) | (1 << (self::RESULT_CACHE - 1408)) | (1 << (self::RESULT - 1408)) | (1 << (self::RESUMABLE - 1408)) | (1 << (self::RESUME - 1408)) | (1 << (self::RETENTION - 1408)) | (1 << (self::RETRY_ON_ROW_CHANGE - 1408)) | (1 << (self::RETURNING - 1408)) | (1 << (self::RETURN - 1408)) | (1 << (self::REUSE - 1408)) | (1 << (self::REVERSE - 1408)) | (1 << (self::REVOKE - 1408)) | (1 << (self::REWRITE_OR_ERROR - 1408)) | (1 << (self::REWRITE - 1408)) | (1 << (self::RIGHT - 1408)) | (1 << (self::ROLE - 1408)) | (1 << (self::ROLESET - 1408)) | (1 << (self::ROLES - 1408)) | (1 << (self::ROLLBACK - 1408)) | (1 << (self::ROLLING - 1408)) | (1 << (self::ROLLUP - 1408)) | (1 << (self::ROWDEPENDENCIES - 1408)) | (1 << (self::ROWID_MAPPING_TABLE - 1408)) | (1 << (self::ROWID - 1408)) | (1 << (self::ROWIDTOCHAR - 1408)) | (1 << (self::ROWIDTONCHAR - 1408)) | (1 << (self::ROW_LENGTH - 1408)) | (1 << (self::ROWNUM - 1408)) | (1 << (self::ROW - 1408)) | (1 << (self::ROWS - 1408)) | (1 << (self::RPAD - 1408)) | (1 << (self::RTRIM - 1408)) | (1 << (self::RULE - 1408)) | (1 << (self::RULES - 1408)) | (1 << (self::RUNNING - 1408)) | (1 << (self::SALT - 1408)) | (1 << (self::SAMPLE - 1408)) | (1 << (self::SAVE_AS_INTERVALS - 1408)) | (1 << (self::SAVEPOINT - 1408)) | (1 << (self::SAVE - 1408)) | (1 << (self::SB4 - 1408)) | (1 << (self::SCALE_ROWS - 1408)) | (1 << (self::SCALE - 1408)) | (1 << (self::SCAN_INSTANCES - 1408)) | (1 << (self::SCAN - 1408)) | (1 << (self::SCHEDULER - 1408)) | (1 << (self::SCHEMACHECK - 1408)) | (1 << (self::SCHEMA - 1408)) | (1 << (self::SCN_ASCENDING - 1408)))) !== 0) || (((($_la - 1472)) & ~0x3f) === 0 && ((1 << ($_la - 1472)) & ((1 << (self::SCN - 1472)) | (1 << (self::SCOPE - 1472)) | (1 << (self::SCRUB - 1472)) | (1 << (self::SD_ALL - 1472)) | (1 << (self::SD_INHIBIT - 1472)) | (1 << (self::SDO_GEOM_MBR - 1472)) | (1 << (self::SD_SHOW - 1472)) | (1 << (self::SEARCH - 1472)) | (1 << (self::SECOND - 1472)) | (1 << (self::SECRET - 1472)) | (1 << (self::SECUREFILE_DBA - 1472)) | (1 << (self::SECUREFILE - 1472)) | (1 << (self::SECURITY - 1472)) | (1 << (self::SEED - 1472)) | (1 << (self::SEG_BLOCK - 1472)) | (1 << (self::SEG_FILE - 1472)) | (1 << (self::SEGMENT - 1472)) | (1 << (self::SELECTIVITY - 1472)) | (1 << (self::SELECT - 1472)) | (1 << (self::SELF - 1472)) | (1 << (self::SEMIJOIN_DRIVER - 1472)) | (1 << (self::SEMIJOIN - 1472)) | (1 << (self::SEMI_TO_INNER - 1472)) | (1 << (self::SEQUENCED - 1472)) | (1 << (self::SEQUENCE - 1472)) | (1 << (self::SEQUENTIAL - 1472)) | (1 << (self::SEQ - 1472)) | (1 << (self::SERIALIZABLE - 1472)) | (1 << (self::SERIALLY_REUSABLE - 1472)) | (1 << (self::SERIAL - 1472)) | (1 << (self::SERVERERROR - 1472)) | (1 << (self::SERVICE_NAME_CONVERT - 1472)) | (1 << (self::SERVICES - 1472)) | (1 << (self::SESSION_CACHED_CURSORS - 1472)) | (1 << (self::SESSION - 1472)) | (1 << (self::SESSIONS_PER_USER - 1472)) | (1 << (self::SESSIONTIMEZONE - 1472)) | (1 << (self::SESSIONTZNAME - 1472)) | (1 << (self::SET - 1472)) | (1 << (self::SETS - 1472)) | (1 << (self::SETTINGS - 1472)) | (1 << (self::SET_TO_JOIN - 1472)) | (1 << (self::SEVERE - 1472)) | (1 << (self::SHARED_POOL - 1472)) | (1 << (self::SHARED - 1472)) | (1 << (self::SHARE - 1472)) | (1 << (self::SHARING - 1472)) | (1 << (self::SHELFLIFE - 1472)) | (1 << (self::SHOW - 1472)) | (1 << (self::SHRINK - 1472)) | (1 << (self::SHUTDOWN - 1472)) | (1 << (self::SIBLINGS - 1472)) | (1 << (self::SID - 1472)) | (1 << (self::SIGNAL_COMPONENT - 1472)) | (1 << (self::SIGNAL_FUNCTION - 1472)) | (1 << (self::SIGN - 1472)) | (1 << (self::SIGNTYPE - 1472)) | (1 << (self::SIMPLE_INTEGER - 1472)) | (1 << (self::SIMPLE - 1472)) | (1 << (self::SINGLE - 1472)) | (1 << (self::SINGLETASK - 1472)) | (1 << (self::SINH - 1472)) | (1 << (self::SIN - 1472)) | (1 << (self::SIZE - 1472)))) !== 0) || (((($_la - 1536)) & ~0x3f) === 0 && ((1 << ($_la - 1536)) & ((1 << (self::SKIP_EXT_OPTIMIZER - 1536)) | (1 << (self::SKIP_ - 1536)) | (1 << (self::SKIP_UNQ_UNUSABLE_IDX - 1536)) | (1 << (self::SKIP_UNUSABLE_INDEXES - 1536)) | (1 << (self::SMALLFILE - 1536)) | (1 << (self::SMALLINT - 1536)) | (1 << (self::SNAPSHOT - 1536)) | (1 << (self::SOME - 1536)) | (1 << (self::SORT - 1536)) | (1 << (self::SOUNDEX - 1536)) | (1 << (self::SOURCE_FILE_DIRECTORY - 1536)) | (1 << (self::SOURCE_FILE_NAME_CONVERT - 1536)) | (1 << (self::SOURCE - 1536)) | (1 << (self::SPACE_KEYWORD - 1536)) | (1 << (self::SPECIFICATION - 1536)) | (1 << (self::SPFILE - 1536)) | (1 << (self::SPLIT - 1536)) | (1 << (self::SPREADSHEET - 1536)) | (1 << (self::SQLDATA - 1536)) | (1 << (self::SQLERROR - 1536)) | (1 << (self::SQLLDR - 1536)) | (1 << (self::SQL - 1536)) | (1 << (self::SQL_TRACE - 1536)) | (1 << (self::SQL_TRANSLATION_PROFILE - 1536)) | (1 << (self::SQRT - 1536)) | (1 << (self::STALE - 1536)) | (1 << (self::STANDALONE - 1536)) | (1 << (self::STANDARD_HASH - 1536)) | (1 << (self::STANDBY_MAX_DATA_DELAY - 1536)) | (1 << (self::STANDBYS - 1536)) | (1 << (self::STANDBY - 1536)) | (1 << (self::STAR - 1536)) | (1 << (self::STAR_TRANSFORMATION - 1536)) | (1 << (self::START - 1536)) | (1 << (self::STARTUP - 1536)) | (1 << (self::STATEMENT_ID - 1536)) | (1 << (self::STATEMENT_QUEUING - 1536)) | (1 << (self::STATEMENTS - 1536)) | (1 << (self::STATEMENT - 1536)) | (1 << (self::STATE - 1536)) | (1 << (self::STATIC - 1536)) | (1 << (self::STATISTICS - 1536)) | (1 << (self::STATS_BINOMIAL_TEST - 1536)) | (1 << (self::STATS_CROSSTAB - 1536)) | (1 << (self::STATS_F_TEST - 1536)) | (1 << (self::STATS_KS_TEST - 1536)) | (1 << (self::STATS_MODE - 1536)) | (1 << (self::STATS_MW_TEST - 1536)) | (1 << (self::STATS_ONE_WAY_ANOVA - 1536)) | (1 << (self::STATS_T_TEST_INDEP - 1536)) | (1 << (self::STATS_T_TEST_INDEPU - 1536)) | (1 << (self::STATS_T_TEST_ONE - 1536)) | (1 << (self::STATS_T_TEST_PAIRED - 1536)) | (1 << (self::STATS_WSR_TEST - 1536)) | (1 << (self::STDDEV_POP - 1536)) | (1 << (self::STDDEV_SAMP - 1536)) | (1 << (self::STOP - 1536)) | (1 << (self::STORAGE - 1536)) | (1 << (self::STORE - 1536)) | (1 << (self::STREAMS - 1536)) | (1 << (self::STREAM - 1536)) | (1 << (self::STRICT - 1536)) | (1 << (self::STRING - 1536)) | (1 << (self::STRIPE_COLUMNS - 1536)))) !== 0) || (((($_la - 1600)) & ~0x3f) === 0 && ((1 << ($_la - 1600)) & ((1 << (self::STRIPE_WIDTH - 1600)) | (1 << (self::STRIP - 1600)) | (1 << (self::STRUCTURE - 1600)) | (1 << (self::SUBMULTISET - 1600)) | (1 << (self::SUBPARTITION_REL - 1600)) | (1 << (self::SUBPARTITIONS - 1600)) | (1 << (self::SUBPARTITION - 1600)) | (1 << (self::SUBQUERIES - 1600)) | (1 << (self::SUBQUERY_PRUNING - 1600)) | (1 << (self::SUBSCRIBE - 1600)) | (1 << (self::SUBSET - 1600)) | (1 << (self::SUBSTITUTABLE - 1600)) | (1 << (self::SUBSTR2 - 1600)) | (1 << (self::SUBSTR4 - 1600)) | (1 << (self::SUBSTRB - 1600)) | (1 << (self::SUBSTRC - 1600)) | (1 << (self::SUBTYPE - 1600)) | (1 << (self::SUCCESSFUL - 1600)) | (1 << (self::SUCCESS - 1600)) | (1 << (self::SUMMARY - 1600)) | (1 << (self::SUPPLEMENTAL - 1600)) | (1 << (self::SUSPEND - 1600)) | (1 << (self::SWAP_JOIN_INPUTS - 1600)) | (1 << (self::SWITCHOVER - 1600)) | (1 << (self::SWITCH - 1600)) | (1 << (self::SYNCHRONOUS - 1600)) | (1 << (self::SYNC - 1600)) | (1 << (self::SYNONYM - 1600)) | (1 << (self::SYSASM - 1600)) | (1 << (self::SYS_AUDIT - 1600)) | (1 << (self::SYSAUX - 1600)) | (1 << (self::SYSBACKUP - 1600)) | (1 << (self::SYS_CHECKACL - 1600)) | (1 << (self::SYS_CHECK_PRIVILEGE - 1600)) | (1 << (self::SYS_CONNECT_BY_PATH - 1600)) | (1 << (self::SYS_CONTEXT - 1600)) | (1 << (self::SYSDATE - 1600)) | (1 << (self::SYSDBA - 1600)) | (1 << (self::SYS_DBURIGEN - 1600)) | (1 << (self::SYSDG - 1600)) | (1 << (self::SYS_DL_CURSOR - 1600)) | (1 << (self::SYS_DM_RXFORM_CHR - 1600)) | (1 << (self::SYS_DM_RXFORM_NUM - 1600)) | (1 << (self::SYS_DOM_COMPARE - 1600)) | (1 << (self::SYS_DST_PRIM2SEC - 1600)) | (1 << (self::SYS_DST_SEC2PRIM - 1600)) | (1 << (self::SYS_ET_BFILE_TO_RAW - 1600)) | (1 << (self::SYS_ET_BLOB_TO_IMAGE - 1600)) | (1 << (self::SYS_ET_IMAGE_TO_BLOB - 1600)) | (1 << (self::SYS_ET_RAW_TO_BFILE - 1600)) | (1 << (self::SYS_EXTPDTXT - 1600)) | (1 << (self::SYS_EXTRACT_UTC - 1600)) | (1 << (self::SYS_FBT_INSDEL - 1600)) | (1 << (self::SYS_FILTER_ACLS - 1600)) | (1 << (self::SYS_FNMATCHES - 1600)) | (1 << (self::SYS_FNREPLACE - 1600)) | (1 << (self::SYS_GET_ACLIDS - 1600)) | (1 << (self::SYS_GET_COL_ACLIDS - 1600)) | (1 << (self::SYS_GET_PRIVILEGES - 1600)) | (1 << (self::SYS_GETTOKENID - 1600)) | (1 << (self::SYS_GETXTIVAL - 1600)) | (1 << (self::SYS_GUID - 1600)) | (1 << (self::SYSGUID - 1600)) | (1 << (self::SYSKM - 1600)))) !== 0) || (((($_la - 1664)) & ~0x3f) === 0 && ((1 << ($_la - 1664)) & ((1 << (self::SYS_MAKE_XMLNODEID - 1664)) | (1 << (self::SYS_MAKEXML - 1664)) | (1 << (self::SYS_MKXMLATTR - 1664)) | (1 << (self::SYS_MKXTI - 1664)) | (1 << (self::SYSOBJ - 1664)) | (1 << (self::SYS_OP_ADT2BIN - 1664)) | (1 << (self::SYS_OP_ADTCONS - 1664)) | (1 << (self::SYS_OP_ALSCRVAL - 1664)) | (1 << (self::SYS_OP_ATG - 1664)) | (1 << (self::SYS_OP_BIN2ADT - 1664)) | (1 << (self::SYS_OP_BITVEC - 1664)) | (1 << (self::SYS_OP_BL2R - 1664)) | (1 << (self::SYS_OP_BLOOM_FILTER_LIST - 1664)) | (1 << (self::SYS_OP_BLOOM_FILTER - 1664)) | (1 << (self::SYS_OP_C2C - 1664)) | (1 << (self::SYS_OP_CAST - 1664)) | (1 << (self::SYS_OP_CEG - 1664)) | (1 << (self::SYS_OP_CL2C - 1664)) | (1 << (self::SYS_OP_COMBINED_HASH - 1664)) | (1 << (self::SYS_OP_COMP - 1664)) | (1 << (self::SYS_OP_CONVERT - 1664)) | (1 << (self::SYS_OP_COUNTCHG - 1664)) | (1 << (self::SYS_OP_CSCONV - 1664)) | (1 << (self::SYS_OP_CSCONVTEST - 1664)) | (1 << (self::SYS_OP_CSR - 1664)) | (1 << (self::SYS_OP_CSX_PATCH - 1664)) | (1 << (self::SYS_OP_CYCLED_SEQ - 1664)) | (1 << (self::SYS_OP_DECOMP - 1664)) | (1 << (self::SYS_OP_DESCEND - 1664)) | (1 << (self::SYS_OP_DISTINCT - 1664)) | (1 << (self::SYS_OP_DRA - 1664)) | (1 << (self::SYS_OP_DUMP - 1664)) | (1 << (self::SYS_OP_DV_CHECK - 1664)) | (1 << (self::SYS_OP_ENFORCE_NOT_NULL - 1664)) | (1 << (self::SYSOPER - 1664)) | (1 << (self::SYS_OP_EXTRACT - 1664)) | (1 << (self::SYS_OP_GROUPING - 1664)) | (1 << (self::SYS_OP_GUID - 1664)) | (1 << (self::SYS_OP_HASH - 1664)) | (1 << (self::SYS_OP_IIX - 1664)) | (1 << (self::SYS_OP_ITR - 1664)) | (1 << (self::SYS_OP_KEY_VECTOR_CREATE - 1664)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER_LIST - 1664)) | (1 << (self::SYS_OP_KEY_VECTOR_FILTER - 1664)) | (1 << (self::SYS_OP_KEY_VECTOR_SUCCEEDED - 1664)) | (1 << (self::SYS_OP_KEY_VECTOR_USE - 1664)) | (1 << (self::SYS_OP_LBID - 1664)) | (1 << (self::SYS_OP_LOBLOC2BLOB - 1664)) | (1 << (self::SYS_OP_LOBLOC2CLOB - 1664)) | (1 << (self::SYS_OP_LOBLOC2ID - 1664)) | (1 << (self::SYS_OP_LOBLOC2NCLOB - 1664)) | (1 << (self::SYS_OP_LOBLOC2TYP - 1664)) | (1 << (self::SYS_OP_LSVI - 1664)) | (1 << (self::SYS_OP_LVL - 1664)) | (1 << (self::SYS_OP_MAKEOID - 1664)) | (1 << (self::SYS_OP_MAP_NONNULL - 1664)) | (1 << (self::SYS_OP_MSR - 1664)) | (1 << (self::SYS_OP_NICOMBINE - 1664)) | (1 << (self::SYS_OP_NIEXTRACT - 1664)) | (1 << (self::SYS_OP_NII - 1664)) | (1 << (self::SYS_OP_NIX - 1664)) | (1 << (self::SYS_OP_NOEXPAND - 1664)) | (1 << (self::SYS_OP_NTCIMG - 1664)) | (1 << (self::SYS_OP_NUMTORAW - 1664)))) !== 0) || (((($_la - 1728)) & ~0x3f) === 0 && ((1 << ($_la - 1728)) & ((1 << (self::SYS_OP_OIDVALUE - 1728)) | (1 << (self::SYS_OP_OPNSIZE - 1728)) | (1 << (self::SYS_OP_PAR_1 - 1728)) | (1 << (self::SYS_OP_PARGID_1 - 1728)) | (1 << (self::SYS_OP_PARGID - 1728)) | (1 << (self::SYS_OP_PAR - 1728)) | (1 << (self::SYS_OP_PART_ID - 1728)) | (1 << (self::SYS_OP_PIVOT - 1728)) | (1 << (self::SYS_OP_R2O - 1728)) | (1 << (self::SYS_OP_RAWTONUM - 1728)) | (1 << (self::SYS_OP_RDTM - 1728)) | (1 << (self::SYS_OP_REF - 1728)) | (1 << (self::SYS_OP_RMTD - 1728)) | (1 << (self::SYS_OP_ROWIDTOOBJ - 1728)) | (1 << (self::SYS_OP_RPB - 1728)) | (1 << (self::SYS_OPTLOBPRBSC - 1728)) | (1 << (self::SYS_OP_TOSETID - 1728)) | (1 << (self::SYS_OP_TPR - 1728)) | (1 << (self::SYS_OP_TRTB - 1728)) | (1 << (self::SYS_OPTXICMP - 1728)) | (1 << (self::SYS_OPTXQCASTASNQ - 1728)) | (1 << (self::SYS_OP_UNDESCEND - 1728)) | (1 << (self::SYS_OP_VECAND - 1728)) | (1 << (self::SYS_OP_VECBIT - 1728)) | (1 << (self::SYS_OP_VECOR - 1728)) | (1 << (self::SYS_OP_VECXOR - 1728)) | (1 << (self::SYS_OP_VERSION - 1728)) | (1 << (self::SYS_OP_VREF - 1728)) | (1 << (self::SYS_OP_VVD - 1728)) | (1 << (self::SYS_OP_XMLCONS_FOR_CSX - 1728)) | (1 << (self::SYS_OP_XPTHATG - 1728)) | (1 << (self::SYS_OP_XPTHIDX - 1728)) | (1 << (self::SYS_OP_XPTHOP - 1728)) | (1 << (self::SYS_OP_XTXT2SQLT - 1728)) | (1 << (self::SYS_OP_ZONE_ID - 1728)) | (1 << (self::SYS_ORDERKEY_DEPTH - 1728)) | (1 << (self::SYS_ORDERKEY_MAXCHILD - 1728)) | (1 << (self::SYS_ORDERKEY_PARENT - 1728)) | (1 << (self::SYS_PARALLEL_TXN - 1728)) | (1 << (self::SYS_PATHID_IS_ATTR - 1728)) | (1 << (self::SYS_PATHID_IS_NMSPC - 1728)) | (1 << (self::SYS_PATHID_LASTNAME - 1728)) | (1 << (self::SYS_PATHID_LASTNMSPC - 1728)) | (1 << (self::SYS_PATH_REVERSE - 1728)) | (1 << (self::SYS_PXQEXTRACT - 1728)) | (1 << (self::SYS_RAW_TO_XSID - 1728)) | (1 << (self::SYS_RID_ORDER - 1728)) | (1 << (self::SYS_ROW_DELTA - 1728)) | (1 << (self::SYS_SC_2_XMLT - 1728)) | (1 << (self::SYS_SYNRCIREDO - 1728)) | (1 << (self::SYSTEM_DEFINED - 1728)) | (1 << (self::SYSTEM - 1728)) | (1 << (self::SYSTIMESTAMP - 1728)) | (1 << (self::SYS_TYPEID - 1728)) | (1 << (self::SYS_UMAKEXML - 1728)) | (1 << (self::SYS_XMLANALYZE - 1728)) | (1 << (self::SYS_XMLCONTAINS - 1728)) | (1 << (self::SYS_XMLCONV - 1728)) | (1 << (self::SYS_XMLEXNSURI - 1728)) | (1 << (self::SYS_XMLGEN - 1728)) | (1 << (self::SYS_XMLI_LOC_ISNODE - 1728)) | (1 << (self::SYS_XMLI_LOC_ISTEXT - 1728)) | (1 << (self::SYS_XMLINSTR - 1728)) | (1 << (self::SYS_XMLLOCATOR_GETSVAL - 1728)))) !== 0) || (((($_la - 1792)) & ~0x3f) === 0 && ((1 << ($_la - 1792)) & ((1 << (self::SYS_XMLNODEID_GETCID - 1792)) | (1 << (self::SYS_XMLNODEID_GETLOCATOR - 1792)) | (1 << (self::SYS_XMLNODEID_GETOKEY - 1792)) | (1 << (self::SYS_XMLNODEID_GETPATHID - 1792)) | (1 << (self::SYS_XMLNODEID_GETPTRID - 1792)) | (1 << (self::SYS_XMLNODEID_GETRID - 1792)) | (1 << (self::SYS_XMLNODEID_GETSVAL - 1792)) | (1 << (self::SYS_XMLNODEID_GETTID - 1792)) | (1 << (self::SYS_XMLNODEID - 1792)) | (1 << (self::SYS_XMLT_2_SC - 1792)) | (1 << (self::SYS_XMLTRANSLATE - 1792)) | (1 << (self::SYS_XMLTYPE2SQL - 1792)) | (1 << (self::SYS_XQ_ASQLCNV - 1792)) | (1 << (self::SYS_XQ_ATOMCNVCHK - 1792)) | (1 << (self::SYS_XQBASEURI - 1792)) | (1 << (self::SYS_XQCASTABLEERRH - 1792)) | (1 << (self::SYS_XQCODEP2STR - 1792)) | (1 << (self::SYS_XQCODEPEQ - 1792)) | (1 << (self::SYS_XQCON2SEQ - 1792)) | (1 << (self::SYS_XQCONCAT - 1792)) | (1 << (self::SYS_XQDELETE - 1792)) | (1 << (self::SYS_XQDFLTCOLATION - 1792)) | (1 << (self::SYS_XQDOC - 1792)) | (1 << (self::SYS_XQDOCURI - 1792)) | (1 << (self::SYS_XQDURDIV - 1792)) | (1 << (self::SYS_XQED4URI - 1792)) | (1 << (self::SYS_XQENDSWITH - 1792)) | (1 << (self::SYS_XQERRH - 1792)) | (1 << (self::SYS_XQERR - 1792)) | (1 << (self::SYS_XQESHTMLURI - 1792)) | (1 << (self::SYS_XQEXLOBVAL - 1792)) | (1 << (self::SYS_XQEXSTWRP - 1792)) | (1 << (self::SYS_XQEXTRACT - 1792)) | (1 << (self::SYS_XQEXTRREF - 1792)) | (1 << (self::SYS_XQEXVAL - 1792)) | (1 << (self::SYS_XQFB2STR - 1792)) | (1 << (self::SYS_XQFNBOOL - 1792)) | (1 << (self::SYS_XQFNCMP - 1792)) | (1 << (self::SYS_XQFNDATIM - 1792)) | (1 << (self::SYS_XQFNLNAME - 1792)) | (1 << (self::SYS_XQFNNM - 1792)) | (1 << (self::SYS_XQFNNSURI - 1792)) | (1 << (self::SYS_XQFNPREDTRUTH - 1792)) | (1 << (self::SYS_XQFNQNM - 1792)) | (1 << (self::SYS_XQFNROOT - 1792)) | (1 << (self::SYS_XQFORMATNUM - 1792)) | (1 << (self::SYS_XQFTCONTAIN - 1792)) | (1 << (self::SYS_XQFUNCR - 1792)) | (1 << (self::SYS_XQGETCONTENT - 1792)) | (1 << (self::SYS_XQINDXOF - 1792)) | (1 << (self::SYS_XQINSERT - 1792)) | (1 << (self::SYS_XQINSPFX - 1792)) | (1 << (self::SYS_XQIRI2URI - 1792)) | (1 << (self::SYS_XQLANG - 1792)) | (1 << (self::SYS_XQLLNMFRMQNM - 1792)) | (1 << (self::SYS_XQMKNODEREF - 1792)) | (1 << (self::SYS_XQNILLED - 1792)) | (1 << (self::SYS_XQNODENAME - 1792)) | (1 << (self::SYS_XQNORMSPACE - 1792)) | (1 << (self::SYS_XQNORMUCODE - 1792)) | (1 << (self::SYS_XQ_NRNG - 1792)) | (1 << (self::SYS_XQNSP4PFX - 1792)) | (1 << (self::SYS_XQNSPFRMQNM - 1792)) | (1 << (self::SYS_XQPFXFRMQNM - 1792)))) !== 0) || (((($_la - 1856)) & ~0x3f) === 0 && ((1 << ($_la - 1856)) & ((1 << (self::SYS_XQ_PKSQL2XML - 1856)) | (1 << (self::SYS_XQPOLYABS - 1856)) | (1 << (self::SYS_XQPOLYADD - 1856)) | (1 << (self::SYS_XQPOLYCEL - 1856)) | (1 << (self::SYS_XQPOLYCSTBL - 1856)) | (1 << (self::SYS_XQPOLYCST - 1856)) | (1 << (self::SYS_XQPOLYDIV - 1856)) | (1 << (self::SYS_XQPOLYFLR - 1856)) | (1 << (self::SYS_XQPOLYMOD - 1856)) | (1 << (self::SYS_XQPOLYMUL - 1856)) | (1 << (self::SYS_XQPOLYRND - 1856)) | (1 << (self::SYS_XQPOLYSQRT - 1856)) | (1 << (self::SYS_XQPOLYSUB - 1856)) | (1 << (self::SYS_XQPOLYUMUS - 1856)) | (1 << (self::SYS_XQPOLYUPLS - 1856)) | (1 << (self::SYS_XQPOLYVEQ - 1856)) | (1 << (self::SYS_XQPOLYVGE - 1856)) | (1 << (self::SYS_XQPOLYVGT - 1856)) | (1 << (self::SYS_XQPOLYVLE - 1856)) | (1 << (self::SYS_XQPOLYVLT - 1856)) | (1 << (self::SYS_XQPOLYVNE - 1856)) | (1 << (self::SYS_XQREF2VAL - 1856)) | (1 << (self::SYS_XQRENAME - 1856)) | (1 << (self::SYS_XQREPLACE - 1856)) | (1 << (self::SYS_XQRESVURI - 1856)) | (1 << (self::SYS_XQRNDHALF2EVN - 1856)) | (1 << (self::SYS_XQRSLVQNM - 1856)) | (1 << (self::SYS_XQRYENVPGET - 1856)) | (1 << (self::SYS_XQRYVARGET - 1856)) | (1 << (self::SYS_XQRYWRP - 1856)) | (1 << (self::SYS_XQSEQ2CON4XC - 1856)) | (1 << (self::SYS_XQSEQ2CON - 1856)) | (1 << (self::SYS_XQSEQDEEPEQ - 1856)) | (1 << (self::SYS_XQSEQINSB - 1856)) | (1 << (self::SYS_XQSEQRM - 1856)) | (1 << (self::SYS_XQSEQRVS - 1856)) | (1 << (self::SYS_XQSEQSUB - 1856)) | (1 << (self::SYS_XQSEQTYPMATCH - 1856)) | (1 << (self::SYS_XQSTARTSWITH - 1856)) | (1 << (self::SYS_XQSTATBURI - 1856)) | (1 << (self::SYS_XQSTR2CODEP - 1856)) | (1 << (self::SYS_XQSTRJOIN - 1856)) | (1 << (self::SYS_XQSUBSTRAFT - 1856)) | (1 << (self::SYS_XQSUBSTRBEF - 1856)) | (1 << (self::SYS_XQTOKENIZE - 1856)) | (1 << (self::SYS_XQTREATAS - 1856)) | (1 << (self::SYS_XQ_UPKXML2SQL - 1856)) | (1 << (self::SYS_XQXFORM - 1856)) | (1 << (self::SYS_XSID_TO_RAW - 1856)) | (1 << (self::SYS_ZMAP_FILTER - 1856)) | (1 << (self::SYS_ZMAP_REFRESH - 1856)) | (1 << (self::TABLE_LOOKUP_BY_NL - 1856)) | (1 << (self::TABLESPACE_NO - 1856)) | (1 << (self::TABLESPACE - 1856)) | (1 << (self::TABLES - 1856)) | (1 << (self::TABLE_STATS - 1856)) | (1 << (self::TABLE - 1856)) | (1 << (self::TABNO - 1856)) | (1 << (self::TAG - 1856)) | (1 << (self::TANH - 1856)) | (1 << (self::TAN - 1856)) | (1 << (self::TBLORIDXPARTNUM - 1856)) | (1 << (self::TEMPFILE - 1856)) | (1 << (self::TEMPLATE - 1856)))) !== 0) || (((($_la - 1920)) & ~0x3f) === 0 && ((1 << ($_la - 1920)) & ((1 << (self::TEMPORARY - 1920)) | (1 << (self::TEMP_TABLE - 1920)) | (1 << (self::TEST - 1920)) | (1 << (self::TEXT - 1920)) | (1 << (self::THAN - 1920)) | (1 << (self::THEN - 1920)) | (1 << (self::THE - 1920)) | (1 << (self::THREAD - 1920)) | (1 << (self::THROUGH - 1920)) | (1 << (self::TIER - 1920)) | (1 << (self::TIES - 1920)) | (1 << (self::TIMEOUT - 1920)) | (1 << (self::TIMESTAMP_LTZ_UNCONSTRAINED - 1920)) | (1 << (self::TIMESTAMP - 1920)) | (1 << (self::TIMESTAMP_TZ_UNCONSTRAINED - 1920)) | (1 << (self::TIMESTAMP_UNCONSTRAINED - 1920)) | (1 << (self::TIMES - 1920)) | (1 << (self::TIME - 1920)) | (1 << (self::TIMEZONE - 1920)) | (1 << (self::TIMEZONE_ABBR - 1920)) | (1 << (self::TIMEZONE_HOUR - 1920)) | (1 << (self::TIMEZONE_MINUTE - 1920)) | (1 << (self::TIMEZONE_OFFSET - 1920)) | (1 << (self::TIMEZONE_REGION - 1920)) | (1 << (self::TIME_ZONE - 1920)) | (1 << (self::TIV_GB - 1920)) | (1 << (self::TIV_SSF - 1920)) | (1 << (self::TO_ACLID - 1920)) | (1 << (self::TO_BINARY_DOUBLE - 1920)) | (1 << (self::TO_BINARY_FLOAT - 1920)) | (1 << (self::TO_BLOB - 1920)) | (1 << (self::TO_CLOB - 1920)) | (1 << (self::TO_DSINTERVAL - 1920)) | (1 << (self::TO_LOB - 1920)) | (1 << (self::TO_MULTI_BYTE - 1920)) | (1 << (self::TO_NCHAR - 1920)) | (1 << (self::TO_NCLOB - 1920)) | (1 << (self::TO_NUMBER - 1920)) | (1 << (self::TOPLEVEL - 1920)) | (1 << (self::TO_SINGLE_BYTE - 1920)) | (1 << (self::TO_TIMESTAMP - 1920)) | (1 << (self::TO_TIMESTAMP_TZ - 1920)) | (1 << (self::TO_TIME - 1920)) | (1 << (self::TO_TIME_TZ - 1920)) | (1 << (self::TO - 1920)) | (1 << (self::TO_YMINTERVAL - 1920)) | (1 << (self::TRACE - 1920)) | (1 << (self::TRACING - 1920)) | (1 << (self::TRACKING - 1920)) | (1 << (self::TRAILING - 1920)) | (1 << (self::TRANSACTION - 1920)) | (1 << (self::TRANSFORM_DISTINCT_AGG - 1920)) | (1 << (self::TRANSITIONAL - 1920)) | (1 << (self::TRANSITION - 1920)) | (1 << (self::TRANSLATE - 1920)) | (1 << (self::TRANSLATION - 1920)) | (1 << (self::TREAT - 1920)) | (1 << (self::TRIGGERS - 1920)) | (1 << (self::TRIGGER - 1920)) | (1 << (self::TRUE - 1920)) | (1 << (self::TRUNCATE - 1920)) | (1 << (self::TRUNC - 1920)) | (1 << (self::TRUSTED - 1920)) | (1 << (self::TRUST - 1920)))) !== 0) || (((($_la - 1984)) & ~0x3f) === 0 && ((1 << ($_la - 1984)) & ((1 << (self::TUNING - 1984)) | (1 << (self::TX - 1984)) | (1 << (self::TYPES - 1984)) | (1 << (self::TYPE - 1984)) | (1 << (self::TZ_OFFSET - 1984)) | (1 << (self::UB2 - 1984)) | (1 << (self::UBA - 1984)) | (1 << (self::UCS2 - 1984)) | (1 << (self::UID - 1984)) | (1 << (self::UNARCHIVED - 1984)) | (1 << (self::UNBOUNDED - 1984)) | (1 << (self::UNBOUND - 1984)) | (1 << (self::UNCONDITIONAL - 1984)) | (1 << (self::UNDER - 1984)) | (1 << (self::UNDO - 1984)) | (1 << (self::UNDROP - 1984)) | (1 << (self::UNIFORM - 1984)) | (1 << (self::UNION - 1984)) | (1 << (self::UNIQUE - 1984)) | (1 << (self::UNISTR - 1984)) | (1 << (self::UNLIMITED - 1984)) | (1 << (self::UNLOAD - 1984)) | (1 << (self::UNLOCK - 1984)) | (1 << (self::UNMATCHED - 1984)) | (1 << (self::UNNEST_INNERJ_DISTINCT_VIEW - 1984)) | (1 << (self::UNNEST_NOSEMIJ_NODISTINCTVIEW - 1984)) | (1 << (self::UNNEST_SEMIJ_VIEW - 1984)) | (1 << (self::UNNEST - 1984)) | (1 << (self::UNPACKED - 1984)) | (1 << (self::UNPIVOT - 1984)) | (1 << (self::UNPLUG - 1984)) | (1 << (self::UNPROTECTED - 1984)) | (1 << (self::UNQUIESCE - 1984)) | (1 << (self::UNRECOVERABLE - 1984)) | (1 << (self::UNRESTRICTED - 1984)) | (1 << (self::UNSUBSCRIBE - 1984)) | (1 << (self::UNTIL - 1984)) | (1 << (self::UNUSABLE - 1984)) | (1 << (self::UNUSED - 1984)) | (1 << (self::UPDATABLE - 1984)) | (1 << (self::UPDATED - 1984)) | (1 << (self::UPDATE - 1984)) | (1 << (self::UPDATEXML - 1984)) | (1 << (self::UPD_INDEXES - 1984)) | (1 << (self::UPD_JOININDEX - 1984)) | (1 << (self::UPGRADE - 1984)) | (1 << (self::UPPER - 1984)) | (1 << (self::UPSERT - 1984)) | (1 << (self::UROWID - 1984)) | (1 << (self::USABLE - 1984)) | (1 << (self::USAGE - 1984)) | (1 << (self::USE_ANTI - 1984)) | (1 << (self::USE_CONCAT - 1984)) | (1 << (self::USE_CUBE - 1984)) | (1 << (self::USE_HASH_AGGREGATION - 1984)) | (1 << (self::USE_HASH_GBY_FOR_PUSHDOWN - 1984)) | (1 << (self::USE_HASH - 1984)) | (1 << (self::USE_HIDDEN_PARTITIONS - 1984)) | (1 << (self::USE_INVISIBLE_INDEXES - 1984)) | (1 << (self::USE_MERGE_CARTESIAN - 1984)) | (1 << (self::USE_MERGE - 1984)) | (1 << (self::USE_NL - 1984)) | (1 << (self::USE_NL_WITH_INDEX - 1984)) | (1 << (self::USE_PRIVATE_OUTLINES - 1984)))) !== 0) || (((($_la - 2048)) & ~0x3f) === 0 && ((1 << ($_la - 2048)) & ((1 << (self::USER_DATA - 2048)) | (1 << (self::USER_DEFINED - 2048)) | (1 << (self::USERENV - 2048)) | (1 << (self::USERGROUP - 2048)) | (1 << (self::USER_RECYCLEBIN - 2048)) | (1 << (self::USERS - 2048)) | (1 << (self::USER_TABLESPACES - 2048)) | (1 << (self::USER - 2048)) | (1 << (self::USE_SEMI - 2048)) | (1 << (self::USE_STORED_OUTLINES - 2048)) | (1 << (self::USE_TTT_FOR_GSETS - 2048)) | (1 << (self::USE - 2048)) | (1 << (self::USE_VECTOR_AGGREGATION - 2048)) | (1 << (self::USE_WEAK_NAME_RESL - 2048)) | (1 << (self::USING_NO_EXPAND - 2048)) | (1 << (self::USING - 2048)) | (1 << (self::UTF16BE - 2048)) | (1 << (self::UTF16LE - 2048)) | (1 << (self::UTF32 - 2048)) | (1 << (self::UTF8 - 2048)) | (1 << (self::V1 - 2048)) | (1 << (self::V2 - 2048)) | (1 << (self::VALIDATE - 2048)) | (1 << (self::VALIDATION - 2048)) | (1 << (self::VALID_TIME_END - 2048)) | (1 << (self::VALUES - 2048)) | (1 << (self::VALUE - 2048)) | (1 << (self::VARCHAR2 - 2048)) | (1 << (self::VARCHAR - 2048)) | (1 << (self::VARIABLE - 2048)) | (1 << (self::VAR_POP - 2048)) | (1 << (self::VARRAYS - 2048)) | (1 << (self::VARRAY - 2048)) | (1 << (self::VAR_SAMP - 2048)) | (1 << (self::VARYING - 2048)) | (1 << (self::VECTOR_READ_TRACE - 2048)) | (1 << (self::VECTOR_READ - 2048)) | (1 << (self::VECTOR_TRANSFORM_DIMS - 2048)) | (1 << (self::VECTOR_TRANSFORM_FACT - 2048)) | (1 << (self::VECTOR_TRANSFORM - 2048)) | (1 << (self::VERIFIER - 2048)) | (1 << (self::VERIFY - 2048)) | (1 << (self::VERSIONING - 2048)) | (1 << (self::VERSIONS_ENDSCN - 2048)) | (1 << (self::VERSIONS_ENDTIME - 2048)) | (1 << (self::VERSIONS_OPERATION - 2048)) | (1 << (self::VERSIONS_STARTSCN - 2048)) | (1 << (self::VERSIONS_STARTTIME - 2048)) | (1 << (self::VERSIONS - 2048)) | (1 << (self::VERSIONS_XID - 2048)) | (1 << (self::VERSION - 2048)) | (1 << (self::VIEW - 2048)) | (1 << (self::VIOLATION - 2048)) | (1 << (self::VIRTUAL - 2048)) | (1 << (self::VISIBILITY - 2048)) | (1 << (self::VISIBLE - 2048)) | (1 << (self::VOLUME - 2048)) | (1 << (self::VSIZE - 2048)) | (1 << (self::WAIT - 2048)) | (1 << (self::WALLET - 2048)) | (1 << (self::WARNING - 2048)) | (1 << (self::WEEKS - 2048)) | (1 << (self::WEEK - 2048)) | (1 << (self::WELLFORMED - 2048)))) !== 0) || (((($_la - 2112)) & ~0x3f) === 0 && ((1 << ($_la - 2112)) & ((1 << (self::WHENEVER - 2112)) | (1 << (self::WHEN - 2112)) | (1 << (self::WHERE - 2112)) | (1 << (self::WHILE - 2112)) | (1 << (self::WHITESPACE - 2112)) | (1 << (self::WIDTH_BUCKET - 2112)) | (1 << (self::WITHIN - 2112)) | (1 << (self::WITHOUT - 2112)) | (1 << (self::WITH_PLSQL - 2112)) | (1 << (self::WITH - 2112)) | (1 << (self::WORK - 2112)) | (1 << (self::WRAPPED - 2112)) | (1 << (self::WRAPPER - 2112)) | (1 << (self::WRITE - 2112)) | (1 << (self::XDB_FASTPATH_INSERT - 2112)) | (1 << (self::XDB - 2112)) | (1 << (self::X_DYN_PRUNE - 2112)) | (1 << (self::XID - 2112)) | (1 << (self::XML2OBJECT - 2112)) | (1 << (self::XMLAGG - 2112)) | (1 << (self::XMLATTRIBUTES - 2112)) | (1 << (self::XMLCAST - 2112)) | (1 << (self::XMLCDATA - 2112)) | (1 << (self::XMLCOLATTVAL - 2112)) | (1 << (self::XMLCOMMENT - 2112)) | (1 << (self::XMLCONCAT - 2112)) | (1 << (self::XMLDIFF - 2112)) | (1 << (self::XML_DML_RWT_STMT - 2112)) | (1 << (self::XMLELEMENT - 2112)) | (1 << (self::XMLEXISTS2 - 2112)) | (1 << (self::XMLEXISTS - 2112)) | (1 << (self::XMLFOREST - 2112)) | (1 << (self::XMLINDEX - 2112)) | (1 << (self::XMLINDEX_REWRITE_IN_SELECT - 2112)) | (1 << (self::XMLINDEX_REWRITE - 2112)) | (1 << (self::XMLINDEX_SEL_IDX_TBL - 2112)) | (1 << (self::XMLISNODE - 2112)) | (1 << (self::XMLISVALID - 2112)) | (1 << (self::XMLNAMESPACES - 2112)) | (1 << (self::XMLPARSE - 2112)) | (1 << (self::XMLPATCH - 2112)) | (1 << (self::XMLPI - 2112)) | (1 << (self::XMLQUERYVAL - 2112)) | (1 << (self::XMLQUERY - 2112)) | (1 << (self::XMLROOT - 2112)) | (1 << (self::XMLSCHEMA - 2112)) | (1 << (self::XMLSERIALIZE - 2112)) | (1 << (self::XMLTABLE - 2112)) | (1 << (self::XMLTRANSFORMBLOB - 2112)) | (1 << (self::XMLTRANSFORM - 2112)) | (1 << (self::XMLTYPE - 2112)) | (1 << (self::XML - 2112)) | (1 << (self::XPATHTABLE - 2112)) | (1 << (self::XS_SYS_CONTEXT - 2112)) | (1 << (self::XS - 2112)) | (1 << (self::XTRANSPORT - 2112)) | (1 << (self::YEARS - 2112)) | (1 << (self::YEAR - 2112)) | (1 << (self::YES - 2112)) | (1 << (self::YMINTERVAL_UNCONSTRAINED - 2112)) | (1 << (self::ZONEMAP - 2112)) | (1 << (self::ZONE - 2112)) | (1 << (self::PREDICTION - 2112)) | (1 << (self::PREDICTION_BOUNDS - 2112)))) !== 0) || (((($_la - 2176)) & ~0x3f) === 0 && ((1 << ($_la - 2176)) & ((1 << (self::PREDICTION_COST - 2176)) | (1 << (self::PREDICTION_DETAILS - 2176)) | (1 << (self::PREDICTION_PROBABILITY - 2176)) | (1 << (self::PREDICTION_SET - 2176)) | (1 << (self::CUME_DIST - 2176)) | (1 << (self::DENSE_RANK - 2176)) | (1 << (self::LISTAGG - 2176)) | (1 << (self::PERCENT_RANK - 2176)) | (1 << (self::PERCENTILE_CONT - 2176)) | (1 << (self::PERCENTILE_DISC - 2176)) | (1 << (self::RANK - 2176)) | (1 << (self::AVG - 2176)) | (1 << (self::CORR - 2176)) | (1 << (self::COVAR_ - 2176)) | (1 << (self::DECODE - 2176)) | (1 << (self::LAG - 2176)) | (1 << (self::LEAD - 2176)) | (1 << (self::MAX - 2176)) | (1 << (self::MEDIAN - 2176)) | (1 << (self::MIN - 2176)) | (1 << (self::NTILE - 2176)) | (1 << (self::NVL - 2176)) | (1 << (self::RATIO_TO_REPORT - 2176)) | (1 << (self::REGR_ - 2176)) | (1 << (self::ROUND - 2176)) | (1 << (self::ROW_NUMBER - 2176)) | (1 << (self::SUBSTR - 2176)) | (1 << (self::TO_CHAR - 2176)) | (1 << (self::TRIM - 2176)) | (1 << (self::SUM - 2176)) | (1 << (self::STDDEV - 2176)) | (1 << (self::VAR_ - 2176)) | (1 << (self::VARIANCE - 2176)) | (1 << (self::LEAST - 2176)) | (1 << (self::GREATEST - 2176)) | (1 << (self::TO_DATE - 2176)) | (1 << (self::NATIONAL_CHAR_STRING_LIT - 2176)) | (1 << (self::BIT_STRING_LIT - 2176)) | (1 << (self::HEX_STRING_LIT - 2176)) | (1 << (self::DOUBLE_PERIOD - 2176)) | (1 << (self::PERIOD - 2176)) | (1 << (self::UNSIGNED_INTEGER - 2176)) | (1 << (self::APPROXIMATE_NUM_LIT - 2176)) | (1 << (self::CHAR_STRING - 2176)) | (1 << (self::DELIMITED_ID - 2176)) | (1 << (self::PERCENT - 2176)) | (1 << (self::AMPERSAND - 2176)) | (1 << (self::LEFT_PAREN - 2176)) | (1 << (self::RIGHT_PAREN - 2176)) | (1 << (self::DOUBLE_ASTERISK - 2176)) | (1 << (self::ASTERISK - 2176)) | (1 << (self::PLUS_SIGN - 2176)) | (1 << (self::MINUS_SIGN - 2176)) | (1 << (self::COMMA - 2176)) | (1 << (self::SOLIDUS - 2176)) | (1 << (self::AT_SIGN - 2176)) | (1 << (self::ASSIGN_OP - 2176)) | (1 << (self::BINDVAR - 2176)) | (1 << (self::NOT_EQUAL_OP - 2176)) | (1 << (self::CARRET_OPERATOR_PART - 2176)) | (1 << (self::TILDE_OPERATOR_PART - 2176)) | (1 << (self::EXCLAMATION_OPERATOR_PART - 2176)) | (1 << (self::GREATER_THAN_OP - 2176)) | (1 << (self::LESS_THAN_OP - 2176)))) !== 0) || (((($_la - 2240)) & ~0x3f) === 0 && ((1 << ($_la - 2240)) & ((1 << (self::COLON - 2240)) | (1 << (self::BAR - 2240)) | (1 << (self::EQUALS_OP - 2240)) | (1 << (self::LEFT_BRACKET - 2240)) | (1 << (self::RIGHT_BRACKET - 2240)) | (1 << (self::INTRODUCER - 2240)) | (1 << (self::SINGLE_LINE_COMMENT - 2240)) | (1 << (self::MULTI_LINE_COMMENT - 2240)) | (1 << (self::REMARK_COMMENT - 2240)) | (1 << (self::PROMPT_MESSAGE - 2240)) | (1 << (self::START_CMD - 2240)) | (1 << (self::REGULAR_ID - 2240)) | (1 << (self::SPACES - 2240)))) !== 0));
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function assignment_statement(): Context\Assignment_statementContext
    {
        $localContext = new Context\Assignment_statementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 958, self::RULE_assignment_statement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(8527);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ABORT:
                case self::ABS:
                case self::ACCESS:
                case self::ACCESSED:
                case self::ACCOUNT:
                case self::ACL:
                case self::ACOS:
                case self::ACTION:
                case self::ACTIONS:
                case self::ACTIVATE:
                case self::ACTIVE:
                case self::ACTIVE_COMPONENT:
                case self::ACTIVE_DATA:
                case self::ACTIVE_FUNCTION:
                case self::ACTIVE_TAG:
                case self::ACTIVITY:
                case self::ADAPTIVE_PLAN:
                case self::ADD:
                case self::ADD_COLUMN:
                case self::ADD_GROUP:
                case self::ADD_MONTHS:
                case self::ADJ_DATE:
                case self::ADMIN:
                case self::ADMINISTER:
                case self::ADMINISTRATOR:
                case self::ADVANCED:
                case self::ADVISE:
                case self::ADVISOR:
                case self::AFD_DISKSTRING:
                case self::AFTER:
                case self::AGENT:
                case self::AGGREGATE:
                case self::A_LETTER:
                case self::ALIAS:
                case self::ALLOCATE:
                case self::ALLOW:
                case self::ALL_ROWS:
                case self::ALWAYS:
                case self::ANALYZE:
                case self::ANCILLARY:
                case self::AND_EQUAL:
                case self::ANOMALY:
                case self::ANSI_REARCH:
                case self::ANTIJOIN:
                case self::ANYSCHEMA:
                case self::APPEND:
                case self::APPENDCHILDXML:
                case self::APPEND_VALUES:
                case self::APPLICATION:
                case self::APPLY:
                case self::APPROX_COUNT_DISTINCT:
                case self::ARCHIVAL:
                case self::ARCHIVE:
                case self::ARCHIVED:
                case self::ARCHIVELOG:
                case self::ARRAY:
                case self::ASCII:
                case self::ASCIISTR:
                case self::ASIN:
                case self::ASIS:
                case self::ASSEMBLY:
                case self::ASSIGN:
                case self::ASSOCIATE:
                case self::ASYNC:
                case self::ASYNCHRONOUS:
                case self::ATAN2:
                case self::ATAN:
                case self::AT:
                case self::ATTRIBUTE:
                case self::ATTRIBUTES:
                case self::AUTHENTICATED:
                case self::AUTHENTICATION:
                case self::AUTHID:
                case self::AUTHORIZATION:
                case self::AUTOALLOCATE:
                case self::AUTO:
                case self::AUTOEXTEND:
                case self::AUTO_LOGIN:
                case self::AUTOMATIC:
                case self::AUTONOMOUS_TRANSACTION:
                case self::AUTO_REOPTIMIZE:
                case self::AVAILABILITY:
                case self::AVRO:
                case self::BACKGROUND:
                case self::BACKUP:
                case self::BASIC:
                case self::BASICFILE:
                case self::BATCH:
                case self::BATCHSIZE:
                case self::BATCH_TABLE_ACCESS_BY_ROWID:
                case self::BECOME:
                case self::BEFORE:
                case self::BEGIN:
                case self::BEGINNING:
                case self::BEGIN_OUTLINE_DATA:
                case self::BEHALF:
                case self::BEQUEATH:
                case self::BFILE:
                case self::BFILENAME:
                case self::BIGFILE:
                case self::BINARY:
                case self::BINARY_DOUBLE:
                case self::BINARY_DOUBLE_INFINITY:
                case self::BINARY_DOUBLE_NAN:
                case self::BINARY_FLOAT:
                case self::BINARY_FLOAT_INFINITY:
                case self::BINARY_FLOAT_NAN:
                case self::BINARY_INTEGER:
                case self::BIND_AWARE:
                case self::BINDING:
                case self::BIN_TO_NUM:
                case self::BITAND:
                case self::BITMAP_AND:
                case self::BITMAP:
                case self::BITMAPS:
                case self::BITMAP_TREE:
                case self::BITS:
                case self::BLOB:
                case self::BLOCK:
                case self::BLOCK_RANGE:
                case self::BLOCKS:
                case self::BLOCKSIZE:
                case self::BODY:
                case self::BOOLEAN:
                case self::BOTH:
                case self::BOUND:
                case self::BRANCH:
                case self::BREADTH:
                case self::BROADCAST:
                case self::BSON:
                case self::BUFFER:
                case self::BUFFER_CACHE:
                case self::BUFFER_POOL:
                case self::BUILD:
                case self::BULK:
                case self::BYPASS_RECURSIVE_CHECK:
                case self::BYPASS_UJVC:
                case self::BYTE:
                case self::CACHE:
                case self::CACHE_CB:
                case self::CACHE_INSTANCES:
                case self::CACHE_TEMP_TABLE:
                case self::CACHING:
                case self::CALCULATED:
                case self::CALLBACK:
                case self::CALL:
                case self::CANCEL:
                case self::CAPACITY:
                case self::CARDINALITY:
                case self::CASCADE:
                case self::CASE:
                case self::CAST:
                case self::CATEGORY:
                case self::CDBDEFAULT:
                case self::CEIL:
                case self::CELL_FLASH_CACHE:
                case self::CERTIFICATE:
                case self::CFILE:
                case self::CHAINED:
                case self::CHANGE:
                case self::CHANGE_DUPKEY_ERROR_INDEX:
                case self::CHARACTER:
                case self::CHAR:
                case self::CHAR_CS:
                case self::CHARTOROWID:
                case self::CHECK_ACL_REWRITE:
                case self::CHECKPOINT:
                case self::CHILD:
                case self::CHOOSE:
                case self::CHR:
                case self::CHUNK:
                case self::CLASS:
                case self::CLASSIFIER:
                case self::CLEANUP:
                case self::CLEAR:
                case self::C_LETTER:
                case self::CLIENT:
                case self::CLOB:
                case self::CLONE:
                case self::CLOSE_CACHED_OPEN_CURSORS:
                case self::CLOSE:
                case self::CLUSTER_BY_ROWID:
                case self::CLUSTER:
                case self::CLUSTER_DETAILS:
                case self::CLUSTER_DISTANCE:
                case self::CLUSTER_ID:
                case self::CLUSTERING:
                case self::CLUSTERING_FACTOR:
                case self::CLUSTER_PROBABILITY:
                case self::CLUSTER_SET:
                case self::COALESCE:
                case self::COALESCE_SQ:
                case self::COARSE:
                case self::CO_AUTH_IND:
                case self::COLD:
                case self::COLLECT:
                case self::COLUMNAR:
                case self::COLUMN_AUTH_INDICATOR:
                case self::COLUMN:
                case self::COLUMNS:
                case self::COLUMN_STATS:
                case self::COLUMN_VALUE:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMMITTED:
                case self::COMMON_DATA:
                case self::COMPACT:
                case self::COMPATIBILITY:
                case self::COMPILE:
                case self::COMPLETE:
                case self::COMPLIANCE:
                case self::COMPONENT:
                case self::COMPONENTS:
                case self::COMPOSE:
                case self::COMPOSITE:
                case self::COMPOSITE_LIMIT:
                case self::COMPOUND:
                case self::COMPUTE:
                case self::CONCAT:
                case self::CON_DBID_TO_ID:
                case self::CONDITIONAL:
                case self::CONDITION:
                case self::CONFIRM:
                case self::CONFORMING:
                case self::CON_GUID_TO_ID:
                case self::CON_ID:
                case self::CON_NAME_TO_ID:
                case self::CONNECT_BY_CB_WHR_ONLY:
                case self::CONNECT_BY_COMBINE_SW:
                case self::CONNECT_BY_COST_BASED:
                case self::CONNECT_BY_ELIM_DUPS:
                case self::CONNECT_BY_FILTERING:
                case self::CONNECT_BY_ISCYCLE:
                case self::CONNECT_BY_ISLEAF:
                case self::CONNECT_BY_ROOT:
                case self::CONNECT_TIME:
                case self::CONSIDER:
                case self::CONSISTENT:
                case self::CONSTANT:
                case self::CONST:
                case self::CONSTRAINT:
                case self::CONSTRAINTS:
                case self::CONSTRUCTOR:
                case self::CONTAINER:
                case self::CONTAINER_DATA:
                case self::CONTAINERS:
                case self::CONTENT:
                case self::CONTENTS:
                case self::CONTEXT:
                case self::CONTINUE:
                case self::CONTROLFILE:
                case self::CON_UID_TO_ID:
                case self::CONVERT:
                case self::COOKIE:
                case self::COPY:
                case self::CORR_K:
                case self::CORR_S:
                case self::CORRUPTION:
                case self::CORRUPT_XID_ALL:
                case self::CORRUPT_XID:
                case self::COS:
                case self::COSH:
                case self::COST:
                case self::COST_XML_QUERY_REWRITE:
                case self::COUNT:
                case self::COVAR_POP:
                case self::COVAR_SAMP:
                case self::CPU_COSTING:
                case self::CPU_PER_CALL:
                case self::CPU_PER_SESSION:
                case self::CRASH:
                case self::CREATE_FILE_DEST:
                case self::CREATE_STORED_OUTLINES:
                case self::CREATION:
                case self::CREDENTIAL:
                case self::CRITICAL:
                case self::CROSS:
                case self::CROSSEDITION:
                case self::CSCONVERT:
                case self::CUBE_AJ:
                case self::CUBE:
                case self::CUBE_GB:
                case self::CUBE_SJ:
                case self::CUME_DISTM:
                case self::CURRENT:
                case self::CURRENT_DATE:
                case self::CURRENT_SCHEMA:
                case self::CURRENT_TIME:
                case self::CURRENT_TIMESTAMP:
                case self::CURRENT_USER:
                case self::CURRENTV:
                case self::CURSOR:
                case self::CURSOR_SHARING_EXACT:
                case self::CURSOR_SPECIFIC_SEGMENT:
                case self::CUSTOMDATUM:
                case self::CV:
                case self::CYCLE:
                case self::DANGLING:
                case self::DATABASE:
                case self::DATA:
                case self::DATAFILE:
                case self::DATAFILES:
                case self::DATAMOVEMENT:
                case self::DATAOBJNO:
                case self::DATAOBJ_TO_MAT_PARTITION:
                case self::DATAOBJ_TO_PARTITION:
                case self::DATAPUMP:
                case self::DATA_SECURITY_REWRITE_LIMIT:
                case self::DATE_MODE:
                case self::DAY:
                case self::DAYS:
                case self::DBA:
                case self::DBA_RECYCLEBIN:
                case self::DBMS_STATS:
                case self::DB_ROLE_CHANGE:
                case self::DBTIMEZONE:
                case self::DB_UNIQUE_NAME:
                case self::DB_VERSION:
                case self::DDL:
                case self::DEALLOCATE:
                case self::DEBUG:
                case self::DEBUGGER:
                case self::DEC:
                case self::DECIMAL:
                case self::DECLARE:
                case self::DECOMPOSE:
                case self::DECORRELATE:
                case self::DECR:
                case self::DECREMENT:
                case self::DECRYPT:
                case self::DEDUPLICATE:
                case self::DEFAULTS:
                case self::DEFERRABLE:
                case self::DEFERRED:
                case self::DEFINED:
                case self::DEFINE:
                case self::DEFINER:
                case self::DEGREE:
                case self::DELAY:
                case self::DELEGATE:
                case self::DELETE_ALL:
                case self::DELETE:
                case self::DELETEXML:
                case self::DEMAND:
                case self::DENSE_RANKM:
                case self::DEPENDENT:
                case self::DEPTH:
                case self::DEQUEUE:
                case self::DEREF:
                case self::DEREF_NO_REWRITE:
                case self::DESTROY:
                case self::DETACHED:
                case self::DETERMINES:
                case self::DETERMINISTIC:
                case self::DICTIONARY:
                case self::DIMENSION:
                case self::DIMENSIONS:
                case self::DIRECT_LOAD:
                case self::DIRECTORY:
                case self::DIRECT_PATH:
                case self::DISABLE_ALL:
                case self::DISABLE:
                case self::DISABLE_PARALLEL_DML:
                case self::DISABLE_PRESET:
                case self::DISABLE_RPKE:
                case self::DISALLOW:
                case self::DISASSOCIATE:
                case self::DISCARD:
                case self::DISCONNECT:
                case self::DISK:
                case self::DISKGROUP:
                case self::DISKS:
                case self::DISMOUNT:
                case self::DISTINGUISHED:
                case self::DISTRIBUTED:
                case self::DISTRIBUTE:
                case self::DML:
                case self::DML_UPDATE:
                case self::DOCFIDELITY:
                case self::DOCUMENT:
                case self::DOMAIN_INDEX_FILTER:
                case self::DOMAIN_INDEX_NO_SORT:
                case self::DOMAIN_INDEX_SORT:
                case self::DOUBLE:
                case self::DOWNGRADE:
                case self::DRIVING_SITE:
                case self::DROP_COLUMN:
                case self::DROP_GROUP:
                case self::DSINTERVAL_UNCONSTRAINED:
                case self::DST_UPGRADE_INSERT_CONV:
                case self::DUMP:
                case self::DUPLICATE:
                case self::DV:
                case self::DYNAMIC:
                case self::DYNAMIC_SAMPLING:
                case self::DYNAMIC_SAMPLING_EST_CDN:
                case self::EACH:
                case self::EDITIONABLE:
                case self::EDITION:
                case self::EDITIONING:
                case self::EDITIONS:
                case self::ELEMENT:
                case self::ELIM_GROUPBY:
                case self::ELIMINATE_JOIN:
                case self::ELIMINATE_OBY:
                case self::ELIMINATE_OUTER_JOIN:
                case self::EM:
                case self::EMPTY_BLOB:
                case self::EMPTY_CLOB:
                case self::EMPTY:
                case self::ENABLE_ALL:
                case self::ENABLE:
                case self::ENABLE_PARALLEL_DML:
                case self::ENABLE_PRESET:
                case self::ENCODING:
                case self::ENCRYPT:
                case self::ENCRYPTION:
                case self::END_OUTLINE_DATA:
                case self::ENFORCED:
                case self::ENFORCE:
                case self::ENQUEUE:
                case self::ENTERPRISE:
                case self::ENTITYESCAPING:
                case self::ENTRY:
                case self::EQUIPART:
                case self::ERR:
                case self::ERROR_ARGUMENT:
                case self::ERROR:
                case self::ERROR_ON_OVERLAP_TIME:
                case self::ERRORS:
                case self::ESCAPE:
                case self::ESTIMATE:
                case self::EVAL:
                case self::EVALNAME:
                case self::EVALUATE:
                case self::EVALUATION:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCEPT:
                case self::EXCEPTION:
                case self::EXCEPTION_INIT:
                case self::EXCEPTIONS:
                case self::EXCHANGE:
                case self::EXCLUDE:
                case self::EXCLUDING:
                case self::EXECUTE:
                case self::EXEMPT:
                case self::EXISTING:
                case self::EXISTS:
                case self::EXISTSNODE:
                case self::EXIT:
                case self::EXPAND_GSET_TO_UNION:
                case self::EXPAND_TABLE:
                case self::EXP:
                case self::EXPIRE:
                case self::EXPLAIN:
                case self::EXPLOSION:
                case self::EXPORT:
                case self::EXPR_CORR_CHECK:
                case self::EXPRESS:
                case self::EXTENDS:
                case self::EXTENT:
                case self::EXTENTS:
                case self::EXTERNAL:
                case self::EXTERNALLY:
                case self::EXTRACTCLOBXML:
                case self::EXTRACT:
                case self::EXTRACTVALUE:
                case self::EXTRA:
                case self::FACILITY:
                case self::FACT:
                case self::FACTOR:
                case self::FACTORIZE_JOIN:
                case self::FAILED:
                case self::FAILED_LOGIN_ATTEMPTS:
                case self::FAILGROUP:
                case self::FAILOVER:
                case self::FAILURE:
                case self::FALSE:
                case self::FAMILY:
                case self::FAR:
                case self::FAST:
                case self::FASTSTART:
                case self::FBTSCAN:
                case self::FEATURE_DETAILS:
                case self::FEATURE_ID:
                case self::FEATURE_SET:
                case self::FEATURE_VALUE:
                case self::FETCH:
                case self::FILE:
                case self::FILE_NAME_CONVERT:
                case self::FILESYSTEM_LIKE_LOGGING:
                case self::FILTER:
                case self::FINAL:
                case self::FINE:
                case self::FINISH:
                case self::FIRST:
                case self::FIRSTM:
                case self::FIRST_ROWS:
                case self::FIRST_VALUE:
                case self::FIXED_VIEW_DATA:
                case self::FLAGGER:
                case self::FLASHBACK:
                case self::FLASH_CACHE:
                case self::FLOAT:
                case self::FLOB:
                case self::FLOOR:
                case self::FLUSH:
                case self::FOLDER:
                case self::FOLLOWING:
                case self::FOLLOWS:
                case self::FORALL:
                case self::FORCE:
                case self::FORCE_XML_QUERY_REWRITE:
                case self::FOREIGN:
                case self::FOREVER:
                case self::FORMAT:
                case self::FORWARD:
                case self::FRAGMENT_NUMBER:
                case self::FREELIST:
                case self::FREELISTS:
                case self::FREEPOOLS:
                case self::FRESH:
                case self::FROM_TZ:
                case self::FULL:
                case self::FULL_OUTER_JOIN_TO_OUTER:
                case self::FUNCTION:
                case self::FUNCTIONS:
                case self::GATHER_OPTIMIZER_STATISTICS:
                case self::GATHER_PLAN_STATISTICS:
                case self::GBY_CONC_ROLLUP:
                case self::GBY_PUSHDOWN:
                case self::GENERATED:
                case self::GET:
                case self::GLOBAL:
                case self::GLOBALLY:
                case self::GLOBAL_NAME:
                case self::GLOBAL_TOPIC_ENABLED:
                case self::GROUP_BY:
                case self::GROUP_ID:
                case self::GROUPING:
                case self::GROUPING_ID:
                case self::GROUPS:
                case self::GUARANTEED:
                case self::GUARANTEE:
                case self::GUARD:
                case self::HASH_AJ:
                case self::HASH:
                case self::HASHKEYS:
                case self::HASH_SJ:
                case self::HEADER:
                case self::HEAP:
                case self::HELP:
                case self::HEXTORAW:
                case self::HEXTOREF:
                case self::HIDDEN_KEYWORD:
                case self::HIDE:
                case self::HIERARCHY:
                case self::HIGH:
                case self::HINTSET_BEGIN:
                case self::HINTSET_END:
                case self::HOT:
                case self::HOUR:
                case self::HWM_BROKERED:
                case self::HYBRID:
                case self::IDENTIFIER:
                case self::IDENTITY:
                case self::IDGENERATORS:
                case self::ID:
                case self::IDLE_TIME:
                case self::IF:
                case self::IGNORE:
                case self::IGNORE_OPTIM_EMBEDDED_HINTS:
                case self::IGNORE_ROW_ON_DUPKEY_INDEX:
                case self::IGNORE_WHERE_CLAUSE:
                case self::ILM:
                case self::IMMEDIATE:
                case self::IMPACT:
                case self::IMPORT:
                case self::INACTIVE:
                case self::INCLUDE:
                case self::INCLUDE_VERSION:
                case self::INCLUDING:
                case self::INCREMENTAL:
                case self::INCREMENT:
                case self::INCR:
                case self::INDENT:
                case self::INDEX_ASC:
                case self::INDEX_COMBINE:
                case self::INDEX_DESC:
                case self::INDEXED:
                case self::INDEXES:
                case self::INDEX_FFS:
                case self::INDEX_FILTER:
                case self::INDEXING:
                case self::INDEX_JOIN:
                case self::INDEX_ROWS:
                case self::INDEX_RRS:
                case self::INDEX_RS_ASC:
                case self::INDEX_RS_DESC:
                case self::INDEX_RS:
                case self::INDEX_SCAN:
                case self::INDEX_SKIP_SCAN:
                case self::INDEX_SS_ASC:
                case self::INDEX_SS_DESC:
                case self::INDEX_SS:
                case self::INDEX_STATS:
                case self::INDEXTYPE:
                case self::INDEXTYPES:
                case self::INDICATOR:
                case self::INDICES:
                case self::INFINITE:
                case self::INFORMATIONAL:
                case self::INHERIT:
                case self::INITCAP:
                case self::INITIAL:
                case self::INITIALIZED:
                case self::INITIALLY:
                case self::INITRANS:
                case self::INLINE:
                case self::INLINE_XMLTYPE_NT:
                case self::INMEMORY:
                case self::IN_MEMORY_METADATA:
                case self::INMEMORY_PRUNING:
                case self::INNER:
                case self::INOUT:
                case self::INPLACE:
                case self::INSERTCHILDXMLAFTER:
                case self::INSERTCHILDXMLBEFORE:
                case self::INSERTCHILDXML:
                case self::INSERTXMLAFTER:
                case self::INSERTXMLBEFORE:
                case self::INSTANCE:
                case self::INSTANCES:
                case self::INSTANTIABLE:
                case self::INSTANTLY:
                case self::INSTEAD:
                case self::INSTR2:
                case self::INSTR4:
                case self::INSTRB:
                case self::INSTRC:
                case self::INSTR:
                case self::INTEGER:
                case self::INTERLEAVED:
                case self::INTERMEDIATE:
                case self::INTERNAL_CONVERT:
                case self::INTERNAL_USE:
                case self::INTERPRETED:
                case self::INTERVAL:
                case self::INT:
                case self::INVALIDATE:
                case self::INVISIBLE:
                case self::IN_XQUERY:
                case self::ISOLATION:
                case self::ISOLATION_LEVEL:
                case self::ITERATE:
                case self::ITERATION_NUMBER:
                case self::JAVA:
                case self::JOB:
                case self::JOIN:
                case self::JSON_ARRAYAGG:
                case self::JSON_ARRAY:
                case self::JSON_EQUAL:
                case self::JSON_EXISTS2:
                case self::JSON_EXISTS:
                case self::JSONGET:
                case self::JSON:
                case self::JSON_OBJECTAGG:
                case self::JSON_OBJECT:
                case self::JSONPARSE:
                case self::JSON_QUERY:
                case self::JSON_SERIALIZE:
                case self::JSON_TABLE:
                case self::JSON_TEXTCONTAINS2:
                case self::JSON_TEXTCONTAINS:
                case self::JSON_VALUE:
                case self::KEEP_DUPLICATES:
                case self::KEEP:
                case self::KERBEROS:
                case self::KEY:
                case self::KEY_LENGTH:
                case self::KEYSIZE:
                case self::KEYS:
                case self::KEYSTORE:
                case self::KILL:
                case self::LABEL:
                case self::LANGUAGE:
                case self::LAST_DAY:
                case self::LAST:
                case self::LAST_VALUE:
                case self::LATERAL:
                case self::LAX:
                case self::LAYER:
                case self::LDAP_REGISTRATION_ENABLED:
                case self::LDAP_REGISTRATION:
                case self::LDAP_REG_SYNC_INTERVAL:
                case self::LEADING:
                case self::LEFT:
                case self::LENGTH2:
                case self::LENGTH4:
                case self::LENGTHB:
                case self::LENGTHC:
                case self::LENGTH:
                case self::LESS:
                case self::LEVEL:
                case self::LEVELS:
                case self::LIBRARY:
                case self::LIFECYCLE:
                case self::LIFE:
                case self::LIFETIME:
                case self::LIKE2:
                case self::LIKE4:
                case self::LIKEC:
                case self::LIKE_EXPAND:
                case self::LIMIT:
                case self::LINEAR:
                case self::LINK:
                case self::LIST:
                case self::LN:
                case self::LNNVL:
                case self::LOAD:
                case self::LOB:
                case self::LOBNVL:
                case self::LOBS:
                case self::LOCAL_INDEXES:
                case self::LOCAL:
                case self::LOCALTIME:
                case self::LOCALTIMESTAMP:
                case self::LOCATION:
                case self::LOCATOR:
                case self::LOCKED:
                case self::LOCKING:
                case self::LOGFILE:
                case self::LOGFILES:
                case self::LOGGING:
                case self::LOGICAL:
                case self::LOGICAL_READS_PER_CALL:
                case self::LOGICAL_READS_PER_SESSION:
                case self::LOG:
                case self::LOGMINING:
                case self::LOGOFF:
                case self::LOGON:
                case self::LOG_READ_ONLY_VIOLATIONS:
                case self::LONG:
                case self::LOOP:
                case self::LOWER:
                case self::LOW:
                case self::LPAD:
                case self::LTRIM:
                case self::MAIN:
                case self::MAKE_REF:
                case self::MANAGED:
                case self::MANAGE:
                case self::MANAGEMENT:
                case self::MANAGER:
                case self::MANUAL:
                case self::MAP:
                case self::MAPPING:
                case self::MASTER:
                case self::MATCHED:
                case self::MATCHES:
                case self::MATCH:
                case self::MATCH_NUMBER:
                case self::MATCH_RECOGNIZE:
                case self::MATERIALIZED:
                case self::MATERIALIZE:
                case self::MAXARCHLOGS:
                case self::MAXDATAFILES:
                case self::MAXEXTENTS:
                case self::MAXIMIZE:
                case self::MAXINSTANCES:
                case self::MAXLOGFILES:
                case self::MAXLOGHISTORY:
                case self::MAXLOGMEMBERS:
                case self::MAX_SHARED_TEMP_SIZE:
                case self::MAXSIZE:
                case self::MAXTRANS:
                case self::MAXVALUE:
                case self::MEASURE:
                case self::MEASURES:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MEMCOMPRESS:
                case self::MEMORY:
                case self::MERGEACTIONS:
                case self::MERGE_AJ:
                case self::MERGE_CONST_ON:
                case self::MERGE:
                case self::MERGE_SJ:
                case self::METADATA:
                case self::METHOD:
                case self::MIGRATE:
                case self::MIGRATION:
                case self::MINEXTENTS:
                case self::MINIMIZE:
                case self::MINIMUM:
                case self::MINING:
                case self::MINUS_NULL:
                case self::MINUTE:
                case self::MINVALUE:
                case self::MIRRORCOLD:
                case self::MIRRORHOT:
                case self::MIRROR:
                case self::MLSLABEL:
                case self::MODEL_COMPILE_SUBQUERY:
                case self::MODEL_DONTVERIFY_UNIQUENESS:
                case self::MODEL_DYNAMIC_SUBQUERY:
                case self::MODEL_MIN_ANALYSIS:
                case self::MODEL:
                case self::MODEL_NB:
                case self::MODEL_NO_ANALYSIS:
                case self::MODEL_PBY:
                case self::MODEL_PUSH_REF:
                case self::MODEL_SV:
                case self::MODIFICATION:
                case self::MODIFY_COLUMN_TYPE:
                case self::MODIFY:
                case self::MOD:
                case self::MODULE:
                case self::MONITORING:
                case self::MONITOR:
                case self::MONTH:
                case self::MONTHS_BETWEEN:
                case self::MONTHS:
                case self::MOUNT:
                case self::MOUNTPATH:
                case self::MOVEMENT:
                case self::MOVE:
                case self::MULTIDIMENSIONAL:
                case self::MULTISET:
                case self::MV_MERGE:
                case self::NAMED:
                case self::NAME:
                case self::NAMESPACE:
                case self::NAN:
                case self::NANVL:
                case self::NATIONAL:
                case self::NATIVE_FULL_OUTER_JOIN:
                case self::NATIVE:
                case self::NATURAL:
                case self::NAV:
                case self::NCHAR_CS:
                case self::NCHAR:
                case self::NCHR:
                case self::NCLOB:
                case self::NEEDED:
                case self::NEG:
                case self::NESTED:
                case self::NESTED_TABLE_FAST_INSERT:
                case self::NESTED_TABLE_GET_REFS:
                case self::NESTED_TABLE_ID:
                case self::NESTED_TABLE_SET_REFS:
                case self::NESTED_TABLE_SET_SETID:
                case self::NETWORK:
                case self::NEVER:
                case self::NEW:
                case self::NEW_TIME:
                case self::NEXT_DAY:
                case self::NEXT:
                case self::NL_AJ:
                case self::NLJ_BATCHING:
                case self::NLJ_INDEX_FILTER:
                case self::NLJ_INDEX_SCAN:
                case self::NLJ_PREFETCH:
                case self::NLS_CALENDAR:
                case self::NLS_CHARACTERSET:
                case self::NLS_CHARSET_DECL_LEN:
                case self::NLS_CHARSET_ID:
                case self::NLS_CHARSET_NAME:
                case self::NLS_COMP:
                case self::NLS_CURRENCY:
                case self::NLS_DATE_FORMAT:
                case self::NLS_DATE_LANGUAGE:
                case self::NLS_INITCAP:
                case self::NLS_ISO_CURRENCY:
                case self::NL_SJ:
                case self::NLS_LANG:
                case self::NLS_LANGUAGE:
                case self::NLS_LENGTH_SEMANTICS:
                case self::NLS_LOWER:
                case self::NLS_NCHAR_CONV_EXCP:
                case self::NLS_NUMERIC_CHARACTERS:
                case self::NLS_SORT:
                case self::NLSSORT:
                case self::NLS_SPECIAL_CHARS:
                case self::NLS_TERRITORY:
                case self::NLS_UPPER:
                case self::NO_ACCESS:
                case self::NO_ADAPTIVE_PLAN:
                case self::NO_ANSI_REARCH:
                case self::NOAPPEND:
                case self::NOARCHIVELOG:
                case self::NOAUDIT:
                case self::NO_AUTO_REOPTIMIZE:
                case self::NO_BASETABLE_MULTIMV_REWRITE:
                case self::NO_BATCH_TABLE_ACCESS_BY_ROWID:
                case self::NO_BIND_AWARE:
                case self::NO_BUFFER:
                case self::NOCACHE:
                case self::NO_CARTESIAN:
                case self::NO_CHECK_ACL_REWRITE:
                case self::NO_CLUSTER_BY_ROWID:
                case self::NO_CLUSTERING:
                case self::NO_COALESCE_SQ:
                case self::NO_COMMON_DATA:
                case self::NO_CONNECT_BY_CB_WHR_ONLY:
                case self::NO_CONNECT_BY_COMBINE_SW:
                case self::NO_CONNECT_BY_COST_BASED:
                case self::NO_CONNECT_BY_ELIM_DUPS:
                case self::NO_CONNECT_BY_FILTERING:
                case self::NOCOPY:
                case self::NO_COST_XML_QUERY_REWRITE:
                case self::NO_CPU_COSTING:
                case self::NOCPU_COSTING:
                case self::NOCYCLE:
                case self::NO_DATA_SECURITY_REWRITE:
                case self::NO_DECORRELATE:
                case self::NODELAY:
                case self::NO_DOMAIN_INDEX_FILTER:
                case self::NO_DST_UPGRADE_INSERT_CONV:
                case self::NO_ELIM_GROUPBY:
                case self::NO_ELIMINATE_JOIN:
                case self::NO_ELIMINATE_OBY:
                case self::NO_ELIMINATE_OUTER_JOIN:
                case self::NOENTITYESCAPING:
                case self::NO_EXPAND_GSET_TO_UNION:
                case self::NO_EXPAND:
                case self::NO_EXPAND_TABLE:
                case self::NO_FACT:
                case self::NO_FACTORIZE_JOIN:
                case self::NO_FILTERING:
                case self::NOFORCE:
                case self::NO_FULL_OUTER_JOIN_TO_OUTER:
                case self::NO_GATHER_OPTIMIZER_STATISTICS:
                case self::NO_GBY_PUSHDOWN:
                case self::NOGUARANTEE:
                case self::NO_INDEX_FFS:
                case self::NO_INDEX:
                case self::NO_INDEX_SS:
                case self::NO_INMEMORY:
                case self::NO_INMEMORY_PRUNING:
                case self::NOKEEP:
                case self::NO_LOAD:
                case self::NOLOCAL:
                case self::NOLOGGING:
                case self::NOMAPPING:
                case self::NOMAXVALUE:
                case self::NO_MERGE:
                case self::NOMINIMIZE:
                case self::NOMINVALUE:
                case self::NO_MODEL_PUSH_REF:
                case self::NO_MONITORING:
                case self::NOMONITORING:
                case self::NO_MONITOR:
                case self::NO_MULTIMV_REWRITE:
                case self::NO_NATIVE_FULL_OUTER_JOIN:
                case self::NONBLOCKING:
                case self::NONEDITIONABLE:
                case self::NONE:
                case self::NO_NLJ_BATCHING:
                case self::NO_NLJ_PREFETCH:
                case self::NO:
                case self::NONSCHEMA:
                case self::NO_OBJECT_LINK:
                case self::NOORDER:
                case self::NO_ORDER_ROLLUPS:
                case self::NO_OUTER_JOIN_TO_ANTI:
                case self::NO_OUTER_JOIN_TO_INNER:
                case self::NOOVERRIDE:
                case self::NO_PARALLEL_INDEX:
                case self::NOPARALLEL_INDEX:
                case self::NO_PARALLEL:
                case self::NOPARALLEL:
                case self::NO_PARTIAL_COMMIT:
                case self::NO_PARTIAL_JOIN:
                case self::NO_PARTIAL_ROLLUP_PUSHDOWN:
                case self::NOPARTITION:
                case self::NO_PLACE_DISTINCT:
                case self::NO_PLACE_GROUP_BY:
                case self::NO_PQ_CONCURRENT_UNION:
                case self::NO_PQ_MAP:
                case self::NO_PQ_REPLICATE:
                case self::NO_PQ_SKEW:
                case self::NO_PRUNE_GSETS:
                case self::NO_PULL_PRED:
                case self::NO_PUSH_PRED:
                case self::NO_PUSH_SUBQ:
                case self::NO_PX_FAULT_TOLERANCE:
                case self::NO_PX_JOIN_FILTER:
                case self::NO_QKN_BUFF:
                case self::NO_QUERY_TRANSFORMATION:
                case self::NO_REF_CASCADE:
                case self::NORELOCATE:
                case self::NORELY:
                case self::NOREPAIR:
                case self::NOREPLAY:
                case self::NORESETLOGS:
                case self::NO_RESULT_CACHE:
                case self::NOREVERSE:
                case self::NO_REWRITE:
                case self::NOREWRITE:
                case self::NORMAL:
                case self::NO_ROOT_SW_FOR_LOCAL:
                case self::NOROWDEPENDENCIES:
                case self::NOSCHEMACHECK:
                case self::NOSEGMENT:
                case self::NO_SEMIJOIN:
                case self::NO_SEMI_TO_INNER:
                case self::NO_SET_TO_JOIN:
                case self::NOSORT:
                case self::NO_SQL_TRANSLATION:
                case self::NO_SQL_TUNE:
                case self::NO_STAR_TRANSFORMATION:
                case self::NO_STATEMENT_QUEUING:
                case self::NO_STATS_GSETS:
                case self::NOSTRICT:
                case self::NO_SUBQUERY_PRUNING:
                case self::NO_SUBSTRB_PAD:
                case self::NO_SWAP_JOIN_INPUTS:
                case self::NOSWITCH:
                case self::NO_TABLE_LOOKUP_BY_NL:
                case self::NO_TEMP_TABLE:
                case self::NOTHING:
                case self::NOTIFICATION:
                case self::NO_TRANSFORM_DISTINCT_AGG:
                case self::NO_UNNEST:
                case self::NO_USE_CUBE:
                case self::NO_USE_HASH_AGGREGATION:
                case self::NO_USE_HASH_GBY_FOR_PUSHDOWN:
                case self::NO_USE_HASH:
                case self::NO_USE_INVISIBLE_INDEXES:
                case self::NO_USE_MERGE:
                case self::NO_USE_NL:
                case self::NO_USE_VECTOR_AGGREGATION:
                case self::NOVALIDATE:
                case self::NO_VECTOR_TRANSFORM_DIMS:
                case self::NO_VECTOR_TRANSFORM_FACT:
                case self::NO_VECTOR_TRANSFORM:
                case self::NO_XDB_FASTPATH_INSERT:
                case self::NO_XML_DML_REWRITE:
                case self::NO_XMLINDEX_REWRITE_IN_SELECT:
                case self::NO_XMLINDEX_REWRITE:
                case self::NO_XML_QUERY_REWRITE:
                case self::NO_ZONEMAP:
                case self::NTH_VALUE:
                case self::NULLIF:
                case self::NULLS:
                case self::NUMBER:
                case self::NUMERIC:
                case self::NUM_INDEX_KEYS:
                case self::NUMTODSINTERVAL:
                case self::NUMTOYMINTERVAL:
                case self::NVARCHAR2:
                case self::NVL2:
                case self::OBJECT2XML:
                case self::OBJECT:
                case self::OBJ_ID:
                case self::OBJNO:
                case self::OBJNO_REUSE:
                case self::OCCURENCES:
                case self::OFFLINE:
                case self::OFF:
                case self::OFFSET:
                case self::OIDINDEX:
                case self::OID:
                case self::OLAP:
                case self::OLD:
                case self::OLD_PUSH_PRED:
                case self::OLS:
                case self::OLTP:
                case self::OMIT:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPAQUE:
                case self::OPAQUE_TRANSFORM:
                case self::OPAQUE_XCANONICAL:
                case self::OPCODE:
                case self::OPEN:
                case self::OPERATIONS:
                case self::OPERATOR:
                case self::OPT_ESTIMATE:
                case self::OPTIMAL:
                case self::OPTIMIZE:
                case self::OPTIMIZER_FEATURES_ENABLE:
                case self::OPTIMIZER_GOAL:
                case self::OPT_PARAM:
                case self::ORA_BRANCH:
                case self::ORA_CHECK_ACL:
                case self::ORA_CHECK_PRIVILEGE:
                case self::ORA_CLUSTERING:
                case self::ORADATA:
                case self::ORADEBUG:
                case self::ORA_DST_AFFECTED:
                case self::ORA_DST_CONVERT:
                case self::ORA_DST_ERROR:
                case self::ORA_GET_ACLIDS:
                case self::ORA_GET_PRIVILEGES:
                case self::ORA_HASH:
                case self::ORA_INVOKING_USERID:
                case self::ORA_INVOKING_USER:
                case self::ORA_INVOKING_XS_USER_GUID:
                case self::ORA_INVOKING_XS_USER:
                case self::ORA_RAWCOMPARE:
                case self::ORA_RAWCONCAT:
                case self::ORA_ROWSCN:
                case self::ORA_ROWSCN_RAW:
                case self::ORA_ROWVERSION:
                case self::ORA_TABVERSION:
                case self::ORA_WRITE_TIME:
                case self::ORDERED:
                case self::ORDERED_PREDICATES:
                case self::ORDINALITY:
                case self::OR_EXPAND:
                case self::ORGANIZATION:
                case self::OR_PREDICATES:
                case self::OSERROR:
                case self::OTHER:
                case self::OUTER_JOIN_TO_ANTI:
                case self::OUTER_JOIN_TO_INNER:
                case self::OUTER:
                case self::OUTLINE_LEAF:
                case self::OUTLINE:
                case self::OUT_OF_LINE:
                case self::OUT:
                case self::OVERFLOW_NOMOVE:
                case self::OVERFLOW:
                case self::OVERLAPS:
                case self::OVER:
                case self::OVERRIDING:
                case self::OWNER:
                case self::OWNERSHIP:
                case self::OWN:
                case self::PACKAGE:
                case self::PACKAGES:
                case self::PARALLEL_ENABLE:
                case self::PARALLEL_INDEX:
                case self::PARALLEL:
                case self::PARAMETERS:
                case self::PARAM:
                case self::PARENT:
                case self::PARITY:
                case self::PARTIAL_JOIN:
                case self::PARTIALLY:
                case self::PARTIAL:
                case self::PARTIAL_ROLLUP_PUSHDOWN:
                case self::PARTITION_HASH:
                case self::PARTITION_LIST:
                case self::PARTITION:
                case self::PARTITION_RANGE:
                case self::PARTITIONS:
                case self::PARTNUMINST:
                case self::PASSING:
                case self::PASSWORD_GRACE_TIME:
                case self::PASSWORD_LIFE_TIME:
                case self::PASSWORD_LOCK_TIME:
                case self::PASSWORD:
                case self::PASSWORD_REUSE_MAX:
                case self::PASSWORD_REUSE_TIME:
                case self::PASSWORD_VERIFY_FUNCTION:
                case self::PAST:
                case self::PATCH:
                case self::PATH:
                case self::PATH_PREFIX:
                case self::PATHS:
                case self::PATTERN:
                case self::PBL_HS_BEGIN:
                case self::PBL_HS_END:
                case self::PCTINCREASE:
                case self::PCTTHRESHOLD:
                case self::PCTUSED:
                case self::PCTVERSION:
                case self::PENDING:
                case self::PERCENT_KEYWORD:
                case self::PERCENT_RANKM:
                case self::PERFORMANCE:
                case self::PERIOD_KEYWORD:
                case self::PERMANENT:
                case self::PERMISSION:
                case self::PERMUTE:
                case self::PER:
                case self::PFILE:
                case self::PHYSICAL:
                case self::PIKEY:
                case self::PIPELINED:
                case self::PIV_GB:
                case self::PIVOT:
                case self::PIV_SSF:
                case self::PLACE_DISTINCT:
                case self::PLACE_GROUP_BY:
                case self::PLAN:
                case self::PLSCOPE_SETTINGS:
                case self::PLS_INTEGER:
                case self::PLSQL_CCFLAGS:
                case self::PLSQL_CODE_TYPE:
                case self::PLSQL_DEBUG:
                case self::PLSQL_OPTIMIZE_LEVEL:
                case self::PLSQL_WARNINGS:
                case self::PLUGGABLE:
                case self::POINT:
                case self::POLICY:
                case self::POOL_16K:
                case self::POOL_2K:
                case self::POOL_32K:
                case self::POOL_4K:
                case self::POOL_8K:
                case self::POSITIVEN:
                case self::POSITIVE:
                case self::POST_TRANSACTION:
                case self::POWERMULTISET_BY_CARDINALITY:
                case self::POWERMULTISET:
                case self::POWER:
                case self::PQ_CONCURRENT_UNION:
                case self::PQ_DISTRIBUTE:
                case self::PQ_DISTRIBUTE_WINDOW:
                case self::PQ_FILTER:
                case self::PQ_MAP:
                case self::PQ_NOMAP:
                case self::PQ_REPLICATE:
                case self::PQ_SKEW:
                case self::PRAGMA:
                case self::PREBUILT:
                case self::PRECEDES:
                case self::PRECEDING:
                case self::PRECISION:
                case self::PRECOMPUTE_SUBQUERY:
                case self::PREDICATE_REORDERS:
                case self::PRELOAD:
                case self::PREPARE:
                case self::PRESENTNNV:
                case self::PRESENT:
                case self::PRESENTV:
                case self::PRESERVE_OID:
                case self::PRESERVE:
                case self::PRETTY:
                case self::PREVIOUS:
                case self::PREV:
                case self::PRIMARY:
                case self::PRINTBLOBTOCLOB:
                case self::PRIORITY:
                case self::PRIVATE:
                case self::PRIVATE_SGA:
                case self::PRIVILEGED:
                case self::PRIVILEGE:
                case self::PRIVILEGES:
                case self::PROCEDURAL:
                case self::PROCEDURE:
                case self::PROCESS:
                case self::PROFILE:
                case self::PROGRAM:
                case self::PROJECT:
                case self::PROPAGATE:
                case self::PROTECTED:
                case self::PROTECTION:
                case self::PROXY:
                case self::PRUNING:
                case self::PULL_PRED:
                case self::PURGE:
                case self::PUSH_PRED:
                case self::PUSH_SUBQ:
                case self::PX_FAULT_TOLERANCE:
                case self::PX_GRANULE:
                case self::PX_JOIN_FILTER:
                case self::QB_NAME:
                case self::QUERY_BLOCK:
                case self::QUERY:
                case self::QUEUE_CURR:
                case self::QUEUE:
                case self::QUEUE_ROWP:
                case self::QUIESCE:
                case self::QUORUM:
                case self::QUOTA:
                case self::RAISE:
                case self::RANDOM_LOCAL:
                case self::RANDOM:
                case self::RANGE:
                case self::RANKM:
                case self::RAPIDLY:
                case self::RAW:
                case self::RAWTOHEX:
                case self::RAWTONHEX:
                case self::RBA:
                case self::RBO_OUTLINE:
                case self::RDBA:
                case self::READ:
                case self::READS:
                case self::REALM:
                case self::REAL:
                case self::REBALANCE:
                case self::REBUILD:
                case self::RECORD:
                case self::RECORDS_PER_BLOCK:
                case self::RECOVERABLE:
                case self::RECOVER:
                case self::RECOVERY:
                case self::RECYCLEBIN:
                case self::RECYCLE:
                case self::REDACTION:
                case self::REDEFINE:
                case self::REDO:
                case self::REDUCED:
                case self::REDUNDANCY:
                case self::REF_CASCADE_CURSOR:
                case self::REFERENCED:
                case self::REFERENCE:
                case self::REFERENCES:
                case self::REFERENCING:
                case self::REF:
                case self::REFRESH:
                case self::REFTOHEX:
                case self::REGEXP_COUNT:
                case self::REGEXP_INSTR:
                case self::REGEXP_LIKE:
                case self::REGEXP_REPLACE:
                case self::REGEXP_SUBSTR:
                case self::REGISTER:
                case self::REGR_AVGX:
                case self::REGR_AVGY:
                case self::REGR_COUNT:
                case self::REGR_INTERCEPT:
                case self::REGR_R2:
                case self::REGR_SLOPE:
                case self::REGR_SXX:
                case self::REGR_SXY:
                case self::REGR_SYY:
                case self::REGULAR:
                case self::REJECT:
                case self::REKEY:
                case self::RELATIONAL:
                case self::RELOCATE:
                case self::RELY:
                case self::REMAINDER:
                case self::REMOTE_MAPPED:
                case self::REMOVE:
                case self::RENAME:
                case self::REPAIR:
                case self::REPEAT:
                case self::REPLACE:
                case self::REPLICATION:
                case self::REQUIRED:
                case self::RESETLOGS:
                case self::RESET:
                case self::RESIZE:
                case self::RESOLVE:
                case self::RESOLVER:
                case self::RESPECT:
                case self::RESTART:
                case self::RESTORE_AS_INTERVALS:
                case self::RESTORE:
                case self::RESTRICT_ALL_REF_CONS:
                case self::RESTRICTED:
                case self::RESTRICT_REFERENCES:
                case self::RESTRICT:
                case self::RESULT_CACHE:
                case self::RESULT:
                case self::RESUMABLE:
                case self::RESUME:
                case self::RETENTION:
                case self::RETRY_ON_ROW_CHANGE:
                case self::RETURNING:
                case self::RETURN:
                case self::REUSE:
                case self::REVERSE:
                case self::REWRITE_OR_ERROR:
                case self::REWRITE:
                case self::RIGHT:
                case self::ROLE:
                case self::ROLESET:
                case self::ROLES:
                case self::ROLLBACK:
                case self::ROLLING:
                case self::ROLLUP:
                case self::ROWDEPENDENCIES:
                case self::ROWID_MAPPING_TABLE:
                case self::ROWID:
                case self::ROWIDTOCHAR:
                case self::ROWIDTONCHAR:
                case self::ROW_LENGTH:
                case self::ROWNUM:
                case self::ROW:
                case self::ROWS:
                case self::RPAD:
                case self::RTRIM:
                case self::RULE:
                case self::RULES:
                case self::RUNNING:
                case self::SALT:
                case self::SAMPLE:
                case self::SAVE_AS_INTERVALS:
                case self::SAVEPOINT:
                case self::SAVE:
                case self::SB4:
                case self::SCALE_ROWS:
                case self::SCALE:
                case self::SCAN_INSTANCES:
                case self::SCAN:
                case self::SCHEDULER:
                case self::SCHEMACHECK:
                case self::SCHEMA:
                case self::SCN_ASCENDING:
                case self::SCN:
                case self::SCOPE:
                case self::SCRUB:
                case self::SD_ALL:
                case self::SD_INHIBIT:
                case self::SDO_GEOM_MBR:
                case self::SD_SHOW:
                case self::SEARCH:
                case self::SECOND:
                case self::SECRET:
                case self::SECUREFILE_DBA:
                case self::SECUREFILE:
                case self::SECURITY:
                case self::SEED:
                case self::SEG_BLOCK:
                case self::SEG_FILE:
                case self::SEGMENT:
                case self::SELECTIVITY:
                case self::SELF:
                case self::SEMIJOIN_DRIVER:
                case self::SEMIJOIN:
                case self::SEMI_TO_INNER:
                case self::SEQUENCED:
                case self::SEQUENCE:
                case self::SEQUENTIAL:
                case self::SERIALIZABLE:
                case self::SERIALLY_REUSABLE:
                case self::SERIAL:
                case self::SERVERERROR:
                case self::SERVICE_NAME_CONVERT:
                case self::SERVICES:
                case self::SESSION_CACHED_CURSORS:
                case self::SESSION:
                case self::SESSIONS_PER_USER:
                case self::SESSIONTIMEZONE:
                case self::SESSIONTZNAME:
                case self::SET:
                case self::SETS:
                case self::SETTINGS:
                case self::SET_TO_JOIN:
                case self::SEVERE:
                case self::SHARED_POOL:
                case self::SHARED:
                case self::SHARING:
                case self::SHELFLIFE:
                case self::SHOW:
                case self::SHRINK:
                case self::SHUTDOWN:
                case self::SIBLINGS:
                case self::SID:
                case self::SIGNAL_COMPONENT:
                case self::SIGNAL_FUNCTION:
                case self::SIGN:
                case self::SIGNTYPE:
                case self::SIMPLE_INTEGER:
                case self::SIMPLE:
                case self::SINGLE:
                case self::SINGLETASK:
                case self::SINH:
                case self::SIN:
                case self::SKIP_EXT_OPTIMIZER:
                case self::SKIP_:
                case self::SKIP_UNQ_UNUSABLE_IDX:
                case self::SKIP_UNUSABLE_INDEXES:
                case self::SMALLFILE:
                case self::SMALLINT:
                case self::SNAPSHOT:
                case self::SOME:
                case self::SORT:
                case self::SOUNDEX:
                case self::SOURCE_FILE_DIRECTORY:
                case self::SOURCE_FILE_NAME_CONVERT:
                case self::SOURCE:
                case self::SPACE_KEYWORD:
                case self::SPECIFICATION:
                case self::SPFILE:
                case self::SPLIT:
                case self::SPREADSHEET:
                case self::SQLDATA:
                case self::SQLERROR:
                case self::SQLLDR:
                case self::SQL:
                case self::SQL_TRACE:
                case self::SQL_TRANSLATION_PROFILE:
                case self::SQRT:
                case self::STALE:
                case self::STANDALONE:
                case self::STANDARD_HASH:
                case self::STANDBY_MAX_DATA_DELAY:
                case self::STANDBYS:
                case self::STANDBY:
                case self::STAR:
                case self::STAR_TRANSFORMATION:
                case self::STARTUP:
                case self::STATEMENT_ID:
                case self::STATEMENT_QUEUING:
                case self::STATEMENTS:
                case self::STATEMENT:
                case self::STATE:
                case self::STATIC:
                case self::STATISTICS:
                case self::STATS_BINOMIAL_TEST:
                case self::STATS_CROSSTAB:
                case self::STATS_F_TEST:
                case self::STATS_KS_TEST:
                case self::STATS_MODE:
                case self::STATS_MW_TEST:
                case self::STATS_ONE_WAY_ANOVA:
                case self::STATS_T_TEST_INDEP:
                case self::STATS_T_TEST_INDEPU:
                case self::STATS_T_TEST_ONE:
                case self::STATS_T_TEST_PAIRED:
                case self::STATS_WSR_TEST:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::STOP:
                case self::STORAGE:
                case self::STORE:
                case self::STREAMS:
                case self::STREAM:
                case self::STRICT:
                case self::STRING:
                case self::STRIPE_COLUMNS:
                case self::STRIPE_WIDTH:
                case self::STRIP:
                case self::STRUCTURE:
                case self::SUBMULTISET:
                case self::SUBPARTITION_REL:
                case self::SUBPARTITIONS:
                case self::SUBPARTITION:
                case self::SUBQUERIES:
                case self::SUBQUERY_PRUNING:
                case self::SUBSCRIBE:
                case self::SUBSET:
                case self::SUBSTITUTABLE:
                case self::SUBSTR2:
                case self::SUBSTR4:
                case self::SUBSTRB:
                case self::SUBSTRC:
                case self::SUBTYPE:
                case self::SUCCESSFUL:
                case self::SUCCESS:
                case self::SUMMARY:
                case self::SUPPLEMENTAL:
                case self::SUSPEND:
                case self::SWAP_JOIN_INPUTS:
                case self::SWITCHOVER:
                case self::SWITCH:
                case self::SYNCHRONOUS:
                case self::SYNC:
                case self::SYSASM:
                case self::SYS_AUDIT:
                case self::SYSAUX:
                case self::SYSBACKUP:
                case self::SYS_CHECKACL:
                case self::SYS_CHECK_PRIVILEGE:
                case self::SYS_CONNECT_BY_PATH:
                case self::SYS_CONTEXT:
                case self::SYSDATE:
                case self::SYSDBA:
                case self::SYS_DBURIGEN:
                case self::SYSDG:
                case self::SYS_DL_CURSOR:
                case self::SYS_DM_RXFORM_CHR:
                case self::SYS_DM_RXFORM_NUM:
                case self::SYS_DOM_COMPARE:
                case self::SYS_DST_PRIM2SEC:
                case self::SYS_DST_SEC2PRIM:
                case self::SYS_ET_BFILE_TO_RAW:
                case self::SYS_ET_BLOB_TO_IMAGE:
                case self::SYS_ET_IMAGE_TO_BLOB:
                case self::SYS_ET_RAW_TO_BFILE:
                case self::SYS_EXTPDTXT:
                case self::SYS_EXTRACT_UTC:
                case self::SYS_FBT_INSDEL:
                case self::SYS_FILTER_ACLS:
                case self::SYS_FNMATCHES:
                case self::SYS_FNREPLACE:
                case self::SYS_GET_ACLIDS:
                case self::SYS_GET_COL_ACLIDS:
                case self::SYS_GET_PRIVILEGES:
                case self::SYS_GETTOKENID:
                case self::SYS_GETXTIVAL:
                case self::SYS_GUID:
                case self::SYSGUID:
                case self::SYSKM:
                case self::SYS_MAKE_XMLNODEID:
                case self::SYS_MAKEXML:
                case self::SYS_MKXMLATTR:
                case self::SYS_MKXTI:
                case self::SYSOBJ:
                case self::SYS_OP_ADT2BIN:
                case self::SYS_OP_ADTCONS:
                case self::SYS_OP_ALSCRVAL:
                case self::SYS_OP_ATG:
                case self::SYS_OP_BIN2ADT:
                case self::SYS_OP_BITVEC:
                case self::SYS_OP_BL2R:
                case self::SYS_OP_BLOOM_FILTER_LIST:
                case self::SYS_OP_BLOOM_FILTER:
                case self::SYS_OP_C2C:
                case self::SYS_OP_CAST:
                case self::SYS_OP_CEG:
                case self::SYS_OP_CL2C:
                case self::SYS_OP_COMBINED_HASH:
                case self::SYS_OP_COMP:
                case self::SYS_OP_CONVERT:
                case self::SYS_OP_COUNTCHG:
                case self::SYS_OP_CSCONV:
                case self::SYS_OP_CSCONVTEST:
                case self::SYS_OP_CSR:
                case self::SYS_OP_CSX_PATCH:
                case self::SYS_OP_CYCLED_SEQ:
                case self::SYS_OP_DECOMP:
                case self::SYS_OP_DESCEND:
                case self::SYS_OP_DISTINCT:
                case self::SYS_OP_DRA:
                case self::SYS_OP_DUMP:
                case self::SYS_OP_DV_CHECK:
                case self::SYS_OP_ENFORCE_NOT_NULL:
                case self::SYSOPER:
                case self::SYS_OP_EXTRACT:
                case self::SYS_OP_GROUPING:
                case self::SYS_OP_GUID:
                case self::SYS_OP_HASH:
                case self::SYS_OP_IIX:
                case self::SYS_OP_ITR:
                case self::SYS_OP_KEY_VECTOR_CREATE:
                case self::SYS_OP_KEY_VECTOR_FILTER_LIST:
                case self::SYS_OP_KEY_VECTOR_FILTER:
                case self::SYS_OP_KEY_VECTOR_SUCCEEDED:
                case self::SYS_OP_KEY_VECTOR_USE:
                case self::SYS_OP_LBID:
                case self::SYS_OP_LOBLOC2BLOB:
                case self::SYS_OP_LOBLOC2CLOB:
                case self::SYS_OP_LOBLOC2ID:
                case self::SYS_OP_LOBLOC2NCLOB:
                case self::SYS_OP_LOBLOC2TYP:
                case self::SYS_OP_LSVI:
                case self::SYS_OP_LVL:
                case self::SYS_OP_MAKEOID:
                case self::SYS_OP_MAP_NONNULL:
                case self::SYS_OP_MSR:
                case self::SYS_OP_NICOMBINE:
                case self::SYS_OP_NIEXTRACT:
                case self::SYS_OP_NII:
                case self::SYS_OP_NIX:
                case self::SYS_OP_NOEXPAND:
                case self::SYS_OP_NTCIMG:
                case self::SYS_OP_NUMTORAW:
                case self::SYS_OP_OIDVALUE:
                case self::SYS_OP_OPNSIZE:
                case self::SYS_OP_PAR_1:
                case self::SYS_OP_PARGID_1:
                case self::SYS_OP_PARGID:
                case self::SYS_OP_PAR:
                case self::SYS_OP_PART_ID:
                case self::SYS_OP_PIVOT:
                case self::SYS_OP_R2O:
                case self::SYS_OP_RAWTONUM:
                case self::SYS_OP_RDTM:
                case self::SYS_OP_REF:
                case self::SYS_OP_RMTD:
                case self::SYS_OP_ROWIDTOOBJ:
                case self::SYS_OP_RPB:
                case self::SYS_OPTLOBPRBSC:
                case self::SYS_OP_TOSETID:
                case self::SYS_OP_TPR:
                case self::SYS_OP_TRTB:
                case self::SYS_OPTXICMP:
                case self::SYS_OPTXQCASTASNQ:
                case self::SYS_OP_UNDESCEND:
                case self::SYS_OP_VECAND:
                case self::SYS_OP_VECBIT:
                case self::SYS_OP_VECOR:
                case self::SYS_OP_VECXOR:
                case self::SYS_OP_VERSION:
                case self::SYS_OP_VREF:
                case self::SYS_OP_VVD:
                case self::SYS_OP_XMLCONS_FOR_CSX:
                case self::SYS_OP_XPTHATG:
                case self::SYS_OP_XPTHIDX:
                case self::SYS_OP_XPTHOP:
                case self::SYS_OP_XTXT2SQLT:
                case self::SYS_OP_ZONE_ID:
                case self::SYS_ORDERKEY_DEPTH:
                case self::SYS_ORDERKEY_MAXCHILD:
                case self::SYS_ORDERKEY_PARENT:
                case self::SYS_PARALLEL_TXN:
                case self::SYS_PATHID_IS_ATTR:
                case self::SYS_PATHID_IS_NMSPC:
                case self::SYS_PATHID_LASTNAME:
                case self::SYS_PATHID_LASTNMSPC:
                case self::SYS_PATH_REVERSE:
                case self::SYS_PXQEXTRACT:
                case self::SYS_RAW_TO_XSID:
                case self::SYS_RID_ORDER:
                case self::SYS_ROW_DELTA:
                case self::SYS_SC_2_XMLT:
                case self::SYS_SYNRCIREDO:
                case self::SYSTEM_DEFINED:
                case self::SYSTEM:
                case self::SYSTIMESTAMP:
                case self::SYS_TYPEID:
                case self::SYS_UMAKEXML:
                case self::SYS_XMLANALYZE:
                case self::SYS_XMLCONTAINS:
                case self::SYS_XMLCONV:
                case self::SYS_XMLEXNSURI:
                case self::SYS_XMLGEN:
                case self::SYS_XMLI_LOC_ISNODE:
                case self::SYS_XMLI_LOC_ISTEXT:
                case self::SYS_XMLINSTR:
                case self::SYS_XMLLOCATOR_GETSVAL:
                case self::SYS_XMLNODEID_GETCID:
                case self::SYS_XMLNODEID_GETLOCATOR:
                case self::SYS_XMLNODEID_GETOKEY:
                case self::SYS_XMLNODEID_GETPATHID:
                case self::SYS_XMLNODEID_GETPTRID:
                case self::SYS_XMLNODEID_GETRID:
                case self::SYS_XMLNODEID_GETSVAL:
                case self::SYS_XMLNODEID_GETTID:
                case self::SYS_XMLNODEID:
                case self::SYS_XMLT_2_SC:
                case self::SYS_XMLTRANSLATE:
                case self::SYS_XMLTYPE2SQL:
                case self::SYS_XQ_ASQLCNV:
                case self::SYS_XQ_ATOMCNVCHK:
                case self::SYS_XQBASEURI:
                case self::SYS_XQCASTABLEERRH:
                case self::SYS_XQCODEP2STR:
                case self::SYS_XQCODEPEQ:
                case self::SYS_XQCON2SEQ:
                case self::SYS_XQCONCAT:
                case self::SYS_XQDELETE:
                case self::SYS_XQDFLTCOLATION:
                case self::SYS_XQDOC:
                case self::SYS_XQDOCURI:
                case self::SYS_XQDURDIV:
                case self::SYS_XQED4URI:
                case self::SYS_XQENDSWITH:
                case self::SYS_XQERRH:
                case self::SYS_XQERR:
                case self::SYS_XQESHTMLURI:
                case self::SYS_XQEXLOBVAL:
                case self::SYS_XQEXSTWRP:
                case self::SYS_XQEXTRACT:
                case self::SYS_XQEXTRREF:
                case self::SYS_XQEXVAL:
                case self::SYS_XQFB2STR:
                case self::SYS_XQFNBOOL:
                case self::SYS_XQFNCMP:
                case self::SYS_XQFNDATIM:
                case self::SYS_XQFNLNAME:
                case self::SYS_XQFNNM:
                case self::SYS_XQFNNSURI:
                case self::SYS_XQFNPREDTRUTH:
                case self::SYS_XQFNQNM:
                case self::SYS_XQFNROOT:
                case self::SYS_XQFORMATNUM:
                case self::SYS_XQFTCONTAIN:
                case self::SYS_XQFUNCR:
                case self::SYS_XQGETCONTENT:
                case self::SYS_XQINDXOF:
                case self::SYS_XQINSERT:
                case self::SYS_XQINSPFX:
                case self::SYS_XQIRI2URI:
                case self::SYS_XQLANG:
                case self::SYS_XQLLNMFRMQNM:
                case self::SYS_XQMKNODEREF:
                case self::SYS_XQNILLED:
                case self::SYS_XQNODENAME:
                case self::SYS_XQNORMSPACE:
                case self::SYS_XQNORMUCODE:
                case self::SYS_XQ_NRNG:
                case self::SYS_XQNSP4PFX:
                case self::SYS_XQNSPFRMQNM:
                case self::SYS_XQPFXFRMQNM:
                case self::SYS_XQ_PKSQL2XML:
                case self::SYS_XQPOLYABS:
                case self::SYS_XQPOLYADD:
                case self::SYS_XQPOLYCEL:
                case self::SYS_XQPOLYCSTBL:
                case self::SYS_XQPOLYCST:
                case self::SYS_XQPOLYDIV:
                case self::SYS_XQPOLYFLR:
                case self::SYS_XQPOLYMOD:
                case self::SYS_XQPOLYMUL:
                case self::SYS_XQPOLYRND:
                case self::SYS_XQPOLYSQRT:
                case self::SYS_XQPOLYSUB:
                case self::SYS_XQPOLYUMUS:
                case self::SYS_XQPOLYUPLS:
                case self::SYS_XQPOLYVEQ:
                case self::SYS_XQPOLYVGE:
                case self::SYS_XQPOLYVGT:
                case self::SYS_XQPOLYVLE:
                case self::SYS_XQPOLYVLT:
                case self::SYS_XQPOLYVNE:
                case self::SYS_XQREF2VAL:
                case self::SYS_XQRENAME:
                case self::SYS_XQREPLACE:
                case self::SYS_XQRESVURI:
                case self::SYS_XQRNDHALF2EVN:
                case self::SYS_XQRSLVQNM:
                case self::SYS_XQRYENVPGET:
                case self::SYS_XQRYVARGET:
                case self::SYS_XQRYWRP:
                case self::SYS_XQSEQ2CON4XC:
                case self::SYS_XQSEQ2CON:
                case self::SYS_XQSEQDEEPEQ:
                case self::SYS_XQSEQINSB:
                case self::SYS_XQSEQRM:
                case self::SYS_XQSEQRVS:
                case self::SYS_XQSEQSUB:
                case self::SYS_XQSEQTYPMATCH:
                case self::SYS_XQSTARTSWITH:
                case self::SYS_XQSTATBURI:
                case self::SYS_XQSTR2CODEP:
                case self::SYS_XQSTRJOIN:
                case self::SYS_XQSUBSTRAFT:
                case self::SYS_XQSUBSTRBEF:
                case self::SYS_XQTOKENIZE:
                case self::SYS_XQTREATAS:
                case self::SYS_XQ_UPKXML2SQL:
                case self::SYS_XQXFORM:
                case self::SYS_XSID_TO_RAW:
                case self::SYS_ZMAP_FILTER:
                case self::SYS_ZMAP_REFRESH:
                case self::TABLE_LOOKUP_BY_NL:
                case self::TABLESPACE_NO:
                case self::TABLESPACE:
                case self::TABLES:
                case self::TABLE_STATS:
                case self::TABLE:
                case self::TABNO:
                case self::TAG:
                case self::TANH:
                case self::TAN:
                case self::TBLORIDXPARTNUM:
                case self::TEMPFILE:
                case self::TEMPLATE:
                case self::TEMPORARY:
                case self::TEMP_TABLE:
                case self::TEST:
                case self::TEXT:
                case self::THAN:
                case self::THEN:
                case self::THE:
                case self::THREAD:
                case self::THROUGH:
                case self::TIER:
                case self::TIES:
                case self::TIMEOUT:
                case self::TIMESTAMP_LTZ_UNCONSTRAINED:
                case self::TIMESTAMP:
                case self::TIMESTAMP_TZ_UNCONSTRAINED:
                case self::TIMESTAMP_UNCONSTRAINED:
                case self::TIMES:
                case self::TIME:
                case self::TIMEZONE_ABBR:
                case self::TIMEZONE_HOUR:
                case self::TIMEZONE_MINUTE:
                case self::TIMEZONE_OFFSET:
                case self::TIMEZONE_REGION:
                case self::TIME_ZONE:
                case self::TIV_GB:
                case self::TIV_SSF:
                case self::TO_ACLID:
                case self::TO_BINARY_DOUBLE:
                case self::TO_BINARY_FLOAT:
                case self::TO_BLOB:
                case self::TO_CLOB:
                case self::TO_DSINTERVAL:
                case self::TO_LOB:
                case self::TO_MULTI_BYTE:
                case self::TO_NCHAR:
                case self::TO_NCLOB:
                case self::TO_NUMBER:
                case self::TOPLEVEL:
                case self::TO_SINGLE_BYTE:
                case self::TO_TIMESTAMP:
                case self::TO_TIMESTAMP_TZ:
                case self::TO_TIME:
                case self::TO_TIME_TZ:
                case self::TO_YMINTERVAL:
                case self::TRACE:
                case self::TRACING:
                case self::TRACKING:
                case self::TRAILING:
                case self::TRANSACTION:
                case self::TRANSFORM_DISTINCT_AGG:
                case self::TRANSITIONAL:
                case self::TRANSITION:
                case self::TRANSLATE:
                case self::TRANSLATION:
                case self::TREAT:
                case self::TRIGGERS:
                case self::TRIGGER:
                case self::TRUE:
                case self::TRUNCATE:
                case self::TRUNC:
                case self::TRUSTED:
                case self::TRUST:
                case self::TUNING:
                case self::TX:
                case self::TYPES:
                case self::TYPE:
                case self::TZ_OFFSET:
                case self::UB2:
                case self::UBA:
                case self::UCS2:
                case self::UID:
                case self::UNARCHIVED:
                case self::UNBOUNDED:
                case self::UNBOUND:
                case self::UNCONDITIONAL:
                case self::UNDER:
                case self::UNDO:
                case self::UNDROP:
                case self::UNIFORM:
                case self::UNISTR:
                case self::UNLIMITED:
                case self::UNLOAD:
                case self::UNLOCK:
                case self::UNMATCHED:
                case self::UNNEST_INNERJ_DISTINCT_VIEW:
                case self::UNNEST_NOSEMIJ_NODISTINCTVIEW:
                case self::UNNEST_SEMIJ_VIEW:
                case self::UNNEST:
                case self::UNPACKED:
                case self::UNPIVOT:
                case self::UNPLUG:
                case self::UNPROTECTED:
                case self::UNQUIESCE:
                case self::UNRECOVERABLE:
                case self::UNRESTRICTED:
                case self::UNSUBSCRIBE:
                case self::UNTIL:
                case self::UNUSABLE:
                case self::UNUSED:
                case self::UPDATABLE:
                case self::UPDATED:
                case self::UPDATEXML:
                case self::UPD_INDEXES:
                case self::UPD_JOININDEX:
                case self::UPGRADE:
                case self::UPPER:
                case self::UPSERT:
                case self::UROWID:
                case self::USABLE:
                case self::USAGE:
                case self::USE_ANTI:
                case self::USE_CONCAT:
                case self::USE_CUBE:
                case self::USE_HASH_AGGREGATION:
                case self::USE_HASH_GBY_FOR_PUSHDOWN:
                case self::USE_HASH:
                case self::USE_HIDDEN_PARTITIONS:
                case self::USE_INVISIBLE_INDEXES:
                case self::USE_MERGE_CARTESIAN:
                case self::USE_MERGE:
                case self::USE_NL:
                case self::USE_NL_WITH_INDEX:
                case self::USE_PRIVATE_OUTLINES:
                case self::USER_DATA:
                case self::USER_DEFINED:
                case self::USERENV:
                case self::USERGROUP:
                case self::USER_RECYCLEBIN:
                case self::USERS:
                case self::USER_TABLESPACES:
                case self::USER:
                case self::USE_SEMI:
                case self::USE_STORED_OUTLINES:
                case self::USE_TTT_FOR_GSETS:
                case self::USE:
                case self::USE_VECTOR_AGGREGATION:
                case self::USE_WEAK_NAME_RESL:
                case self::USING_NO_EXPAND:
                case self::USING:
                case self::UTF16BE:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::V1:
                case self::V2:
                case self::VALIDATE:
                case self::VALIDATION:
                case self::VALID_TIME_END:
                case self::VALUE:
                case self::VARCHAR2:
                case self::VARCHAR:
                case self::VARIABLE:
                case self::VAR_POP:
                case self::VARRAYS:
                case self::VARRAY:
                case self::VAR_SAMP:
                case self::VARYING:
                case self::VECTOR_READ_TRACE:
                case self::VECTOR_READ:
                case self::VECTOR_TRANSFORM_DIMS:
                case self::VECTOR_TRANSFORM_FACT:
                case self::VECTOR_TRANSFORM:
                case self::VERIFIER:
                case self::VERIFY:
                case self::VERSIONING:
                case self::VERSIONS_ENDSCN:
                case self::VERSIONS_ENDTIME:
                case self::VERSIONS_OPERATION:
                case self::VERSIONS_STARTSCN:
                case self::VERSIONS_STARTTIME:
                case self::VERSIONS:
                case self::VERSIONS_XID:
                case self::VERSION:
                case self::VIOLATION:
                case self::VIRTUAL:
                case self::VISIBILITY:
                case self::VISIBLE:
                case self::VOLUME:
                case self::VSIZE:
                case self::WAIT:
                case self::WALLET:
                case self::WARNING:
                case self::WEEKS:
                case self::WEEK:
                case self::WELLFORMED:
                case self::WHENEVER:
                case self::WHEN:
                case self::WHILE:
                case self::WHITESPACE:
                case self::WIDTH_BUCKET:
                case self::WITHIN:
                case self::WITHOUT:
                case self::WITH_PLSQL:
                case self::WORK:
                case self::WRAPPED:
                case self::WRAPPER:
                case self::WRITE:
                case self::XDB_FASTPATH_INSERT:
                case self::X_DYN_PRUNE:
                case self::XID:
                case self::XML2OBJECT:
                case self::XMLAGG:
                case self::XMLATTRIBUTES:
                case self::XMLCAST:
                case self::XMLCDATA:
                case self::XMLCOLATTVAL:
                case self::XMLCOMMENT:
                case self::XMLCONCAT:
                case self::XMLDIFF:
                case self::XML_DML_RWT_STMT:
                case self::XMLELEMENT:
                case self::XMLEXISTS2:
                case self::XMLEXISTS:
                case self::XMLFOREST:
                case self::XMLINDEX_REWRITE_IN_SELECT:
                case self::XMLINDEX_REWRITE:
                case self::XMLINDEX_SEL_IDX_TBL:
                case self::XMLISNODE:
                case self::XMLISVALID:
                case self::XMLNAMESPACES:
                case self::XMLPARSE:
                case self::XMLPATCH:
                case self::XMLPI:
                case self::XMLQUERYVAL:
                case self::XMLQUERY:
                case self::XMLROOT:
                case self::XMLSCHEMA:
                case self::XMLSERIALIZE:
                case self::XMLTABLE:
                case self::XMLTRANSFORMBLOB:
                case self::XMLTRANSFORM:
                case self::XMLTYPE:
                case self::XML:
                case self::XPATHTABLE:
                case self::XS_SYS_CONTEXT:
                case self::XS:
                case self::YEARS:
                case self::YEAR:
                case self::YES:
                case self::YMINTERVAL_UNCONSTRAINED:
                case self::ZONEMAP:
                case self::ZONE:
                case self::PREDICTION:
                case self::PREDICTION_BOUNDS:
                case self::PREDICTION_COST:
                case self::PREDICTION_DETAILS:
                case self::PREDICTION_PROBABILITY:
                case self::PREDICTION_SET:
                case self::CUME_DIST:
                case self::DENSE_RANK:
                case self::LISTAGG:
                case self::PERCENT_RANK:
                case self::PERCENTILE_CONT:
                case self::PERCENTILE_DISC:
                case self::RANK:
                case self::AVG:
                case self::CORR:
                case self::COVAR_:
                case self::LAG:
                case self::LEAD:
                case self::MAX:
                case self::MEDIAN:
                case self::MIN:
                case self::NTILE:
                case self::NVL:
                case self::RATIO_TO_REPORT:
                case self::REGR_:
                case self::ROUND:
                case self::ROW_NUMBER:
                case self::SUBSTR:
                case self::TO_CHAR:
                case self::TRIM:
                case self::SUM:
                case self::STDDEV:
                case self::VAR_:
                case self::VARIANCE:
                case self::LEAST:
                case self::GREATEST:
                case self::TO_DATE:
                case self::PERIOD:
                case self::DELIMITED_ID:
                case self::INTRODUCER:
                case self::REGULAR_ID:
                    $this->setState(8525);
                    $this->general_element();
                    break;

                case self::BINDVAR:
                case self::COLON:
                    $this->setState(8526);
                    $this->bind_variable();
                    break;

                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(8529);
            $this->match(self::ASSIGN_OP);
            $this->setState(8530);
            $this->expression();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

}